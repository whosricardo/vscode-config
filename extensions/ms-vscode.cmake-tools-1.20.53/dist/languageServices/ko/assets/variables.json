{
	"ANDROID": {
		"name": "ANDROID",
		"description": "대상 시스템(CMAKE_SYSTEM_NAME)이 Android인 경우 1로 설정합니다."
	},
	"APPLE": {
		"name": "APPLE",
		"description": "대상 시스템이 Apple 플랫폼(macOS, iOS, tvOS, visionOS 또는 watchOS)인 경우 True로 설정합니다."
	},
	"BORLAND": {
		"name": "BORLAND",
		"description": "Borland 컴파일러가 사용되고 있는 경우 True입니다."
	},
	"BSD": {
		"name": "BSD",
		"description": "대상 시스템이 BSD인 경우 문자열 값으로 설정합니다. 이 값은 DragonFlyBSD, FreeBSD, OpenBSD 또는 NetBSD 중 하나일 수 있습니다."
	},
	"BUILD_SHARED_LIBS": {
		"name": "BUILD_SHARED_LIBS",
		"description": "명시적 라이브러리 형식 없이 호출할 때 정적 라이브러리 대신 공유 라이브러리를 기본값으로 add_library 알립니다."
	},
	"CACHE": {
		"name": "CACHE",
		"description": "캐시 변수를 읽기 위한 연산자입니다."
	},
	"CMAKE_ABSOLUTE_DESTINATION_FILES": {
		"name": "CMAKE_ABSOLUTE_DESTINATION_FILES",
		"description": "절대 대상 경로를 사용하여 설치된 파일 목록입니다."
	},
	"CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY": {
		"name": "CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY",
		"description": "add_custom_command에서 기본적으로 DEPENDS_EXPLICIT_ONLY 옵션을 사용할지 여부입니다."
	},
	"CMAKE_ADSP_ROOT": {
		"name": "CMAKE_ADSP_ROOT",
		"description": ":ref:`Cross Compiling for ADSP SHARC/Blackfin`인 경우 이 변수는 최신 CCES 또는 VDSP++ 설치에 대한 절대 경로를 보유합니다. 디렉터리에는 cc21k.exe 및 ccblkfn.exe 컴파일러가 포함될 것으로 예상됩니다. CCES 또는 VDSP++의 기본 설치를 찾을 수 있는 경우 자동으로 설정됩니다."
	},
	"CMAKE_AIX_EXPORT_ALL_SYMBOLS": {
		"name": "CMAKE_AIX_EXPORT_ALL_SYMBOLS",
		"description": "AIX_EXPORT_ALL_SYMBOLS 대상 속성의 기본값입니다. 해당 변수는 속성이 생성될 때 각 대상에서 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": {
		"name": "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS",
		"description": "ANDROID_ANT_ADDITIONAL_OPTIONS 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_API": {
		"name": "CMAKE_ANDROID_API",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition을 사용한 Android에 대한 교차 컴파일 시 이 변수는 ANDROID_API 대상 속성의 기본값을 지정하도록 설정할 수 있습니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_API_MIN": {
		"name": "CMAKE_ANDROID_API_MIN",
		"description": "ANDROID_API_MIN 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_ARCH": {
		"name": "CMAKE_ANDROID_ARCH",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition을 사용한 Android에 대한 교차 컴파일 시 이 변수는 ANDROID_ARCH 대상 속성의 기본값을 지정하도록 설정할 수 있습니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_ARCH_ABI": {
		"name": "CMAKE_ANDROID_ARCH_ABI",
		"description": "Android에 대한 교차 컴파일 시 이 변수는 사용할 대상 아키텍처 및 ABI를 지정합니다. 유효한 값은 다음과 같습니다:"
	},
	"CMAKE_ANDROID_ARM_MODE": {
		"name": "CMAKE_ANDROID_ARM_MODE",
		"description": "Android 및 CMAKE_ANDROID_ARCH_ABI의 교차 컴파일이 armeabi 아키텍처로 설정된 경우 CMAKE_ANDROID_ARM_MODE를 ON으로 설정하여 32비트 ARM 프로세서(-marm)를 대상으로 지정합니다. 그렇지 않으면 기본적으로 16비트 Thumb 프로세서(-mthumb)를 대상으로 지정합니다."
	},
	"CMAKE_ANDROID_ARM_NEON": {
		"name": "CMAKE_ANDROID_ARM_NEON",
		"description": "Android 및 CMAKE_ANDROID_ARCH_ABI의 교차 컴파일이 armeabi-v7a로 설정된 경우 CMAKE_ANDROID_ARM_NEON을 ON으로 설정하여 ARM NEON 디바이스를 대상으로 지정합니다."
	},
	"CMAKE_ANDROID_ASSETS_DIRECTORIES": {
		"name": "CMAKE_ANDROID_ASSETS_DIRECTORIES",
		"description": "ANDROID_ASSETS_DIRECTORIES 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_EXCEPTIONS": {
		"name": "CMAKE_ANDROID_EXCEPTIONS",
		"description": "NDK를 사용한 Android에 대한 교차 컴파일 시 이 변수는 예외 사용 여부를 지정하기 위해 설정될 수 있습니다."
	},
	"CMAKE_ANDROID_GUI": {
		"name": "CMAKE_ANDROID_GUI",
		"description": "실행 파일에 대한 ANDROID_GUI 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_JAR_DEPENDENCIES": {
		"name": "CMAKE_ANDROID_JAR_DEPENDENCIES",
		"description": "ANDROID_JAR_DEPENDENCIES 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_JAR_DIRECTORIES": {
		"name": "CMAKE_ANDROID_JAR_DIRECTORIES",
		"description": "ANDROID_JAR_DIRECTORIES 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_JAVA_SOURCE_DIR": {
		"name": "CMAKE_ANDROID_JAVA_SOURCE_DIR",
		"description": "ANDROID_JAVA_SOURCE_DIR 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": {
		"name": "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES",
		"description": "ANDROID_NATIVE_LIB_DEPENDENCIES 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": {
		"name": "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES",
		"description": "ANDROID_NATIVE_LIB_DIRECTORIES 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_NDK": {
		"name": "CMAKE_ANDROID_NDK",
		"description": "NDK를 사용한 Android에 대한 교차 컴파일 시 이 변수에는 NDK 루트 디렉터리의 절대 경로가 포함됩니다. 해당 디렉터리에는 android-<api> 디렉터리를 포함하는 플랫폼 하위 디렉터리가 포함되어야 합니다."
	},
	"CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": {
		"name": "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS",
		"description": "NDK를 사용한 Android에 대한 교차 컴파일 시 이 변수는 통합 헤더 대신 더 이상 사용되지 않는 API 수준별 헤더를 사용할지 여부를 지정하도록 설정할 수 있습니다."
	},
	"CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": {
		"name": "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG",
		"description": "NDK를 사용한 Android에 대한 교차 컴파일 시 이 변수는 호스트에서 실행되는 미리 빌드된 도구 체인의 경로를 생성하는 데 사용되는 NDK의 \"호스트 태그\"를 제공합니다."
	},
	"CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": {
		"name": "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION",
		"description": "NDK를 사용한 Android에 대한 교차 컴파일 시 이 변수는 컴파일러로 사용할 도구 체인의 버전을 지정하도록 설정할 수 있습니다."
	},
	"CMAKE_ANDROID_NDK_VERSION": {
		"name": "CMAKE_ANDROID_NDK_VERSION",
		"description": "NDK 및 Android NDK 버전 11 이상을 사용한 Android에 대한 교차 컴파일 시 이 변수는 NDK 버전 번호를 보고하기 위해 CMake에서 제공합니다."
	},
	"CMAKE_ANDROID_PROCESS_MAX": {
		"name": "CMAKE_ANDROID_PROCESS_MAX",
		"description": "ANDROID_PROCESS_MAX 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_PROGUARD": {
		"name": "CMAKE_ANDROID_PROGUARD",
		"description": "ANDROID_PROGUARD 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_PROGUARD_CONFIG_PATH": {
		"name": "CMAKE_ANDROID_PROGUARD_CONFIG_PATH",
		"description": "ANDROID_PROGUARD_CONFIG_PATH 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_RTTI": {
		"name": "CMAKE_ANDROID_RTTI",
		"description": "NDK를 사용한 Android에 대한 교차 컴파일 시 이 변수는 RTTI 사용 여부를 지정하기 위해 설정될 수 있습니다."
	},
	"CMAKE_ANDROID_SECURE_PROPS_PATH": {
		"name": "CMAKE_ANDROID_SECURE_PROPS_PATH",
		"description": "ANDROID_SECURE_PROPS_PATH 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_SKIP_ANT_STEP": {
		"name": "CMAKE_ANDROID_SKIP_ANT_STEP",
		"description": "ANDROID_SKIP_ANT_STEP 대상 속성의 기본값입니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_ANDROID_STANDALONE_TOOLCHAIN": {
		"name": "CMAKE_ANDROID_STANDALONE_TOOLCHAIN",
		"description": "독립 실행형 도구 체인을 사용한 Android에 대한 교차 컴파일 시 이 변수에는 도구 체인 루트 디렉터리의 절대 경로가 포함됩니다. 지정된 디렉터리에는 sysroot 하위 디렉터리가 포함되어야 합니다."
	},
	"CMAKE_ANDROID_STL_TYPE": {
		"name": "CMAKE_ANDROID_STL_TYPE",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition을 사용하여 Android에 대한 교차 컴파일 시 이 변수는 ANDROID_STL_TYPE 대상 속성의 기본값을 지정하도록 설정할 수 있습니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_APPBUNDLE_PATH": {
		"name": "CMAKE_APPBUNDLE_PATH",
		"description": "find_program 및 find_package 명령에서 사용되는 macOS 애플리케이션 번들의 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다."
	},
	"CMAKE_APPLE_SILICON_PROCESSOR": {
		"name": "CMAKE_APPLE_SILICON_PROCESSOR",
		"description": "macOS를 실행하는 Apple Silicon 호스트에서 이 변수를 설정하여 CMAKE_HOST_SYSTEM_PROCESSOR에 사용할 아키텍처를 CMake에 알립니다. 값은 arm64 또는 x86_64여야 합니다."
	},
	"CMAKE_AR": {
		"name": "CMAKE_AR",
		"description": "정적 라이브러리의 보관 도구 이름입니다."
	},
	"CMAKE_ARCHIVE_OUTPUT_DIRECTORY": {
		"name": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY",
		"description": "빌드될 때 모든 ARCHIVE 대상 파일을 넣을 위치입니다."
	},
	"CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "특정 구성용으로 빌드될 때 모든 ARCHIVE 대상 파일을 넣을 위치입니다."
	},
	"CMAKE_ARGC": {
		"name": "CMAKE_ARGC",
		"description": "스크립트 모드에서 CMake에 전달되는 명령줄 인수 수입니다."
	},
	"CMAKE_ARGV0": {
		"name": "CMAKE_ARGV0",
		"description": "스크립트 모드에서 CMake에 전달되는 명령줄 인수입니다."
	},
	"CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": {
		"name": "CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG",
		"description": "이 변수는 생성되는 모든 대상에서 AUTOGEN_BETTER_GRAPH_MULTI_CONFIG 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX": {
		"name": "CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX",
		"description": "명령줄에 모든 인수를 전달하는 대신 Windows에서 응답 파일 사용을 트리거하는 autogen 대상(예: moc 또는 uic)에 대한 명령줄 길이 제한입니다."
	},
	"CMAKE_AUTOGEN_ORIGIN_DEPENDS": {
		"name": "CMAKE_AUTOGEN_ORIGIN_DEPENDS",
		"description": "원본 대상 종속성을 해당 <ORIGIN>_autogen 대상으로 전달하도록 전환합니다."
	},
	"CMAKE_AUTOGEN_PARALLEL": {
		"name": "CMAKE_AUTOGEN_PARALLEL",
		"description": "AUTOMOC 및 AUTOUIC를 사용할 경우 시작할 병렬 moc 또는 uic 프로세스 수입니다."
	},
	"CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE": {
		"name": "CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE",
		"description": "이 변수는 생성되는 모든 대상에서 AUTOGEN_USE_SYSTEM_INCLUDE 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_AUTOGEN_VERBOSE": {
		"name": "CMAKE_AUTOGEN_VERBOSE",
		"description": "AUTOMOC, AUTOUIC 및 AUTORCC의 세부 정보 표시를 설정합니다. 양의 정수 값 또는 true 부울 값을 사용하면 AUTO* 생성기가 추가 처리 정보를 출력할 수 있습니다."
	},
	"CMAKE_AUTOMOC": {
		"name": "CMAKE_AUTOMOC",
		"description": "Qt 대상에 대한 moc를 자동으로 처리할지 여부를 나타냅니다."
	},
	"CMAKE_AUTOMOC_COMPILER_PREDEFINES": {
		"name": "CMAKE_AUTOMOC_COMPILER_PREDEFINES",
		"description": "이 변수는 모든 대상에서 AUTOMOC_COMPILER_PREDEFINES 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_AUTOMOC_DEPEND_FILTERS": {
		"name": "CMAKE_AUTOMOC_DEPEND_FILTERS",
		"description": "moc 파일에 대한 추가 종속성으로 소스 코드에서 파일 이름을 추출하기 위해 CMAKE_AUTOMOC에서 사용되는 필터 정의입니다."
	},
	"CMAKE_AUTOMOC_EXECUTABLE": {
		"name": "CMAKE_AUTOMOC_EXECUTABLE",
		"description": "이 변수는 모든 대상에서 AUTOMOC_EXECUTABLE 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_AUTOMOC_MACRO_NAMES": {
		"name": "CMAKE_AUTOMOC_MACRO_NAMES",
		"description": "moc로 C++ 파일을 처리해야 하는지 결정하기 위해 CMAKE_AUTOMOC에서 사용되는 매크로 이름의 세미콜론으로 구분된 목록입니다."
	},
	"CMAKE_AUTOMOC_MOC_OPTIONS": {
		"name": "CMAKE_AUTOMOC_MOC_OPTIONS",
		"description": "CMAKE_AUTOMOC를 사용하는 경우 moc에 대한 추가 옵션"
	},
	"CMAKE_AUTOMOC_PATH_PREFIX": {
		"name": "CMAKE_AUTOMOC_PATH_PREFIX",
		"description": "AUTOMOC 사용 가능 Qt 대상의 moc에 대해 -p 경로 접두사 옵션을 생성할지 여부를 나타냅니다."
	},
	"CMAKE_AUTOMOC_RELAXED_MODE": {
		"name": "CMAKE_AUTOMOC_RELAXED_MODE",
		"description": "strict 및 relaxed automoc 모드 간에 전환합니다."
	},
	"CMAKE_AUTORCC": {
		"name": "CMAKE_AUTORCC",
		"description": "Qt 대상에 대한 rcc를 자동으로 처리할지 여부를 나타냅니다."
	},
	"CMAKE_AUTORCC_EXECUTABLE": {
		"name": "CMAKE_AUTORCC_EXECUTABLE",
		"description": "이 변수는 모든 대상에서 AUTORCC_EXECUTABLE 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_AUTORCC_OPTIONS": {
		"name": "CMAKE_AUTORCC_OPTIONS",
		"description": "CMAKE_AUTORCC를 사용하는 경우 rcc에 대한 추가 옵션"
	},
	"CMAKE_AUTOUIC": {
		"name": "CMAKE_AUTOUIC",
		"description": "Qt 대상에 대한 uic를 자동으로 처리할지 여부를 나타냅니다."
	},
	"CMAKE_AUTOUIC_EXECUTABLE": {
		"name": "CMAKE_AUTOUIC_EXECUTABLE",
		"description": "이 변수는 모든 대상에서 AUTOUIC_EXECUTABLE 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_AUTOUIC_OPTIONS": {
		"name": "CMAKE_AUTOUIC_OPTIONS",
		"description": "CMAKE_AUTOUIC를 사용하는 경우 uic에 대한 추가 옵션입니다."
	},
	"CMAKE_AUTOUIC_SEARCH_PATHS": {
		"name": "CMAKE_AUTOUIC_SEARCH_PATHS",
		"description": "CMAKE_AUTOUIC에서 포함된 .ui 파일을 찾는 데 사용되는 검색 경로 목록입니다."
	},
	"CMAKE_BACKWARDS_COMPATIBILITY": {
		"name": "CMAKE_BACKWARDS_COMPATIBILITY",
		"description": "사용되지 않는 명령어입니다. CMake 정책 CMP0001 설명서를 참조하세요."
	},
	"CMAKE_BINARY_DIR": {
		"name": "CMAKE_BINARY_DIR",
		"description": "최상위 빌드 트리의 경로입니다."
	},
	"CMAKE_BUILD_RPATH": {
		"name": "CMAKE_BUILD_RPATH",
		"description": "런타임 경로를 지원하는 플랫폼에 대한 빌드 트리에서 연결된 이진 파일에 추가할 런타임 경로(RPATH) 항목을 지정하는 세미콜론으로 구분된 목록입니다. 해당 항목은 설치 트리에서 이진 파일에 사용되지 않습니다. CMAKE_INSTALL_RPATH 변수를 참조하세요."
	},
	"CMAKE_BUILD_RPATH_USE_ORIGIN": {
		"name": "CMAKE_BUILD_RPATH_USE_ORIGIN",
		"description": "빌드 RPATH에 상대 경로를 사용할지 여부를 나타냅니다."
	},
	"CMAKE_BUILD_TOOL": {
		"name": "CMAKE_BUILD_TOOL",
		"description": "이 변수는 이전 버전과의 호환성을 위해서만 제공됩니다. CMAKE_MAKE_PROGRAM과 동일한 값을 포함합니다. 해당 변수를 대신 사용하세요."
	},
	"CMAKE_BUILD_TYPE": {
		"name": "CMAKE_BUILD_TYPE",
		"description": "단일 구성 생성기(예: Makefile 생성기 또는 Ninja)의 빌드 유형을 지정합니다. 일반적인 값에는 Debug, Release, RelWithDebInfo 및 MinSizeRel이 포함되지만 사용자 지정 빌드 유형도 정의할 수 있습니다."
	},
	"CMAKE_BUILD_WITH_INSTALL_NAME_DIR": {
		"name": "CMAKE_BUILD_WITH_INSTALL_NAME_DIR",
		"description": "빌드 트리의 대상에서 INSTALL_NAME_DIR을 사용할지 여부를 나타냅니다."
	},
	"CMAKE_BUILD_WITH_INSTALL_RPATH": {
		"name": "CMAKE_BUILD_WITH_INSTALL_RPATH",
		"description": "RPATH의 설치 경로를 사용합니다."
	},
	"CMAKE_CACHEFILE_DIR": {
		"name": "CMAKE_CACHEFILE_DIR",
		"description": "이 변수는 CMake에서 내부적으로 사용되며 빌드 트리의 첫 번째 구성 중에는 설정할 수 없습니다. 설정되면 CMAKE_BINARY_DIR과 같은 값을 갖습니다. 해당 변수를 대신 사용하세요."
	},
	"CMAKE_CACHE_MAJOR_VERSION": {
		"name": "CMAKE_CACHE_MAJOR_VERSION",
		"description": "CMakeCache.txt 파일을 만드는 데 사용되는 CMake의 주 버전"
	},
	"CMAKE_CACHE_MINOR_VERSION": {
		"name": "CMAKE_CACHE_MINOR_VERSION",
		"description": "CMakeCache.txt 파일을 만드는 데 사용되는 CMake의 부 버전"
	},
	"CMAKE_CACHE_PATCH_VERSION": {
		"name": "CMAKE_CACHE_PATCH_VERSION",
		"description": "CMakeCache.txt 파일을 만드는 데 사용되는 CMake의 패치 버전"
	},
	"CMAKE_CFG_INTDIR": {
		"name": "CMAKE_CFG_INTDIR",
		"description": "구성별 출력 하위 디렉터리에 대한 빌드 시간 참조입니다."
	},
	"CMAKE_CLANG_VFS_OVERLAY": {
		"name": "CMAKE_CLANG_VFS_OVERLAY",
		"description": "clang-cl을 사용한 Windows에 대한 교차 컴파일 시 이 변수는 대/소문자를 구분하는 파일 시스템에서 Windows 헤더 이름을 확인하기 위해 clang-cl을 사용하는 clang 가상 파일 시스템 YAML 파일을 가리키는 절대 경로가 될 수 있습니다."
	},
	"CMAKE_CL_64": {
		"name": "CMAKE_CL_64",
		"description": "권장되지 않는 명령어입니다. CMAKE_SIZEOF_VOID_P를 대신 사용하세요."
	},
	"CMAKE_CODEBLOCKS_COMPILER_ID": {
		"name": "CMAKE_CODEBLOCKS_COMPILER_ID",
		"description": "생성된 CodeBlocks 프로젝트 파일에서 컴파일러 ID를 변경합니다."
	},
	"CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": {
		"name": "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES",
		"description": "CodeBlocks 생성기가 프로젝트 파일을 만드는 방법을 변경합니다."
	},
	"CMAKE_CODELITE_USE_TARGETS": {
		"name": "CMAKE_CODELITE_USE_TARGETS",
		"description": "CodeLite 생성기가 프로젝트 파일을 만드는 방법을 변경합니다."
	},
	"CMAKE_COLOR_DIAGNOSTICS": {
		"name": "CMAKE_COLOR_DIAGNOSTICS",
		"description": "전체적으로 색상 진단을 활성화합니다."
	},
	"CMAKE_COLOR_MAKEFILE": {
		"name": "CMAKE_COLOR_MAKEFILE",
		"description": "Makefile 생성기를 사용할 경우 색 출력을 사용하도록 설정합니다."
	},
	"CMAKE_COMMAND": {
		"name": "CMAKE_COMMAND",
		"description": "cmake 실행 파일의 전체 경로입니다."
	},
	"CMAKE_COMPILER_2005": {
		"name": "CMAKE_COMPILER_2005",
		"description": "Microsoft에서 Visual Studio 2005 컴파일러 사용"
	},
	"CMAKE_COMPILER_IS_GNUCC": {
		"name": "CMAKE_COMPILER_IS_GNUCC",
		"description": "C 컴파일러가 GNU이면 True입니다."
	},
	"CMAKE_COMPILER_IS_GNUCXX": {
		"name": "CMAKE_COMPILER_IS_GNUCXX",
		"description": "CXX(C++) 컴파일러가 GNU이면 True입니다."
	},
	"CMAKE_COMPILER_IS_GNUG77": {
		"name": "CMAKE_COMPILER_IS_GNUG77",
		"description": "Fortran 컴파일러가 GNU이면 True입니다."
	},
	"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": {
		"name": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY",
		"description": "소스 파일을 빌드하는 동안 컴파일러에서 생성된 MS 디버그 기호 .pdb 파일의 출력 디렉터리입니다."
	},
	"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "소스 파일을 빌드하는 동안 컴파일러에서 생성된 MS 디버그 기호 .pdb 파일의 구성별 출력 디렉터리입니다."
	},
	"CMAKE_COMPILE_WARNING_AS_ERROR": {
		"name": "CMAKE_COMPILE_WARNING_AS_ERROR",
		"description": "컴파일 시 경고를 오류로 처리할지 여부를 지정합니다."
	},
	"CMAKE_CONFIGURATION_TYPES": {
		"name": "CMAKE_CONFIGURATION_TYPES",
		"description": "다중 구성 생성기(예: Visual Studio, Xcode 또는 Ninja Multi-Config)에서 사용 가능한 빌드 형식(구성)을 세미콜론으로 구분된 목록으로 지정합니다. 일반적인 항목에는 Debug, Release, RelWithDebInfo, MinSizeRel이 포함되지만, 사용자 지정 빌드 형식도 정의할 수 있습니다."
	},
	"CMAKE_<CONFIG>_POSTFIX": {
		"name": "CMAKE_<CONFIG>_POSTFIX",
		"description": "구성 <CONFIG> 아래 라이브러리의 기본 파일 이름 후위입니다."
	},
	"CMAKE_CPACK_COMMAND": {
		"name": "CMAKE_CPACK_COMMAND",
		"description": "CMake로 설치된 cpack 명령의 전체 경로입니다."
	},
	"CMAKE_CROSSCOMPILING": {
		"name": "CMAKE_CROSSCOMPILING",
		"description": "이 변수는 CMake가 교차 컴파일 중인지 여부를 나타내기 위해 설정되지만 아래에 설명된 제한 사항에 유의하세요."
	},
	"CMAKE_CROSSCOMPILING_EMULATOR": {
		"name": "CMAKE_CROSSCOMPILING_EMULATOR",
		"description": "이 변수는 CMAKE_CROSSCOMPILING이 on인 경우에만 사용됩니다. 대상 시스템용으로 빌드된 실행 파일을 실행할 수 있는 호스트 시스템의 명령을 가리켜야 합니다."
	},
	"CMAKE_CROSS_CONFIGS": {
		"name": "CMAKE_CROSS_CONFIGS",
		"description": "Ninja 다중 구성 생성기의 모든 build-<Config>.ninja 파일에서 사용할 수 있는 구성의 세미콜론으로 구분된 목록을 지정합니다. 이 변수는 교차 구성 모드를 활성화합니다. 이 변수에 지정된 각 구성의 대상은 build-<Config>.ninja 파일에서 빌드할 수 있습니다. 사용자 지정 명령은 build-<Config>.ninja에 기본 제공되는 구성을 사용합니다. 모두로 설정하면 CMAKE_CONFIGURATION_TYPES의 모든 구성은 교차 구성입니다. 이를 지정하지 않거나 비워 두면 각 build-<Config>.ninja 파일에는 자체 구성의 빌드 규칙만 포함됩니다."
	},
	"CMAKE_CTEST_ARGUMENTS": {
		"name": "CMAKE_CTEST_ARGUMENTS",
		"description": "이 항목은 생성된 빌드 시스템의 테스트(또는 RUN_TESTS) 대상을 통해 테스트를 실행할 때 ctest에 전달할 명령줄 인수의 세미콜론으로 구분된 목록으로 설정합니다."
	},
	"CMAKE_CTEST_COMMAND": {
		"name": "CMAKE_CTEST_COMMAND",
		"description": "CMake로 설치된 ctest 명령의 전체 경로입니다."
	},
	"CMAKE_CUDA_ARCHITECTURES": {
		"name": "CMAKE_CUDA_ARCHITECTURES",
		"description": "CUDA_ARCHITECTURES 대상 속성의 기본값입니다."
	},
	"CMAKE_CUDA_COMPILE_FEATURES": {
		"name": "CMAKE_CUDA_COMPILE_FEATURES",
		"description": "CUDA 컴파일러에서 인식되는 기능 목록"
	},
	"CMAKE_CUDA_EXTENSIONS": {
		"name": "CMAKE_CUDA_EXTENSIONS",
		"description": "대상이 생성될 때 설정된 경우 CUDA_EXTENSIONS 대상 속성의 기본값입니다."
	},
	"CMAKE_CUDA_HOST_COMPILER": {
		"name": "CMAKE_CUDA_HOST_COMPILER",
		"description": "보다 일반적인 CMAKE_<LANG>_HOST_COMPILER 변수의 원래 CUDA별 이름입니다. 자세한 내용은 후자를 참조하세요."
	},
	"CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS": {
		"name": "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS",
		"description": "정의하는 경우 CUDA_RESOLVE_DEVICE_SYMBOLS 대상 속성의 기본값입니다. 기본적으로 이 변수는 정의되지 않습니다."
	},
	"CMAKE_CUDA_RUNTIME_LIBRARY": {
		"name": "CMAKE_CUDA_RUNTIME_LIBRARY",
		"description": "CUDA를 컴파일 및 연결할 때 사용할 CUDA 런타임 라이브러리를 선택합니다. 해당 변수는 생성 시 모든 대상에서 CUDA_RUNTIME_LIBRARY 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_CUDA_SEPARABLE_COMPILATION": {
		"name": "CMAKE_CUDA_SEPARABLE_COMPILATION",
		"description": "CUDA_SEPARABLE_COMPILATION 대상 속성의 기본값입니다. 이 변수는 속성이 생성될 때 각 대상에서 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_CUDA_STANDARD": {
		"name": "CMAKE_CUDA_STANDARD",
		"description": "대상이 생성될 때 설정된 경우 CUDA_STANDARD 대상 속성의 기본값입니다."
	},
	"CMAKE_CUDA_STANDARD_REQUIRED": {
		"name": "CMAKE_CUDA_STANDARD_REQUIRED",
		"description": "대상이 생성될 때 설정된 경우 CUDA_STANDARD_REQUIRED 대상 속성의 기본값입니다."
	},
	"CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES",
		"description": "CUDA 언어가 사용하도록 설정된 경우 이 항목은 CUDA 도구 키트에서 제공되는 포함 디렉터리의 세미콜론으로 구분된 목록을 제공합니다. 이 값은 C++ 소스 파일에 CUDA 헤더를 포함할 경우 유용할 수 있습니다."
	},
	"CMAKE_CURRENT_BINARY_DIR": {
		"name": "CMAKE_CURRENT_BINARY_DIR",
		"description": "현재 처리 중인 이진 디렉터리의 경로입니다."
	},
	"CMAKE_CURRENT_FUNCTION": {
		"name": "CMAKE_CURRENT_FUNCTION",
		"description": "함수 내에서 코드를 실행하는 경우 이 변수는 현재 함수의 이름을 포함합니다. 진단 또는 디버그 메시지에 유용할 수 있습니다."
	},
	"CMAKE_CURRENT_FUNCTION_LIST_DIR": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_DIR",
		"description": "함수 내에서 코드를 실행하는 경우 이 변수는 현재 함수를 정의한 listfile의 전체 디렉터리를 포함합니다."
	},
	"CMAKE_CURRENT_FUNCTION_LIST_FILE": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_FILE",
		"description": "함수 내에서 코드를 실행하는 경우 이 변수는 현재 함수를 정의한 listfile의 전체 경로를 포함합니다."
	},
	"CMAKE_CURRENT_FUNCTION_LIST_LINE": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_LINE",
		"description": "함수 내에서 코드를 실행하는 경우 이 변수는 현재 함수가 정의된 listfile의 줄 번호를 포함합니다."
	},
	"CMAKE_CURRENT_LIST_DIR": {
		"name": "CMAKE_CURRENT_LIST_DIR",
		"description": "현재 처리 중인 listfile의 전체 디렉터리입니다."
	},
	"CMAKE_CURRENT_LIST_FILE": {
		"name": "CMAKE_CURRENT_LIST_FILE",
		"description": "현재 처리 중인 listfile의 전체 경로입니다."
	},
	"CMAKE_CURRENT_LIST_LINE": {
		"name": "CMAKE_CURRENT_LIST_LINE",
		"description": "처리 중인 현재 파일의 줄 번호입니다."
	},
	"CMAKE_CURRENT_SOURCE_DIR": {
		"name": "CMAKE_CURRENT_SOURCE_DIR",
		"description": "현재 처리 중인 소스 디렉터리의 경로입니다."
	},
	"CMAKE_CXX_COMPILER_IMPORT_STD": {
		"name": "CMAKE_CXX_COMPILER_IMPORT_STD",
		"description": "현재 C++ 툴체인에 대해 가져오기 std가 지원되는 C++ 표준 레벨 목록입니다. c++<NN> 지원은 if 명령과 함께 <NN> IN_LIST CMAKE_CXX_COMPILER_IMPORT_STD 조건자를 사용하여 검색할 수 있습니다."
	},
	"CMAKE_CXX_COMPILE_FEATURES": {
		"name": "CMAKE_CXX_COMPILE_FEATURES",
		"description": "C++ 컴파일러에서 인식되는 기능 목록"
	},
	"CMAKE_CXX_EXTENSIONS": {
		"name": "CMAKE_CXX_EXTENSIONS",
		"description": "대상이 생성될 때 설정된 경우 CXX_EXTENSIONS 대상 속성의 기본값입니다."
	},
	"CMAKE_CXX_MODULE_STD": {
		"name": "CMAKE_CXX_MODULE_STD",
		"description": "cxx_std_23 이상의 대상에 유틸리티 대상을 종속성으로 추가할지 여부입니다."
	},
	"CMAKE_CXX_SCAN_FOR_MODULES": {
		"name": "CMAKE_CXX_SCAN_FOR_MODULES",
		"description": "모듈 종속성을 위해 C++ 원본 파일을 검색할지 여부를 지정합니다."
	},
	"CMAKE_CXX_STANDARD": {
		"name": "CMAKE_CXX_STANDARD",
		"description": "대상이 생성될 때 설정된 경우 CXX_STANDARD 대상 속성의 기본값입니다."
	},
	"CMAKE_CXX_STANDARD_REQUIRED": {
		"name": "CMAKE_CXX_STANDARD_REQUIRED",
		"description": "대상이 생성될 때 설정된 경우 CXX_STANDARD_REQUIRED 대상 속성의 기본값입니다."
	},
	"CMAKE_C_COMPILE_FEATURES": {
		"name": "CMAKE_C_COMPILE_FEATURES",
		"description": "C 컴파일러에서 인식되는 기능 목록"
	},
	"CMAKE_C_EXTENSIONS": {
		"name": "CMAKE_C_EXTENSIONS",
		"description": "대상이 생성될 때 설정된 경우 C_EXTENSIONS 대상 속성의 기본값입니다."
	},
	"CMAKE_C_STANDARD": {
		"name": "CMAKE_C_STANDARD",
		"description": "대상이 생성될 때 설정된 경우 C_STANDARD 대상 속성의 기본값입니다."
	},
	"CMAKE_C_STANDARD_REQUIRED": {
		"name": "CMAKE_C_STANDARD_REQUIRED",
		"description": "대상이 생성될 때 설정된 경우 C_STANDARD_REQUIRED 대상 속성의 기본값입니다."
	},
	"CMAKE_DEBUG_POSTFIX": {
		"name": "CMAKE_DEBUG_POSTFIX",
		"description": "변수 CMAKE_<CONFIG>_POSTFIX를 참조하세요."
	},
	"CMAKE_DEBUG_TARGET_PROPERTIES": {
		"name": "CMAKE_DEBUG_TARGET_PROPERTIES",
		"description": "대상 속성의 추적 출력을 사용하도록 설정합니다."
	},
	"CMAKE_DEFAULT_BUILD_TYPE": {
		"name": "CMAKE_DEFAULT_BUILD_TYPE",
		"description": "Ninja 다중 구성 생성기의 build.ninja 파일에서 기본적으로 사용할 구성을 지정합니다. 이 변수를 지정하면 build.ninja는 기본적으로 build-<Config>.ninja의 빌드 규칙을 사용합니다. 모든 사용자 지정 명령은 해당 구성으로 실행됩니다. 변수를 지정하지 않으면 CMAKE_CONFIGURATION_TYPES의 첫 번째 항목이 대신 사용됩니다."
	},
	"CMAKE_DEFAULT_CONFIGS": {
		"name": "CMAKE_DEFAULT_CONFIGS",
		"description": "Ninja 다중 구성 생성기에 :<Config> 접미사가 지정되지 않은 경우 build.ninja에서 대상에 대해 빌드할 구성의 세미콜론으로 구분된 목록을 지정합니다. 모두로 설정하면 CMAKE_CROSS_CONFIGS의 모든 구성이 사용됩니다. 지정하지 않으면 기본적으로 CMAKE_DEFAULT_BUILD_TYPE으로 설정됩니다."
	},
	"CMAKE_DEPENDS_IN_PROJECT_ONLY": {
		"name": "CMAKE_DEPENDS_IN_PROJECT_ONLY",
		"description": "디렉터리에서 TRUE로 설정될 경우 Makefile 생성기에서 생성된 빌드 시스템은 소스 또는 이진 디렉터리에 나타나는 소스 파일의 종속성만 고려하도록 설정됩니다. 이 디렉터리 외부에 있는 소스 파일을 변경하면 다시 빌드가 수행되지 않습니다."
	},
	"CMAKE_DEPENDS_USE_COMPILER": {
		"name": "CMAKE_DEPENDS_USE_COMPILER",
		"description": "메이크파일 생성기의 경우, 컴파일러 선택에 대한 소스 종속성이 지금 컴파일러 자체에서 생성됩니다. 이 변수를 FALSE 값을 사용하여 정의하면 레거시 동작을 복원할 수 있습니다(종속성 검색에 CMake 사용)."
	},
	"CMAKE_DIRECTORY_LABELS": {
		"name": "CMAKE_DIRECTORY_LABELS",
		"description": "현재 디렉터리의 레이블을 지정합니다."
	},
	"CMAKE_DISABLE_FIND_PACKAGE_<PackageName>": {
		"name": "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>",
		"description": "find_package 호출을 사용하지 않도록 설정하기 위한 변수입니다."
	},
	"CMAKE_DISABLE_PRECOMPILE_HEADERS": {
		"name": "CMAKE_DISABLE_PRECOMPILE_HEADERS",
		"description": "대상에 대한 DISABLE_PRECOMPILE_HEADERS의 기본값입니다."
	},
	"CMAKE_DLL_NAME_WITH_SOVERSION": {
		"name": "CMAKE_DLL_NAME_WITH_SOVERSION",
		"description": "이 변수는 WIN32 변수가 설정될 때 선택되는 Windows 플랫폼의 공유 라이브러리 대상에서 DLL_NAME_WITH_SOVERSION 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_DL_LIBS": {
		"name": "CMAKE_DL_LIBS",
		"description": "dlopen 및 dlclose를 포함하는 라이브러리 이름입니다."
	},
	"CMAKE_DOTNET_SDK": {
		"name": "CMAKE_DOTNET_SDK",
		"description": "대상의 DOTNET_SDK 속성에 대한 기본값입니다."
	},
	"CMAKE_DOTNET_TARGET_FRAMEWORK": {
		"name": "CMAKE_DOTNET_TARGET_FRAMEWORK",
		"description": "DOTNET_TARGET_FRAMEWORK 대상 속성의 기본값입니다."
	},
	"CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": "DOTNET_TARGET_FRAMEWORK_VERSION 대상 속성의 기본값입니다."
	},
	"CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": {
		"name": "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES",
		"description": "이 캐시 변수는 Eclipse 프로젝트 생성기에서 사용됩니다. CMake 생성기를 참조하세요."
	},
	"CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": {
		"name": "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT",
		"description": "이 캐시 변수는 Eclipse 프로젝트 생성기에서 사용됩니다. CMake 생성기를 참조하세요."
	},
	"CMAKE_ECLIPSE_MAKE_ARGUMENTS": {
		"name": "CMAKE_ECLIPSE_MAKE_ARGUMENTS",
		"description": "이 캐시 변수는 Eclipse 프로젝트 생성기에서 사용됩니다. CMake 생성기를 참조하세요."
	},
	"CMAKE_ECLIPSE_RESOURCE_ENCODING": {
		"name": "CMAKE_ECLIPSE_RESOURCE_ENCODING",
		"description": "이 캐시 변수는 리소스 인코딩을 생성된 프로젝트 파일의 지정된 값으로 설정하도록 Eclipse CDT4 프로젝트 생성기에 알립니다. 값을 지정하지 않으면 인코딩이 설정되지 않습니다."
	},
	"CMAKE_ECLIPSE_VERSION": {
		"name": "CMAKE_ECLIPSE_VERSION",
		"description": "이 캐시 변수는 Eclipse 프로젝트 생성기에서 사용됩니다. CMake 생성기를 참조하세요."
	},
	"CMAKE_EDIT_COMMAND": {
		"name": "CMAKE_EDIT_COMMAND",
		"description": "cmake-gui 또는 ccmake의 전체 경로입니다. 추가 생성기를 사용하지 않는 경우 메이크파일 생성기 및 Ninja 생성기에 대해서만 정의됩니다."
	},
	"CMAKE_ENABLE_EXPORTS": {
		"name": "CMAKE_ENABLE_EXPORTS",
		"description": "실행 파일이 로드 가능한 모듈의 기호를 내보낼지 여부를 지정합니다."
	},
	"CMAKE_ERROR_DEPRECATED": {
		"name": "CMAKE_ERROR_DEPRECATED",
		"description": "사용되지 않는 기능에 대한 오류를 발생시킬지 여부를 나타냅니다."
	},
	"CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "절대 INSTALL DESTINATION이 있는 파일이 발견되는 즉시 오류를 보고하도록 cmake_install.cmake 스크립트에 요청합니다."
	},
	"CMAKE_EXECUTABLE_ENABLE_EXPORTS": {
		"name": "CMAKE_EXECUTABLE_ENABLE_EXPORTS",
		"description": "실행 파일이 로드 가능한 모듈의 기호를 내보낼지 여부를 지정합니다."
	},
	"CMAKE_EXECUTABLE_SUFFIX": {
		"name": "CMAKE_EXECUTABLE_SUFFIX",
		"description": "이 플랫폼에 있는 실행 파일의 접미사입니다."
	},
	"CMAKE_EXECUTABLE_SUFFIX_<LANG>": {
		"name": "CMAKE_EXECUTABLE_SUFFIX_<LANG>",
		"description": "<LANG> 컴파일러 대상 아키텍처(있는 경우)의 실행 파일 이름 끝에 사용할 접미사입니다."
	},
	"CMAKE_EXECUTE_PROCESS_COMMAND_ECHO": {
		"name": "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO",
		"description": "해당 변수가 STDERR, STDOUT 또는 NONE으로 설정되면 execute_process 호출의 명령이 stderr 또는 stdout에 출력되거나 전혀 출력되지 않습니다."
	},
	"CMAKE_EXE_LINKER_FLAGS": {
		"name": "CMAKE_EXE_LINKER_FLAGS",
		"description": "실행 파일을 만드는 데 사용할 링커 플래그입니다."
	},
	"CMAKE_EXE_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>",
		"description": "실행 파일을 연결할 때 사용할 플래그입니다."
	},
	"CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_EXE_LINKER_FLAGS_ 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_EXE_LINKER_FLAGS_INIT": {
		"name": "CMAKE_EXE_LINKER_FLAGS_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_EXE_LINKER_FLAGS 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_EXPORT_COMPILE_COMMANDS": {
		"name": "CMAKE_EXPORT_COMPILE_COMMANDS",
		"description": "생성하는 동안 컴파일 명령의 출력을 사용하도록/사용하지 않도록 설정합니다."
	},
	"CMAKE_EXPORT_FIND_PACKAGE_NAME": {
		"name": "CMAKE_EXPORT_FIND_PACKAGE_NAME",
		"description": "EXPORT_FIND_PACKAGE_NAME 값을 초기화합니다."
	},
	"CMAKE_EXPORT_NO_PACKAGE_REGISTRY": {
		"name": "CMAKE_EXPORT_NO_PACKAGE_REGISTRY",
		"description": "CMP0090이 NEW로 설정되지 않은 경우 내보내기 명령을 사용하지 않습니다."
	},
	"CMAKE_EXPORT_PACKAGE_REGISTRY": {
		"name": "CMAKE_EXPORT_PACKAGE_REGISTRY",
		"description": "CMP0090이 NEW로 설정된 경우 내보내기 명령을 사용합니다."
	},
	"CMAKE_EXTRA_GENERATOR": {
		"name": "CMAKE_EXTRA_GENERATOR",
		"description": "프로젝트를 빌드하는 데 사용되는 추가 생성기입니다. cmake-generators를 참조하세요."
	},
	"CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": {
		"name": "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES",
		"description": "공유 라이브러리에 대한 추가 접미사입니다."
	},
	"CMAKE_FIND_APPBUNDLE": {
		"name": "CMAKE_FIND_APPBUNDLE",
		"description": "이 변수는 find_* 명령이 macOS 애플리케이션 번들 및 unix-style 패키지 구성 요소 중에서 선택하는 방식에 영향을 줍니다."
	},
	"CMAKE_FIND_DEBUG_MODE": {
		"name": "CMAKE_FIND_DEBUG_MODE",
		"description": "다음 명령의 호출 정보를 표준 오류로 출력합니다."
	},
	"CMAKE_FIND_FRAMEWORK": {
		"name": "CMAKE_FIND_FRAMEWORK",
		"description": "이 변수는 find_* 명령이 macOS 프레임워크 및 unix-style 패키지 구성 요소 중에서 선택하는 방식에 영향을 줍니다."
	},
	"CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": {
		"name": "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX",
		"description": "<suffix>를 지정하여 일반적으로 검색되는 각 라이브러리 디렉터리 전에 lib<suffix> 디렉터리를 검색하도록 find_library 명령에 지시합니다."
	},
	"CMAKE_FIND_LIBRARY_PREFIXES": {
		"name": "CMAKE_FIND_LIBRARY_PREFIXES",
		"description": "라이브러리를 검색할 때 앞에 추가할 접두사입니다."
	},
	"CMAKE_FIND_LIBRARY_SUFFIXES": {
		"name": "CMAKE_FIND_LIBRARY_SUFFIXES",
		"description": "라이브러리를 검색할 때 추가할 접미사입니다."
	},
	"CMAKE_FIND_NO_INSTALL_PREFIX": {
		"name": "CMAKE_FIND_NO_INSTALL_PREFIX",
		"description": "CMAKE_SYSTEM_PREFIX_PATH에서 CMAKE_INSTALL_PREFIX 및 CMAKE_STAGING_PREFIX 변수의 값을 제외합니다. CMake는 일련의 종속 패키지를 빌드하고 해당 패키지를 공통 접두사를 설치할 수 있도록 CMAKE_SYSTEM_PREFIX_PATH에 이 프로젝트 대상 접두사를 추가합니다. 이 동작을 사용하지 않으려면 CMAKE_FIND_NO_INSTALL_PREFIX를 TRUE로 설정합니다."
	},
	"CMAKE_FIND_PACKAGE_NAME": {
		"name": "CMAKE_FIND_PACKAGE_NAME",
		"description": "호출자 지정 패키지 이름을 기록하기 위해 찾기 모듈을 로드하는 동안 find_package 명령으로 정의됩니다. 자세한 내용은 명령 설명서를 참조하세요."
	},
	"CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY",
		"description": "기본적으로 해당 변수는 설정되지 않습니다. CMAKE_FIND_USE_PACKAGE_REGISTRY 및 CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY를 모두 설정하지 않는 경우 NO_CMAKE_PACKAGE_REGISTRY 옵션이 제공되지 않으면 find_package()는 사용자 패키지 레지스트리를 사용합니다."
	},
	"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY",
		"description": "기본적으로 해당 변수는 설정되지 않습니다. CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY 및 CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY를 모두 설정하지 않는 경우 NO_CMAKE_SYSTEM_PACKAGE_REGISTRY 옵션이 제공되지 않으면 find_package()는 시스템 패키지 레지스트리를 사용합니다."
	},
	"CMAKE_FIND_PACKAGE_PREFER_CONFIG": {
		"name": "CMAKE_FIND_PACKAGE_PREFER_CONFIG",
		"description": "모드를 지정하지 않은 경우 \"모듈\" 모드 전에 \"구성\" 모드를 시도하도록 find_package에 알립니다."
	},
	"CMAKE_FIND_PACKAGE_REDIRECTS_DIR": {
		"name": "CMAKE_FIND_PACKAGE_REDIRECTS_DIR",
		"description": "이 읽기 전용 변수는 find_package 명령이 다른 곳에서 모듈 또는 구성 패키지 파일을 검색하기 전에 먼저 확인할 디렉터리를 지정합니다. 이 디렉터리의 구성 패키지 파일은 항상 다른 찾기 모듈 파일이나 구성 패키지 파일보다 우선적으로 발견됩니다."
	},
	"CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS": {
		"name": "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS",
		"description": "<PackageName>_DIR 값의 기호 링크를 확인하도록 find_package 호출에 알리려면 TRUE로 설정합니다."
	},
	"CMAKE_FIND_PACKAGE_SORT_DIRECTION": {
		"name": "CMAKE_FIND_PACKAGE_SORT_DIRECTION",
		"description": "CMAKE_FIND_PACKAGE_SORT_ORDER에서 사용되는 정렬 방향입니다. 다음 값 중 하나를 사용할 수 있습니다:"
	},
	"CMAKE_FIND_PACKAGE_SORT_ORDER": {
		"name": "CMAKE_FIND_PACKAGE_SORT_ORDER",
		"description": "find_package를 사용하여 검색된 패키지를 정렬하기 위한 기본 순서입니다. 다음 값 중 하나를 사용할 수 있습니다:"
	},
	"CMAKE_FIND_PACKAGE_TARGETS_GLOBAL": {
		"name": "CMAKE_FIND_PACKAGE_TARGETS_GLOBAL",
		"description": "TRUE로 설정하면 find_package에 의해 발견된 모든 IMPORTED 대상이 GLOBAL 범위로 승격됩니다."
	},
	"CMAKE_FIND_PACKAGE_WARN_NO_MODULE": {
		"name": "CMAKE_FIND_PACKAGE_WARN_NO_MODULE",
		"description": "명시적 모드 없이 호출되는 경우 준비하도록 find_package에 지시합니다."
	},
	"CMAKE_FIND_ROOT_PATH": {
		"name": "CMAKE_FIND_ROOT_PATH",
		"description": "파일 시스템에서 검색할 루트 경로의 세미콜론으로 구분된 목록입니다."
	},
	"CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE",
		"description": "이 변수는 CMAKE_FIND_ROOT_PATH 및 CMAKE_SYSROOT가 FIND_XXX에서 사용되는지 여부를 제어합니다."
	},
	"CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY",
		"description": "이 변수는 CMAKE_FIND_ROOT_PATH 및 CMAKE_SYSROOT가 FIND_XXX에서 사용되는지 여부를 제어합니다."
	},
	"CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE",
		"description": "이 변수는 CMAKE_FIND_ROOT_PATH 및 CMAKE_SYSROOT가 FIND_XXX에서 사용되는지 여부를 제어합니다."
	},
	"CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM",
		"description": "이 변수는 CMAKE_FIND_ROOT_PATH 및 CMAKE_SYSROOT가 FIND_XXX에서 사용되는지 여부를 제어합니다."
	},
	"CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH",
		"description": "Cmake 환경 변수가 제공하는 경로를 검색할지 여부에 대한 다음 명령의 기본 동작을 제어합니다."
	},
	"CMAKE_FIND_USE_CMAKE_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_PATH",
		"description": "Cmake 특정 캐시 변수가 제공하는 경로를 검색할지 여부에 대한 다음 명령의 기본 동작을 제어합니다."
	},
	"CMAKE_FIND_USE_CMAKE_SYSTEM_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH",
		"description": "플랫폼 특정 cmake 변수가 제공하는 경로를 검색할지 여부에 대한 다음 명령의 기본 동작을 제어합니다."
	},
	"CMAKE_FIND_USE_INSTALL_PREFIX": {
		"name": "CMAKE_FIND_USE_INSTALL_PREFIX",
		"description": "CMAKE_INSTALL_PREFIX 및 CMAKE_STAGING_PREFIX 변수에서 위치를 검색할지 여부에 대한 다음 명령의 기본 동작을 제어합니다."
	},
	"CMAKE_FIND_USE_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_USE_PACKAGE_REGISTRY",
		"description": "사용자 패키지 레지스트리가 제공하는 경로를 검색할지 여부에 대한 find_package 명령의 기본 동작을 제어합니다."
	},
	"CMAKE_FIND_USE_PACKAGE_ROOT_PATH": {
		"name": "CMAKE_FIND_USE_PACKAGE_ROOT_PATH",
		"description": "<PackageName>_ROOT 변수가 제공하는 경로를 검색할지 여부에 대한 다음 명령의 기본 동작을 제어합니다."
	},
	"CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH": {
		"name": "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH",
		"description": "표준 시스템 환경 변수가 제공하는 경로를 검색할지 여부에 대한 다음 명령의 기본 동작을 제어합니다."
	},
	"CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY",
		"description": "find_package 명령으로 시스템 패키지 레지스트리 검색을 제어합니다."
	},
	"CMAKE_FOLDER": {
		"name": "CMAKE_FOLDER",
		"description": "폴더 이름을 설정합니다. IDE에서 대상을 구성하는 데 사용합니다."
	},
	"CMAKE_Fortran_FORMAT": {
		"name": "CMAKE_Fortran_FORMAT",
		"description": "Fortran 소스 레이아웃을 나타내려면 FIXED 또는 FREE로 설정합니다."
	},
	"CMAKE_Fortran_MODDIR_DEFAULT": {
		"name": "CMAKE_Fortran_MODDIR_DEFAULT",
		"description": "Fortran 기본 모듈 출력 디렉터리입니다."
	},
	"CMAKE_Fortran_MODDIR_FLAG": {
		"name": "CMAKE_Fortran_MODDIR_FLAG",
		"description": "모듈 출력 디렉터리의 Fortran 플래그입니다."
	},
	"CMAKE_Fortran_MODOUT_FLAG": {
		"name": "CMAKE_Fortran_MODOUT_FLAG",
		"description": "모듈 출력을 사용하도록 설정하는 Fortran 플래그입니다."
	},
	"CMAKE_Fortran_MODULE_DIRECTORY": {
		"name": "CMAKE_Fortran_MODULE_DIRECTORY",
		"description": "Fortran 모듈 출력 디렉터리입니다."
	},
	"CMAKE_Fortran_PREPROCESS": {
		"name": "CMAKE_Fortran_PREPROCESS",
		"description": "대상에 대한 Fortran_PREPROCESS의 기본값입니다."
	},
	"CMAKE_FRAMEWORK": {
		"name": "CMAKE_FRAMEWORK",
		"description": "대상에 대한 FRAMEWORK의 기본값입니다."
	},
	"CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>": {
		"name": "CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
		"description": "다중 구성 생성기를 사용할 때 구성 <CONFIG>의 기본 프레임워크 파일 이름 후위입니다."
	},
	"CMAKE_FRAMEWORK_PATH": {
		"name": "CMAKE_FRAMEWORK_PATH",
		"description": "find_library, find_package, find_path 및 find_file 명령에서 사용되는 macOS 프레임워크의 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다."
	},
	"CMAKE_GENERATOR": {
		"name": "CMAKE_GENERATOR",
		"description": "프로젝트를 빌드하는 데 사용되는 생성기입니다. cmake-generators를 참조하세요."
	},
	"CMAKE_GENERATOR_INSTANCE": {
		"name": "CMAKE_GENERATOR_INSTANCE",
		"description": "사용자가 제공하는 생성기 관련 인스턴스 사양입니다."
	},
	"CMAKE_GENERATOR_PLATFORM": {
		"name": "CMAKE_GENERATOR_PLATFORM",
		"description": "사용자가 제공하는 생성기 관련 대상 플랫폼 사양입니다."
	},
	"CMAKE_GENERATOR_TOOLSET": {
		"name": "CMAKE_GENERATOR_TOOLSET",
		"description": "사용자가 제공하는 네이티브 빌드 시스템 도구 세트 사양입니다."
	},
	"CMAKE_GHS_NO_SOURCE_GROUP_FILE": {
		"name": "CMAKE_GHS_NO_SOURCE_GROUP_FILE",
		"description": "대상의 프로젝트 파일이 단일 파일 또는 여러 파일이어야 하는지를 제어하는 켜기/끄기 부울입니다. 자세한 내용은 GHS_NO_SOURCE_GROUP_FILE을 참조하세요."
	},
	"CMAKE_GLOBAL_AUTOGEN_TARGET": {
		"name": "CMAKE_GLOBAL_AUTOGEN_TARGET",
		"description": "전역 autogen 대상을 생성할 수 있게 하는 스위치입니다."
	},
	"CMAKE_GLOBAL_AUTOGEN_TARGET_NAME": {
		"name": "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME",
		"description": "전역 autogen 대상의 이름을 변경합니다."
	},
	"CMAKE_GLOBAL_AUTORCC_TARGET": {
		"name": "CMAKE_GLOBAL_AUTORCC_TARGET",
		"description": "전역 autorcc 대상을 생성할 수 있게 하는 스위치입니다."
	},
	"CMAKE_GLOBAL_AUTORCC_TARGET_NAME": {
		"name": "CMAKE_GLOBAL_AUTORCC_TARGET_NAME",
		"description": "전역 autorcc 대상의 이름을 변경합니다."
	},
	"CMAKE_GNUtoMS": {
		"name": "CMAKE_GNUtoMS",
		"description": "GNU 가져오기 라이브러리(.dll.a)를 MS 형식(.lib)으로 변환합니다."
	},
	"CMAKE_HIP_ARCHITECTURES": {
		"name": "CMAKE_HIP_ARCHITECTURES",
		"description": "디바이스 코드를 생성할 GPU 아키텍처 목록입니다. 아키텍처 이름은 CMAKE_HIP_PLATFORM에 따라 해석됩니다."
	},
	"CMAKE_HIP_COMPILE_FEATURES": {
		"name": "CMAKE_HIP_COMPILE_FEATURES",
		"description": "HIP 컴파일러에 알려진 기능 목록"
	},
	"CMAKE_HIP_EXTENSIONS": {
		"name": "CMAKE_HIP_EXTENSIONS",
		"description": "대상을 만들 때 설정된 경우 HIP_EXTENSIONS 대상 속성의 기본값입니다."
	},
	"CMAKE_HIP_PLATFORM": {
		"name": "CMAKE_HIP_PLATFORM",
		"description": "HIP 언어 원본을 컴파일할 GPU 플랫폼입니다."
	},
	"CMAKE_HIP_STANDARD": {
		"name": "CMAKE_HIP_STANDARD",
		"description": "대상을 만들 때 설정된 경우 HIP_STANDARD 대상 속성의 기본값입니다."
	},
	"CMAKE_HIP_STANDARD_REQUIRED": {
		"name": "CMAKE_HIP_STANDARD_REQUIRED",
		"description": "대상을 만들 때 설정된 경우 HIP_STANDARD_REQUIRED 대상 속성의 기본값입니다."
	},
	"CMAKE_HOME_DIRECTORY": {
		"name": "CMAKE_HOME_DIRECTORY",
		"description": "소스 트리 위쪽의 경로입니다. CMAKE_SOURCE_DIR과 동일합니다."
	},
	"CMAKE_HOST_APPLE": {
		"name": "CMAKE_HOST_APPLE",
		"description": "Apple macOS 운영 체제의 경우 True입니다."
	},
	"CMAKE_HOST_BSD": {
		"name": "CMAKE_HOST_BSD",
		"description": "호스트 시스템이 BSD인 경우 문자열 값으로 설정합니다. 이 값은 DragonFlyBSD, FreeBSD, OpenBSD 또는 NetBSD 중 하나일 수 있습니다."
	},
	"CMAKE_HOST_LINUX": {
		"name": "CMAKE_HOST_LINUX",
		"description": "호스트 시스템이 Linux인 경우 true로 설정합니다."
	},
	"CMAKE_HOST_SOLARIS": {
		"name": "CMAKE_HOST_SOLARIS",
		"description": "Oracle Solaris 운영 체제의 경우 True입니다."
	},
	"CMAKE_HOST_SYSTEM": {
		"name": "CMAKE_HOST_SYSTEM",
		"description": "OS CMake의 복합 이름이 실행되고 있습니다."
	},
	"CMAKE_HOST_SYSTEM_NAME": {
		"name": "CMAKE_HOST_SYSTEM_NAME",
		"description": "CMake가 실행 중인 OS 이름입니다."
	},
	"CMAKE_HOST_SYSTEM_PROCESSOR": {
		"name": "CMAKE_HOST_SYSTEM_PROCESSOR",
		"description": "CMake가 실행되고 있는 CPU의 이름입니다."
	},
	"CMAKE_HOST_SYSTEM_VERSION": {
		"name": "CMAKE_HOST_SYSTEM_VERSION",
		"description": "CMake가 실행되고 있는 OS 버전입니다."
	},
	"CMAKE_HOST_UNIX": {
		"name": "CMAKE_HOST_UNIX",
		"description": "UNIX 및 유사 UNIX 운영 체제의 경우 True입니다."
	},
	"CMAKE_HOST_WIN32": {
		"name": "CMAKE_HOST_WIN32",
		"description": "호스트 시스템에서 Windows 64비트 및 MSYS를 비롯한 Windows를 실행 중인 경우 True입니다."
	},
	"CMAKE_IGNORE_PATH": {
		"name": "CMAKE_IGNORE_PATH",
		"description": "다양한 find...() 명령에서 무시할 세미콜론으로 구분된 디렉터리 목록입니다."
	},
	"CMAKE_IGNORE_PREFIX_PATH": {
		"name": "CMAKE_IGNORE_PREFIX_PATH",
		"description": "find_program, find_library, find_file, find_path 명령으로 무시할 세미콜론으로 구분된 검색 접두사 목록입니다. 접두사도 find_package 명령의 구성 모드에서 무시됩니다(모듈 모드는 영향을 받지 않음). 이렇게 하지 않고 특정 디렉터리를 무시하려면 CMAKE_IGNORE_NONPREFIX_VAR을 참조하세요."
	},
	"CMAKE_IMPORT_LIBRARY_PREFIX": {
		"name": "CMAKE_IMPORT_LIBRARY_PREFIX",
		"description": "연결할 가져오기 라이브러리의 접두사입니다."
	},
	"CMAKE_IMPORT_LIBRARY_SUFFIX": {
		"name": "CMAKE_IMPORT_LIBRARY_SUFFIX",
		"description": "연결할 가져오기 라이브러리의 접미사입니다."
	},
	"CMAKE_INCLUDE_CURRENT_DIR": {
		"name": "CMAKE_INCLUDE_CURRENT_DIR",
		"description": "현재 소스 및 빌드 디렉터리를 포함 경로에 자동으로 추가합니다."
	},
	"CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": {
		"name": "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE",
		"description": "INTERFACE_INCLUDE_DIRECTORIES 대상 속성에 현재 소스 및 빌드 디렉터리를 자동으로 추가합니다."
	},
	"CMAKE_INCLUDE_DIRECTORIES_BEFORE": {
		"name": "CMAKE_INCLUDE_DIRECTORIES_BEFORE",
		"description": "include_directories에서 기본적으로 디렉터리 뒤 또는 앞에 추가할지 여부를 나타냅니다."
	},
	"CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": {
		"name": "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE",
		"description": "프로젝트 포함 디렉터리에 강제로 접두사를 추가할지 여부를 나타냅니다."
	},
	"CMAKE_INCLUDE_PATH": {
		"name": "CMAKE_INCLUDE_PATH",
		"description": "find_file 및 find_path 명령을 위한 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다. 기본적으로 비어 있으며 프로젝트에서 설정할 수 있습니다."
	},
	"CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": {
		"name": "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME",
		"description": "설치 명령에 사용되는 기본 구성 요소입니다."
	},
	"CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": {
		"name": "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
		"description": "install 및 file을 통해 파일을 설치하는 동안 암시적으로 생성된 디렉터리의 기본 권한입니다."
	},
	"CMAKE_INSTALL_MESSAGE": {
		"name": "CMAKE_INSTALL_MESSAGE",
		"description": "파일 명령을 사용하여 설치 명령에서 생성된 설치 스크립트 코드의 세부 정보 표시를 지정합니다. 새로 설치되거나 업데이트된 경로의 경우 설치에서 다음과 같은 줄이 인쇄될 수 있습니다:"
	},
	"CMAKE_INSTALL_NAME_DIR": {
		"name": "CMAKE_INSTALL_NAME_DIR",
		"description": "Apple 플랫폼에 설치된 대상의 디렉토리 이름입니다."
	},
	"CMAKE_INSTALL_PREFIX": {
		"name": "CMAKE_INSTALL_PREFIX",
		"description": "설치에 사용되는 설치 디렉터리입니다."
	},
	"CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": {
		"name": "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT",
		"description": "CMake는 CMAKE_INSTALL_PREFIX가 방금 기본값으로 초기화된 경우 이 변수를 TRUE 값으로 설정합니다. 일반적으로 새 빌드 트리 내의 CMake 첫 번째 실행이고 CMAKE_INSTALL_PREFIX 환경 변수는 CMake의 첫 번째 실행에서 설정되지 않습니다. 이는 프로젝트 코드에서 사용자 제공 값을 재정의하지 않고 기본값을 변경하는 데 사용할 수 있습니다."
	},
	"CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH": {
		"name": "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH",
		"description": "설치 중 도구 체인 정의 rpaths를 제거할지 여부의 기본값을 설정합니다."
	},
	"CMAKE_INSTALL_RPATH": {
		"name": "CMAKE_INSTALL_RPATH",
		"description": "설치된 대상에 사용할 rpath입니다."
	},
	"CMAKE_INSTALL_RPATH_USE_LINK_PATH": {
		"name": "CMAKE_INSTALL_RPATH_USE_LINK_PATH",
		"description": "링커 검색 및 설치된 rpath에 경로를 추가합니다."
	},
	"CMAKE_INTERNAL_PLATFORM_ABI": {
		"name": "CMAKE_INTERNAL_PLATFORM_ABI",
		"description": "변경할 내부 변수 제목입니다."
	},
	"CMAKE_INTERPROCEDURAL_OPTIMIZATION": {
		"name": "CMAKE_INTERPROCEDURAL_OPTIMIZATION",
		"description": "대상에 대한 INTERPROCEDURAL_OPTIMIZATION의 기본값입니다."
	},
	"CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>": {
		"name": "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
		"description": "대상에 대한 INTERPROCEDURAL_OPTIMIZATION_의 기본값입니다."
	},
	"CMAKE_IOS_INSTALL_COMBINED": {
		"name": "CMAKE_IOS_INSTALL_COMBINED",
		"description": "대상에 대한 IOS_INSTALL_COMBINED의 기본값입니다."
	},
	"CMAKE_ISPC_HEADER_DIRECTORY": {
		"name": "CMAKE_ISPC_HEADER_DIRECTORY",
		"description": "ISPC 생성된 헤더 출력 디렉터리입니다."
	},
	"CMAKE_ISPC_HEADER_SUFFIX": {
		"name": "CMAKE_ISPC_HEADER_SUFFIX",
		"description": "ISPC 생성된 헤더에 사용할 출력 접미사입니다."
	},
	"CMAKE_ISPC_INSTRUCTION_SETS": {
		"name": "CMAKE_ISPC_INSTRUCTION_SETS",
		"description": "대상 ISPC_INSTRUCTION_SETS 속성의 기본값입니다."
	},
	"CMAKE_JOB_POOLS": {
		"name": "CMAKE_JOB_POOLS",
		"description": "JOB_POOLS 전역 속성이 설정되지 않으면 이 변수의 값이 대신 사용됩니다. 자세한 내용은 JOB_POOLS를 참조하세요."
	},
	"CMAKE_JOB_POOL_COMPILE": {
		"name": "CMAKE_JOB_POOL_COMPILE",
		"description": "이 변수는 모든 대상에서 JOB_POOL_COMPILE 속성을 초기화하는 데 사용됩니다. 자세한 내용은 JOB_POOL_COMPILE을 참조하세요."
	},
	"CMAKE_JOB_POOL_LINK": {
		"name": "CMAKE_JOB_POOL_LINK",
		"description": "이 변수는 모든 대상에서 JOB_POOL_LINK 속성을 초기화하는 데 사용됩니다. 자세한 내용은 JOB_POOL_LINK를 참조하세요."
	},
	"CMAKE_JOB_POOL_PRECOMPILE_HEADER": {
		"name": "CMAKE_JOB_POOL_PRECOMPILE_HEADER",
		"description": "이 변수는 모든 대상에서 JOB_POOL_PRECOMPILE_HEADER 속성을 초기화하는 데 사용됩니다. 자세한 내용은 JOB_POOL_PRECOMPILE_HEADER를 참조하세요."
	},
	"CMAKE_KATE_FILES_MODE": {
		"name": "CMAKE_KATE_FILES_MODE",
		"description": "이 캐시 변수는 Kate 프로젝트 생성기에서 사용되며 프로젝트 파일의 파일 항목이 설정되는 모드를 제어합니다. CMake 생성기를 참조하세요."
	},
	"CMAKE_KATE_MAKE_ARGUMENTS": {
		"name": "CMAKE_KATE_MAKE_ARGUMENTS",
		"description": "이 캐시 변수는 이 프로젝트 생성기에서 사용됩니다. CMake 생성기를 참조하세요."
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE",
		"description": "Android에 대한 교차 컴파일 시 이 변수에는 도구 체인 binutils 머신 이름(예: gcc -dumpmachine)이 포함됩니다. binutils의 이름에는 일반적으로 <machine>- 접두사가 포함됩니다."
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX",
		"description": "Android에 대한 교차 컴파일 시 이 변수에는 도구 체인 GNU 컴파일러 및 해당 binutils 앞에 추가되는 절대 경로가 포함됩니다."
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX",
		"description": "Android에 대한 교차 컴파일 시 이 변수에는 도구 체인 GNU 컴파일러 및 해당 binutils의 호스트 플랫폼 접미사가 포함됩니다."
	},
	"CMAKE_<LANG>_ARCHIVE_APPEND": {
		"name": "CMAKE_<LANG>_ARCHIVE_APPEND",
		"description": "정적 보관에 추가하는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_ARCHIVE_CREATE": {
		"name": "CMAKE_<LANG>_ARCHIVE_CREATE",
		"description": "정적 보관을 만드는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_ARCHIVE_FINISH": {
		"name": "CMAKE_<LANG>_ARCHIVE_FINISH",
		"description": "기존 정적 보관을 완료하는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_BYTE_ORDER": {
		"name": "CMAKE_<LANG>_BYTE_ORDER",
		"description": "<LANG> 컴파일러 대상 아키텍처의 바이트 순서입니다(알려진 경우). 정의되어 있고 비어 있지 않은 경우 값은 다음 중 하나입니다."
	},
	"CMAKE_<LANG>_CLANG_TIDY": {
		"name": "CMAKE_<LANG>_CLANG_TIDY",
		"description": "<LANG>이 C, CXX, OBJC 또는 OBJCXX일 경우 <LANG>_CLANG_TIDY 대상 속성의 기본값입니다."
	},
	"CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR": {
		"name": "CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR",
		"description": "<LANG>이 C, CXX, OBJC 또는 OBJCXX인 경우 <LANG>_CLANG_TIDY_EXPORT_FIXES_DIR 대상 속성의 기본값입니다."
	},
	"CMAKE_<LANG>_COMPILER": {
		"name": "CMAKE_<LANG>_COMPILER",
		"description": "LANG용 컴파일러의 전체 경로입니다."
	},
	"CMAKE_<LANG>_COMPILER_ABI": {
		"name": "CMAKE_<LANG>_COMPILER_ABI",
		"description": "변경할 내부 변수 제목입니다."
	},
	"CMAKE_<LANG>_COMPILER_AR": {
		"name": "CMAKE_<LANG>_COMPILER_AR",
		"description": "컴파일러에 대한 적절한 --plugin 옵션을 추가하는 ar 주위의 래퍼입니다."
	},
	"CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID": {
		"name": "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID",
		"description": "변경할 내부 변수 제목입니다."
	},
	"CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN": {
		"name": "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN",
		"description": "지원되는 경우 교차 컴파일용 외부 도구 체인입니다."
	},
	"CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT": {
		"name": "CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT",
		"description": "컴파일러 프런트 엔드 변형의 식별 문자열입니다."
	},
	"CMAKE_<LANG>_COMPILER_ID": {
		"name": "CMAKE_<LANG>_COMPILER_ID",
		"description": "컴파일러 식별 문자열입니다."
	},
	"CMAKE_<LANG>_COMPILER_LAUNCHER": {
		"name": "CMAKE_<LANG>_COMPILER_LAUNCHER",
		"description": "<LANG>_COMPILER_LAUNCHER 대상 속성의 기본값입니다. 이 변수는 생성될 때 각 대상의 속성을 초기화하는 데 사용됩니다. <LANG>이 C, CXX, Fortran, HIP, ISPC, OBJC, OBJCXX 또는 CUDA인 경우에만 수행됩니다."
	},
	"CMAKE_<LANG>_COMPILER_LINKER": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER",
		"description": "LANG 링커의 전체 경로입니다."
	},
	"CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT",
		"description": "링커 프런트 엔드 변형의 식별 문자열입니다."
	},
	"CMAKE_<LANG>_COMPILER_LINKER_ID": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_ID",
		"description": "링커 식별 문자열입니다."
	},
	"CMAKE_<LANG>_COMPILER_LINKER_VERSION": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_VERSION",
		"description": "링커 버전 문자열입니다."
	},
	"CMAKE_<LANG>_COMPILER_LOADED": {
		"name": "CMAKE_<LANG>_COMPILER_LOADED",
		"description": "언어가 사용하도록 설정된 경우 true로 정의됩니다."
	},
	"CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND": {
		"name": "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND",
		"description": "컴파일러 사전 정의를 출력하는 명령입니다."
	},
	"CMAKE_<LANG>_COMPILER_RANLIB": {
		"name": "CMAKE_<LANG>_COMPILER_RANLIB",
		"description": "컴파일러에 대한 적절한 --plugin 옵션을 추가하는 ranlib 주위의 래퍼입니다."
	},
	"CMAKE_<LANG>_COMPILER_TARGET": {
		"name": "CMAKE_<LANG>_COMPILER_TARGET",
		"description": "지원되는 경우 교차 컴파일의 대상입니다."
	},
	"CMAKE_<LANG>_COMPILER_VERSION": {
		"name": "CMAKE_<LANG>_COMPILER_VERSION",
		"description": "컴파일러 버전 문자열입니다."
	},
	"CMAKE_<LANG>_COMPILER_VERSION_INTERNAL": {
		"name": "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL",
		"description": "변경할 내부 변수 제목입니다."
	},
	"CMAKE_<LANG>_COMPILE_OBJECT": {
		"name": "CMAKE_<LANG>_COMPILE_OBJECT",
		"description": "단일 개체 파일을 컴파일하는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_CPPCHECK": {
		"name": "CMAKE_<LANG>_CPPCHECK",
		"description": "<LANG>_CPPCHECK 대상 속성의 기본값입니다. 이 변수는 속성이 생성될 때 각 대상에서 속성을 초기화하는 데 사용됩니다. <LANG>이 C 또는 CXX인 경우에만 사용됩니다."
	},
	"CMAKE_<LANG>_CPPLINT": {
		"name": "CMAKE_<LANG>_CPPLINT",
		"description": "<LANG>_CPPLINT 대상 속성의 기본값입니다. 이 변수는 속성이 생성될 때 각 대상에서 속성을 초기화하는 데 사용됩니다. <LANG>이 C 또는 CXX인 경우에만 사용됩니다."
	},
	"CMAKE_<LANG>_CREATE_SHARED_LIBRARY": {
		"name": "CMAKE_<LANG>_CREATE_SHARED_LIBRARY",
		"description": "공유 라이브러리를 만드는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_CREATE_SHARED_MODULE": {
		"name": "CMAKE_<LANG>_CREATE_SHARED_MODULE",
		"description": "공유 모듈을 만드는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_CREATE_STATIC_LIBRARY": {
		"name": "CMAKE_<LANG>_CREATE_STATIC_LIBRARY",
		"description": "정적 라이브러리를 만드는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_EXTENSIONS": {
		"name": "CMAKE_<LANG>_EXTENSIONS",
		"description": "변형은 다음과 같습니다."
	},
	"CMAKE_<LANG>_EXTENSIONS_DEFAULT": {
		"name": "CMAKE_<LANG>_EXTENSIONS_DEFAULT",
		"description": "컴파일러의 기본 확장 모드입니다. CMAKE_<LANG>_EXTENSIONS가 설정되지 않은 경우 <LANG>_EXTENSIONS 대상 속성의 기본값으로 사용됩니다(CMP0128 참조)."
	},
	"CMAKE_<LANG>_FLAGS": {
		"name": "CMAKE_<LANG>_FLAGS",
		"description": "모든 구성에 대해 빌드할 때 사용되는 언어 <LANG> 언어 전체 플래그입니다. 이러한 플래그는 컴파일러의 모든 호출에 전달됩니다. 여기에는 컴파일을 구동하는 호출과 연결을 구동하는 호출이 포함됩니다."
	},
	"CMAKE_<LANG>_FLAGS_<CONFIG>": {
		"name": "CMAKE_<LANG>_FLAGS_<CONFIG>",
		"description": "<CONFIG> 구성용으로 빌드할 때 사용되는 언어 <LANG> 언어에 대한 언어 차원 플래그입니다. 이러한 플래그는 해당 구성에서 컴파일러의 모든 호출에 전달됩니다. 여기에는 컴파일을 구동하는 호출과 연결을 구동하는 호출이 포함됩니다."
	},
	"CMAKE_<LANG>_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_<CONFIG>_INIT",
		"description": "언어 <LANG>에 대한 빌드 트리가 처음 구성될 때 CMAKE_<LANG>_FLAGS_ 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_<LANG>_FLAGS_DEBUG": {
		"name": "CMAKE_<LANG>_FLAGS_DEBUG",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_ 변수의 Debug variant입니다."
	},
	"CMAKE_<LANG>_FLAGS_DEBUG_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_DEBUG_INIT",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 변수의 Debug variant입니다."
	},
	"CMAKE_<LANG>_FLAGS_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_INIT",
		"description": "빌드 트리가 언어 <LANG>에 대해 처음 구성될 때 CMAKE_<LANG>_FLAGS 캐시 항목을 초기화하는 데 사용되는 값입니다. 이 변수는 도구 체인 파일에 의해 설정됩니다. CMake는 환경 및 대상 플랫폼에 따라 값에 콘텐츠를 추가하거나 추가할 수 있습니다. 예를 들어, xxxFLAGS 환경 변수의 내용이 앞에 추가됩니다. 여기서 xxx는 언어에 따라 다르지만 <LANG>와 반드시 같지는 않습니다(예: CXX의 경우 CXXFLAGS, Fortran의 경우 FFLAGS 등). 이 값은 명령줄 문자열 조각입니다. 따라서 여러 옵션은 공백으로 구분해야 하며 공백이 있는 옵션은 따옴표로 묶어야 합니다."
	},
	"CMAKE_<LANG>_FLAGS_MINSIZEREL": {
		"name": "CMAKE_<LANG>_FLAGS_MINSIZEREL",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_ 변수의 MinSizeRel variant입니다."
	},
	"CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 변수의 MinSizeRel variant입니다."
	},
	"CMAKE_<LANG>_FLAGS_RELEASE": {
		"name": "CMAKE_<LANG>_FLAGS_RELEASE",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_ 변수의 Release variant입니다."
	},
	"CMAKE_<LANG>_FLAGS_RELEASE_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_RELEASE_INIT",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 변수의 Release variant입니다."
	},
	"CMAKE_<LANG>_FLAGS_RELWITHDEBINFO": {
		"name": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_ 변수의 RelWithDebInfo variant입니다."
	},
	"CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT",
		"description": "이 변수는 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 변수의 RelWithDebInfo variant입니다."
	},
	"CMAKE_<LANG>_HOST_COMPILER": {
		"name": "CMAKE_<LANG>_HOST_COMPILER",
		"description": "이 변수는 <LANG> CUDA 또는 HIP일 때 사용할 수 있습니다."
	},
	"CMAKE_<LANG>_IGNORE_EXTENSIONS": {
		"name": "CMAKE_<LANG>_IGNORE_EXTENSIONS",
		"description": "빌드에서 무시해야 하는 파일 확장명입니다."
	},
	"CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES",
		"description": "컴파일러가 헤더 파일을 암시적으로 검색하는 디렉터리입니다."
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES",
		"description": "언어 <LANG>에 대해 검색된 명시적 링커 검색 경로입니다."
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES",
		"description": "언어 <LANG>에 대해 검색된 명시적 링커 프레임워크 검색 경로입니다."
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES",
		"description": "언어 <LANG>에 대해 검색된 명시적 링크 라이브러리 및 플래그입니다."
	},
	"CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE": {
		"name": "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE",
		"description": "<LANG>_INCLUDE_WHAT_YOU_USE 대상 속성의 기본값입니다. 이 변수는 속성이 생성될 때 각 대상에서 속성을 초기화하는 데 사용됩니다. <LANG>이 C 또는 CXX인 경우에만 사용됩니다."
	},
	"CMAKE_<LANG>_LIBRARY_ARCHITECTURE": {
		"name": "CMAKE_<LANG>_LIBRARY_ARCHITECTURE",
		"description": "<LANG>에 대해 검색된 대상 아키텍처 라이브러리 디렉터리 이름입니다."
	},
	"CMAKE_<LANG>_LINKER_LAUNCHER": {
		"name": "CMAKE_<LANG>_LINKER_LAUNCHER",
		"description": "<LANG>_LINKER_LAUNCHER 대상 속성의 기본값입니다. 이 변수는 생성될 때 각 대상의 속성을 초기화하는 데 사용됩니다. <LANG>이 C, CXX, OBJC 또는 OBJCXX인 경우에만 수행됩니다."
	},
	"CMAKE_<LANG>_LINKER_PREFERENCE": {
		"name": "CMAKE_<LANG>_LINKER_PREFERENCE",
		"description": "변경할 내부 변수 제목입니다."
	},
	"CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES": {
		"name": "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES",
		"description": "변경할 내부 변수 제목입니다."
	},
	"CMAKE_<LANG>_LINKER_WRAPPER_FLAG": {
		"name": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG",
		"description": "옵션을 링커 도구에 전달하기 위한 컴파일러 드라이버 옵션 구문을 정의합니다. 이 구문은 링크 옵션의 접두사인 LINKER를 변환하는 데 사용됩니다(add_link_options 및 target_link_options 참조)."
	},
	"CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP": {
		"name": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP",
		"description": "이 변수는 CMAKE_<LANG>_LINKER_WRAPPER_FLAG 변수와 함께 사용하여 링크 옵션의 LINKER: 접두사 형식을 지정합니다(add_link_options 및 target_link_options 참조)."
	},
	"CMAKE_<LANG>_LINK_EXECUTABLE": {
		"name": "CMAKE_<LANG>_LINK_EXECUTABLE",
		"description": "실행 파일을 연결하는 규칙 변수입니다."
	},
	"CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>": {
		"name": "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>",
		"description": "이 변수는 LINK_GROUP 생성기 식이 사용되고 대상에 대한 링크 언어가 <LANG>인 경우 지정된 <FEATURE>에 대한 라이브러리 그룹을 링크하는 방법을 정의합니다. 이 변수가 영향을 미치려면 연결된 CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED 변수를 true로 설정해야 합니다."
	},
	"CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED",
		"description": "이 변수는 <FEATURE>이(가) 링크 언어 <LANG>에 대해 지원되는지 여부를 지정합니다. 이 변수가 true이면 <FEATURE>은(는) CMAKE_<LANG>_LINK_GROUP_USING_에 의해 정의되어야 하며 보다 일반적인 CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED 및 CMAKE_LINK_GROUP_USING_ 변수는 사용되지 않습니다."
	},
	"CMAKE_<LANG>_LINK_LIBRARY_<FEATURE>_ATTRIBUTES": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_<FEATURE>_ATTRIBUTES",
		"description": "이 변수는 링크 언어 <LANG>과 연결할 때 지정된 링크 라이브러리 <FEATURE>의 의미 체계를 정의합니다. 해당 변수가 동일한 <FEATURE>에 대해서도 정의되어 있는 경우 CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES보다 우선하지만, 그렇지 않으면 유사한 효과를 갖습니다. 자세한 내용은 CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES를 참조하세요."
	},
	"CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG",
		"description": "경로로 지정된 라이브러리를 해당 파일에 연결하는 데 사용할 언어별 플래그입니다."
	},
	"CMAKE_<LANG>_LINK_LIBRARY_FLAG": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_FLAG",
		"description": "라이브러리를 공유 라이브러리 또는 실행 파일에 연결하는 데 사용할 플래그입니다."
	},
	"CMAKE_<LANG>_LINK_LIBRARY_SUFFIX": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_SUFFIX",
		"description": "연결할 라이브러리의 언어별 접미사입니다."
	},
	"CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>",
		"description": "이 변수는 LINK_LIBRARY 생성기 식이 사용되고 대상에 대한 링크 언어가 <LANG>인 경우 지정된 <FEATURE>에 대한 라이브러리 또는 프레임워크를 링크하는 방법을 정의합니다. 이 변수가 영향을 미치려면 연결된 CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED 변수를 true로 설정해야 합니다."
	},
	"CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED",
		"description": "CMAKE_<LANG>_LINK_LIBRARY_USING_ 변수로 정의된 <FEATURE>가 링커 언어 <LANG>에 대해 지원되는 경우 TRUE로 설정합니다."
	},
	"CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG": {
		"name": "CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG",
		"description": "명령줄의 지정된 모든 라이브러리가 대상에 연결되도록 링커를 구성하는 데 사용할 링커 플래그입니다."
	},
	"CMAKE_<LANG>_OUTPUT_EXTENSION": {
		"name": "CMAKE_<LANG>_OUTPUT_EXTENSION",
		"description": "단일 파일의 컴파일 출력 확장입니다."
	},
	"CMAKE_<LANG>_PLATFORM_ID": {
		"name": "CMAKE_<LANG>_PLATFORM_ID",
		"description": "변경할 내부 변수 제목입니다."
	},
	"CMAKE_<LANG>_SIMULATE_ID": {
		"name": "CMAKE_<LANG>_SIMULATE_ID",
		"description": "\"시뮬레이트된\" 컴파일러의 식별 문자열입니다."
	},
	"CMAKE_<LANG>_SIMULATE_VERSION": {
		"name": "CMAKE_<LANG>_SIMULATE_VERSION",
		"description": "\"시뮬레이션된\" 컴파일러의 버전 문자열입니다."
	},
	"CMAKE_<LANG>_SIZEOF_DATA_PTR": {
		"name": "CMAKE_<LANG>_SIZEOF_DATA_PTR",
		"description": "언어 <LANG>의 데이터 포인터 형식 크기입니다."
	},
	"CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS": {
		"name": "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS",
		"description": "지정된 언어의 소스 파일 확장입니다."
	},
	"CMAKE_<LANG>_STANDARD": {
		"name": "CMAKE_<LANG>_STANDARD",
		"description": "변형은 다음과 같습니다."
	},
	"CMAKE_<LANG>_STANDARD_DEFAULT": {
		"name": "CMAKE_<LANG>_STANDARD_DEFAULT",
		"description": "언어 <LANG>에 대한 컴파일러의 기본 표준입니다. 컴파일러에 표준 수준의 개념이 없으면 비어 있습니다."
	},
	"CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES",
		"description": "<LANG> 컴파일러로 컴파일되는 모든 소스 파일에 사용할 포함 디렉터리입니다. 이 포함 디렉터리는 현재 플랫폼의 언어에 필요한 시스템 포함 디렉터리의 사양에 사용됩니다. 이 디렉터리는 항상 컴파일러에 전달되는 포함 경로의 끝에 나타납니다."
	},
	"CMAKE_<LANG>_STANDARD_LATEST": {
		"name": "CMAKE_<LANG>_STANDARD_LATEST",
		"description": "이 변수는 현재 컴파일러에서 지원하는 언어 <LANG> 표준의 최신 버전과 CMake에서 지원하는 최신 버전 사이의 최소값을 나타냅니다. 해당 이 값은 해당 <LANG>_STANDARD 대상 속성에서 지원되는 값 중 하나로 설정됩니다. 지원되는 언어 목록은 해당 속성의 설명서를 참조하세요."
	},
	"CMAKE_<LANG>_STANDARD_LIBRARIES": {
		"name": "CMAKE_<LANG>_STANDARD_LIBRARIES",
		"description": "언어 <LANG>용으로 연결된 모든 실행 파일 및 공유 라이브러리에 연결된 라이브러리입니다. 이 라이브러리는 현재 플랫폼의 언어에 필요한 시스템 라이브러리의 사양에 사용됩니다."
	},
	"CMAKE_<LANG>_STANDARD_REQUIRED": {
		"name": "CMAKE_<LANG>_STANDARD_REQUIRED",
		"description": "변형은 다음과 같습니다."
	},
	"CMAKE_<LANG>_USING_LINKER_MODE": {
		"name": "CMAKE_<LANG>_USING_LINKER_MODE",
		"description": "이것은 CMAKE_<LANG>_USING_LINKER_ 변수의 값을 해석하는 방법을 제어합니다. 지원되는 링커 모드 값은 다음과 같습니다."
	},
	"CMAKE_<LANG>_USING_LINKER_<TYPE>": {
		"name": "CMAKE_<LANG>_USING_LINKER_<TYPE>",
		"description": "이 변수는 CMAKE_LINKER_TYPE 변수 또는 LINKER_TYPE 대상 속성에 의해 제어되는 링크 단계에 대한 <TYPE> 링커를 지정하는 방법을 정의합니다. CMAKE_<LANG>_USING_LINKER_MODE 변수의 값에 따라 CMAKE_<LANG>_USING_LINKER_<TYPE> 링크 단계에 대한 컴파일러 플래그 또는 링커 도구에 직접 지정할 플래그를 보유할 수 있습니다."
	},
	"CMAKE_<LANG>_VISIBILITY_PRESET": {
		"name": "CMAKE_<LANG>_VISIBILITY_PRESET",
		"description": "대상이 생성될 때 <LANG>_VISIBILITY_PRESET 대상 속성의 기본값입니다."
	},
	"CMAKE_LIBRARY_ARCHITECTURE": {
		"name": "CMAKE_LIBRARY_ARCHITECTURE",
		"description": "검색된 경우 대상 아키텍처 라이브러리 디렉터리 이름입니다."
	},
	"CMAKE_LIBRARY_ARCHITECTURE_REGEX": {
		"name": "CMAKE_LIBRARY_ARCHITECTURE_REGEX",
		"description": "가능한 대상 아키텍처 라이브러리 디렉터리 이름과 일치하는 Regex입니다."
	},
	"CMAKE_LIBRARY_OUTPUT_DIRECTORY": {
		"name": "CMAKE_LIBRARY_OUTPUT_DIRECTORY",
		"description": "빌드될 때 모든 LIBRARY 대상 파일을 넣을 위치입니다."
	},
	"CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "특정 구성용으로 빌드될 때 모든 LIBRARY 대상 파일을 넣을 위치입니다."
	},
	"CMAKE_LIBRARY_PATH": {
		"name": "CMAKE_LIBRARY_PATH",
		"description": "find_library 명령을 위한 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다. 기본적으로 비어 있으며 프로젝트에서 설정할 수 있습니다."
	},
	"CMAKE_LIBRARY_PATH_FLAG": {
		"name": "CMAKE_LIBRARY_PATH_FLAG",
		"description": "컴파일러에 라이브러리 검색 경로를 추가하는 데 사용할 플래그입니다."
	},
	"CMAKE_LINKER_TYPE": {
		"name": "CMAKE_LINKER_TYPE",
		"description": "링크 단계에 사용할 링커를 지정합니다."
	},
	"CMAKE_LINK_DEF_FILE_FLAG": {
		"name": "CMAKE_LINK_DEF_FILE_FLAG",
		"description": "dll을 만들기 위한 .def 파일을 지정하는 데 사용할 링커 플래그입니다."
	},
	"CMAKE_LINK_DEPENDS_NO_SHARED": {
		"name": "CMAKE_LINK_DEPENDS_NO_SHARED",
		"description": "공유 라이브러리 파일에서 링크 종속성을 건너뛸지 여부를 나타냅니다."
	},
	"CMAKE_LINK_DEPENDS_USE_LINKER": {
		"name": "CMAKE_LINK_DEPENDS_USE_LINKER",
		"description": "Makefile 및 Ninja 생성기의 경우 링커 자체에 의해 생성된 링커 선택 항목에 대한 링크 종속성이 이제 제공됩니다. 이 변수를 FALSE 값으로 정의하면 이 기능을 비활성화할 수 있습니다."
	},
	"CMAKE_LINK_DIRECTORIES_BEFORE": {
		"name": "CMAKE_LINK_DIRECTORIES_BEFORE",
		"description": "link_directories에서 기본적으로 디렉터리 뒤 또는 앞에 추가할지 여부를 나타냅니다."
	},
	"CMAKE_LINK_GROUP_USING_<FEATURE>": {
		"name": "CMAKE_LINK_GROUP_USING_<FEATURE>",
		"description": "이 변수는 LINK_GROUP 생성기 식이 사용될 때 지정된 <FEATURE>에 대한 라이브러리 그룹을 연결하는 방법을 정의합니다. 이 변수가 영향을 미치려면 다음 조건이 모두 충족되어야 합니다."
	},
	"CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED",
		"description": "이 변수는 링크 언어와 상관없이 <FEATURE>가 지원되는지 여부를 지정합니다. 이 변수가 true이면 <FEATURE>은(는) CMAKE_LINK_GROUP_USING_에 의해 정의되어야 합니다."
	},
	"CMAKE_LINK_INTERFACE_LIBRARIES": {
		"name": "CMAKE_LINK_INTERFACE_LIBRARIES",
		"description": "대상에 대한 LINK_INTERFACE_LIBRARIES의 기본값입니다."
	},
	"CMAKE_LINK_LIBRARIES_ONLY_TARGETS": {
		"name": "CMAKE_LINK_LIBRARIES_ONLY_TARGETS",
		"description": "이 변수를 설정하여, 가져오지 않은 대상을 만들 때 해당 대상의 LINK_LIBRARIES_ONLY_TARGETS 속성을 초기화합니다. true로 설정하면 대상 이름일 수도 있는 target_link_libraries라는 이름의 모든 항목이 실제로 존재하는 대상의 이름인지 추가로 확인할 수 있습니다. 자세한 내용은 대상 속성 설명서를 참조하세요."
	},
	"CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES": {
		"name": "CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES",
		"description": "이 변수는 지정된 링크 라이브러리 <FEATURE> 동작을 정의합니다. <FEATURE>가 다른 기능과 상호 작용하는 방법, <FEATURE> 적용해야 하는 경우 및 CMake가 최종 링커 명령줄(예: 중복 제거)을 어셈블할 때 <FEATURE> 처리 방법의 측면을 지정합니다."
	},
	"CMAKE_LINK_LIBRARY_FILE_FLAG": {
		"name": "CMAKE_LINK_LIBRARY_FILE_FLAG",
		"description": "경로로 지정된 라이브러리를 해당 파일에 연결하는 데 사용할 플래그입니다."
	},
	"CMAKE_LINK_LIBRARY_FLAG": {
		"name": "CMAKE_LINK_LIBRARY_FLAG",
		"description": "라이브러리를 실행 파일에 연결하는 데 사용할 플래그입니다."
	},
	"CMAKE_LINK_LIBRARY_SUFFIX": {
		"name": "CMAKE_LINK_LIBRARY_SUFFIX",
		"description": "연결할 라이브러리의 접미사입니다."
	},
	"CMAKE_LINK_LIBRARY_USING_<FEATURE>": {
		"name": "CMAKE_LINK_LIBRARY_USING_<FEATURE>",
		"description": "이 변수는 LINK_LIBRARY 생성기 식이 사용될 때 지정된 <FEATURE>에 대한 라이브러리 또는 프레임워크를 링크하는 방법을 정의합니다. 이 변수가 영향을 미치려면 다음 조건이 모두 충족되어야 합니다."
	},
	"CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED",
		"description": "CMAKE_LINK_LIBRARY_USING_ 변수로 정의된 <FEATURE>이(가) 링커 언어에 관계없이 지원되는 경우 TRUE로 설정합니다."
	},
	"CMAKE_LINK_SEARCH_END_STATIC": {
		"name": "CMAKE_LINK_SEARCH_END_STATIC",
		"description": "정적 시스템 라이브러리가 사용되도록 링크 줄을 종료합니다."
	},
	"CMAKE_LINK_SEARCH_START_STATIC": {
		"name": "CMAKE_LINK_SEARCH_START_STATIC",
		"description": "링커가 기본적으로 정적 라이브러리를 검색한다고 가정합니다."
	},
	"CMAKE_LINK_WHAT_YOU_USE": {
		"name": "CMAKE_LINK_WHAT_YOU_USE",
		"description": "LINK_WHAT_YOU_USE 대상 속성의 기본값입니다. 이 변수는 속성이 생성될 때 각 대상에서 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_LINK_WHAT_YOU_USE_CHECK": {
		"name": "CMAKE_LINK_WHAT_YOU_USE_CHECK",
		"description": "라이브러리 사용량을 확인하기 위해 링크 단계 후에 실행되는 명령을 정의합니다. 이 검사는 현재 값이 ldd -u -r인 ELF 플랫폼에서만 정의됩니다."
	},
	"CMAKE_MACOSX_BUNDLE": {
		"name": "CMAKE_MACOSX_BUNDLE",
		"description": "대상에 대한 MACOSX_BUNDLE의 기본값입니다."
	},
	"CMAKE_MACOSX_RPATH": {
		"name": "CMAKE_MACOSX_RPATH",
		"description": "macOS 및 iOS에서 rpath를 사용할지 여부를 나타냅니다."
	},
	"CMAKE_MAJOR_VERSION": {
		"name": "CMAKE_MAJOR_VERSION",
		"description": "CMAKE_VERSION 변수의 첫 번째 버전 번호 구성 요소입니다."
	},
	"CMAKE_MAKE_PROGRAM": {
		"name": "CMAKE_MAKE_PROGRAM",
		"description": "네이티브 빌드 시스템을 시작할 수 있는 도구입니다. 이 값은 실행 파일의 전체 경로이거나, PATH에 포함되어야 하는 경우에는 단순히 도구 이름일 수 있습니다."
	},
	"CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>": {
		"name": "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>",
		"description": "대상에 대한 MAP_IMPORTED_CONFIG_의 기본값입니다."
	},
	"CMAKE_MATCH_COUNT": {
		"name": "CMAKE_MATCH_COUNT",
		"description": "마지막 정규식과 일치하는 항목 수입니다."
	},
	"CMAKE_MATCH_<n>": {
		"name": "CMAKE_MATCH_<n>",
		"description": "그룹 0~007E;9의 경우 마지막 정규식으로 일치된 캡처 그룹 <n>입니다. 그룹 0은 전체 일치입니다. 그룹 1~007E;9는 () 구문으로 캡처된 하위 식입니다."
	},
	"CMAKE_MAXIMUM_RECURSION_DEPTH": {
		"name": "CMAKE_MAXIMUM_RECURSION_DEPTH",
		"description": "CMake 스크립트의 최대 재귀 깊이입니다. 해당 깊이는 -DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>가 포함된 명령줄에서 설정하거나 큰 재귀 깊이가 필요한 프로젝트를 통해 CMakeLists.txt 내에서 설정해야 합니다. 해당 변수를 설정하는 프로젝트는 사용자에게 변수를 재정의하는 방법을 제공해야 합니다. 예:"
	},
	"CMAKE_MESSAGE_CONTEXT": {
		"name": "CMAKE_MESSAGE_CONTEXT",
		"description": "Cmake --log-context 명령줄 옵션 또는 CMAKE_MESSAGE_CONTEXT_SHOW 변수에서 사용되는 경우 메시지 명령은 CMAKE_MESSAGE_CONTEXT 목록을 대괄호로 묶은 점으로 구분된 문자열로 변환하고 로그 수준 NOTICE 이하의 메시지에 대한 각 줄 앞에 해당 문자열을 추가합니다."
	},
	"CMAKE_MESSAGE_CONTEXT_SHOW": {
		"name": "CMAKE_MESSAGE_CONTEXT_SHOW",
		"description": "이 변수를 true로 설정하면 각 줄이 메시지 명령으로 기록된 컨텍스트가 표시됩니다(컨텍스트 자체를 지정하는 방법은 CMAKE_MESSAGE_CONTEXT 참조)."
	},
	"CMAKE_MESSAGE_INDENT": {
		"name": "CMAKE_MESSAGE_INDENT",
		"description": "메시지 명령은 이 목록의 문자열을 조인하며 NOTICE 로그 수준 이하의 경우 메시지의 각 줄에 결과 스트링을 앞에 추가합니다."
	},
	"CMAKE_MESSAGE_LOG_LEVEL": {
		"name": "CMAKE_MESSAGE_LOG_LEVEL",
		"description": "설정하면 이 변수는 메시지 명령에 사용되는 로깅 수준을 지정합니다. 유효한 값은 cmake 프로그램의 --log-level <cmake --log-level> 명령줄 옵션의 값과 동일합니다. 이 변수를 설정하고 --log-level <cmake --log-level> 명령줄 옵션을 지정하면 명령줄 옵션이 우선 적용됩니다."
	},
	"CMAKE_MFC_FLAG": {
		"name": "CMAKE_MFC_FLAG",
		"description": "실행 파일 또는 dll에 MFC 라이브러리를 사용합니다."
	},
	"CMAKE_MINIMUM_REQUIRED_VERSION": {
		"name": "CMAKE_MINIMUM_REQUIRED_VERSION",
		"description": "현재 변수 범위 또는 부모 변수 범위에서 cmake_minimum_required 명령에 대한 가장 최근 호출에 제공된 CMake의 <min> 버전입니다."
	},
	"CMAKE_MINOR_VERSION": {
		"name": "CMAKE_MINOR_VERSION",
		"description": "CMAKE_VERSION 변수의 두 번째 버전 번호 구성 요소입니다."
	},
	"CMAKE_MODULE_LINKER_FLAGS": {
		"name": "CMAKE_MODULE_LINKER_FLAGS",
		"description": "모듈을 만드는 데 사용할 링커 플래그입니다."
	},
	"CMAKE_MODULE_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>",
		"description": "모듈을 연결할 때 사용할 플래그입니다."
	},
	"CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_MODULE_LINKER_FLAGS_ 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_MODULE_LINKER_FLAGS_INIT": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_MODULE_LINKER_FLAGS 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_MODULE_PATH": {
		"name": "CMAKE_MODULE_PATH",
		"description": "CMake와 함께 제공되는 기본 모듈을 확인하기 전에 include 또는 find_package 명령으로 로드되는 CMake 모듈의 검색 경로를 지정하는 슬래시로 표현되고 세미콜론으로 구분된 디렉터리 목록입니다. 기본적으로 비어 있습니다. 프로젝트에서 설정할 수 있습니다."
	},
	"CMAKE_MSVCIDE_RUN_PATH": {
		"name": "CMAKE_MSVCIDE_RUN_PATH",
		"description": "Visual Studio 12 2013 이상 생성기를 사용할 때 add_custom_command 또는 add_custom_target을 실행할 때 사용해야 하는 추가 PATH 위치입니다. 이 설정을 사용하면 IDE 환경에서 인식되지 않는 명령을 실행하고 dll을 사용할 수 있습니다."
	},
	"CMAKE_MSVC_DEBUG_INFORMATION_FORMAT": {
		"name": "CMAKE_MSVC_DEBUG_INFORMATION_FORMAT",
		"description": "MSVC ABI를 대상으로 하는 MSVC 디버그 정보 형식을 선택합니다. 이 변수는 생성되는 모든 대상에서 MSVC_DEBUG_INFORMATION_FORMAT 속성을 초기화하는 데 사용됩니다. 또한 try_compile 명령을 호출하여 테스트 프로젝트로 전파됩니다."
	},
	"CMAKE_MSVC_RUNTIME_LIBRARY": {
		"name": "CMAKE_MSVC_RUNTIME_LIBRARY",
		"description": "MSVC ABI를 대상으로 하는 컴파일러에서 사용할 MSVC 런타임 라이브러리를 선택합니다. 해당 변수는 생성 시 모든 대상에서 MSVC_RUNTIME_LIBRARY 속성을 초기화하는 데 사용됩니다. 또한 try_compile 명령 호출을 통해 테스트 프로젝트로 전파됩니다."
	},
	"CMAKE_NETRC": {
		"name": "CMAKE_NETRC",
		"description": "이 변수는 파일 및 파일 명령에 대한 NETRC 옵션을 초기화하는 데 사용됩니다. 추가 정보는 해당 명령을 참조하세요."
	},
	"CMAKE_NETRC_FILE": {
		"name": "CMAKE_NETRC_FILE",
		"description": "이 변수는 파일 및 파일 명령에 대한 NETRC_FILE 옵션을 초기화하는 데 사용됩니다. 추가 정보는 해당 명령을 참조하세요."
	},
	"CMAKE_NINJA_OUTPUT_PATH_PREFIX": {
		"name": "CMAKE_NINJA_OUTPUT_PATH_PREFIX",
		"description": "build.ninja의 모든 출력 경로에 접두사 추가를 Ninja 생성기에 지시합니다. 누락된 경우 후행 슬래시가 접두사에 추가됩니다."
	},
	"CMAKE_NOT_USING_CONFIG_FLAGS": {
		"name": "CMAKE_NOT_USING_CONFIG_FLAGS",
		"description": "true인 경우 _BUILD_TYPE 플래그를 건너뜁니다."
	},
	"CMAKE_NO_BUILTIN_CHRPATH": {
		"name": "CMAKE_NO_BUILTIN_CHRPATH",
		"description": "설치 시 런타임 라이브러리 검색 경로를 수정하기 위해 builtin 이진 편집기를 사용하지 마세요."
	},
	"CMAKE_NO_SYSTEM_FROM_IMPORTED": {
		"name": "CMAKE_NO_SYSTEM_FROM_IMPORTED",
		"description": "대상에 대한 NO_SYSTEM_FROM_IMPORTED의 기본값입니다."
	},
	"CMAKE_OBJCXX_EXTENSIONS": {
		"name": "CMAKE_OBJCXX_EXTENSIONS",
		"description": "대상이 생성될 때 설정된 경우 OBJCXX_EXTENSIONS 대상 속성의 기본값입니다."
	},
	"CMAKE_OBJCXX_STANDARD": {
		"name": "CMAKE_OBJCXX_STANDARD",
		"description": "대상이 생성될 때 설정된 경우 OBJCXX_STANDARD 대상 속성의 기본값입니다."
	},
	"CMAKE_OBJCXX_STANDARD_REQUIRED": {
		"name": "CMAKE_OBJCXX_STANDARD_REQUIRED",
		"description": "대상이 생성될 때 설정된 경우 OBJCXX_STANDARD_REQUIRED 대상 속성의 기본값입니다."
	},
	"CMAKE_OBJC_EXTENSIONS": {
		"name": "CMAKE_OBJC_EXTENSIONS",
		"description": "대상이 생성될 때 설정된 경우 OBJC_EXTENSIONS 대상 속성의 기본값입니다."
	},
	"CMAKE_OBJC_STANDARD": {
		"name": "CMAKE_OBJC_STANDARD",
		"description": "대상이 생성될 때 설정된 경우 OBJC_STANDARD 대상 속성의 기본값입니다."
	},
	"CMAKE_OBJC_STANDARD_REQUIRED": {
		"name": "CMAKE_OBJC_STANDARD_REQUIRED",
		"description": "대상이 생성될 때 설정된 경우 OBJC_STANDARD_REQUIRED 대상 속성의 기본값입니다."
	},
	"CMAKE_OBJECT_PATH_MAX": {
		"name": "CMAKE_OBJECT_PATH_MAX",
		"description": "네이티브 빌드 도구에서 허용되는 최대 개체 파일 전체 경로 길이입니다."
	},
	"CMAKE_OPTIMIZE_DEPENDENCIES": {
		"name": "CMAKE_OPTIMIZE_DEPENDENCIES",
		"description": "OPTIMIZE_DEPENDENCIES 대상 속성을 초기화합니다."
	},
	"CMAKE_OSX_ARCHITECTURES": {
		"name": "CMAKE_OSX_ARCHITECTURES",
		"description": "macOS 및 iOS의 대상별 아키텍처입니다."
	},
	"CMAKE_OSX_DEPLOYMENT_TARGET": {
		"name": "CMAKE_OSX_DEPLOYMENT_TARGET",
		"description": "대상 이진 파일을 배포할 대상 플랫폼(예: macOS 또는 iOS)의 최소 버전을 지정합니다. CMake는 -mmacosx-version-min 플래그 또는 각 대상 플랫폼 플래그에 이 변수 값을 사용합니다. 복수의 macOS SDK를 제공한 이전 Xcode 버전의 경우 이 변수를 사용하여 CMAKE_OSX_SYSROOT가 설정되지 않은 경우 SDK를 선택할 수도 있습니다."
	},
	"CMAKE_OSX_SYSROOT": {
		"name": "CMAKE_OSX_SYSROOT",
		"description": "사용할 macOS 플랫폼 SDK의 위치 또는 이름을 지정합니다. CMake는 이 값을 사용하여 -isysroot 플래그나 유사 플래그의 값을 계산하고 find_* 명령으로 SDK에서 파일을 찾도록 지원합니다."
	},
	"CMAKE_PARENT_LIST_FILE": {
		"name": "CMAKE_PARENT_LIST_FILE",
		"description": "현재 항목을 포함한 CMake 파일의 전체 경로입니다."
	},
	"CMAKE_PATCH_VERSION": {
		"name": "CMAKE_PATCH_VERSION",
		"description": "CMAKE_VERSION 변수의 세 번째 버전 번호 구성 요소입니다."
	},
	"CMAKE_PCH_INSTANTIATE_TEMPLATES": {
		"name": "CMAKE_PCH_INSTANTIATE_TEMPLATES",
		"description": "이 변수는 대상이 생성될 때 대상의 PCH_INSTANTIATE_TEMPLATES 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_PCH_WARN_INVALID": {
		"name": "CMAKE_PCH_WARN_INVALID",
		"description": "이 변수는 대상이 생성될 때 대상의 PCH_WARN_INVALID 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_PDB_OUTPUT_DIRECTORY": {
		"name": "CMAKE_PDB_OUTPUT_DIRECTORY",
		"description": "실행 파일 및 공유 라이브러리 대상의 링커에서 생성된 MS 디버그 기호 .pdb 파일의 출력 디렉터리입니다."
	},
	"CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "실행 파일 및 공유 라이브러리 대상의 링커에서 생성된 MS 디버그 기호 .pdb 파일의 구성별 출력 디렉터리입니다."
	},
	"CMAKE_PLATFORM_NO_VERSIONED_SONAME": {
		"name": "CMAKE_PLATFORM_NO_VERSIONED_SONAME",
		"description": "이 변수는 VERSION 및 SOVERSION 대상 속성이 공유 라이브러리에 사용되어야 하는지 여부를 전역적으로 제어하는 데 사용됩니다. true로 설정하면 각 공유 라이브러리 대상에 버전 정보를 추가할 수 없습니다."
	},
	"CMAKE_POLICY_DEFAULT_CMP<NNNN>": {
		"name": "CMAKE_POLICY_DEFAULT_CMP<NNNN>",
		"description": "별도로 설정되지 않는 경우 CMake Policy CMP<NNNN>의 기본값입니다."
	},
	"CMAKE_POLICY_WARNING_CMP<NNNN>": {
		"name": "CMAKE_POLICY_WARNING_CMP<NNNN>",
		"description": "CMake 정책 CMP<NNNN>이 cmake_policy에 의해 명시적으로 설정되지 않았거나 cmake_minimum_required에 의해 암시적으로 설정되지 않은 경우 명시적으로 경고를 사용하거나 사용하지 않습니다. 이는 기본적으로 경고하지 않는 정책에만 의미가 있습니다."
	},
	"CMAKE_POSITION_INDEPENDENT_CODE": {
		"name": "CMAKE_POSITION_INDEPENDENT_CODE",
		"description": "대상에 대한 POSITION_INDEPENDENT_CODE의 기본값입니다."
	},
	"CMAKE_PREFIX_PATH": {
		"name": "CMAKE_PREFIX_PATH",
		"description": "find_package, find_program, find_library, find_file 및 find_path 명령으로 검색할 설치 접두사를 지정하는 디렉터리의 세미콜론으로 구분된 목록입니다. 각 명령은 자세 설명서에 지정된 대로 적절한 하위 디렉터리(예: bin, lib 및 include)를 추가합니다."
	},
	"CMAKE_PROGRAM_PATH": {
		"name": "CMAKE_PROGRAM_PATH",
		"description": "find_program 명령을 위한 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다. 기본적으로 비어 있으며 프로젝트에서 설정할 수 있습니다."
	},
	"CMAKE_PROJECT_DESCRIPTION": {
		"name": "CMAKE_PROJECT_DESCRIPTION",
		"description": "최상위 프로젝트에 대한 설명입니다."
	},
	"CMAKE_PROJECT_HOMEPAGE_URL": {
		"name": "CMAKE_PROJECT_HOMEPAGE_URL",
		"description": "최상위 프로젝트의 홈페이지 URL입니다."
	},
	"CMAKE_PROJECT_INCLUDE": {
		"name": "CMAKE_PROJECT_INCLUDE",
		"description": "모든 프로젝트 명령 호출의 마지막 단계로 포함할 CMake 언어 파일입니다. 이는 원본을 수정하지 않고 프로젝트 빌드에 사용자 지정 코드를 삽입하기 위한 것입니다. 프로젝트 호출 중에 잠재적으로 포함될 수 있는 파일에 대한 자세한 내용은 코드 삽입을 참조하세요."
	},
	"CMAKE_PROJECT_INCLUDE_BEFORE": {
		"name": "CMAKE_PROJECT_INCLUDE_BEFORE",
		"description": "모든 프로젝트 명령 호출의 첫 번째 단계로 포함할 CMake 언어 파일입니다. 이는 원본을 수정하지 않고 프로젝트 빌드에 사용자 지정 코드를 삽입하기 위한 것입니다. 프로젝트 호출 중에 잠재적으로 포함될 수 있는 파일에 대한 자세한 내용은 코드 삽입을 참조하세요."
	},
	"CMAKE_PROJECT_NAME": {
		"name": "CMAKE_PROJECT_NAME",
		"description": "최상위 프로젝트의 이름입니다."
	},
	"CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE": {
		"name": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE",
		"description": "프로젝트 이름으로 <PROJECT-NAME>을 지정하는 프로젝트 명령 호출의 마지막 단계로 포함할 CMake 언어 파일입니다. 이는 원본을 수정하지 않고 프로젝트 빌드에 사용자 지정 코드를 삽입하기 위한 것입니다. 프로젝트 호출 중에 잠재적으로 포함될 수 있는 파일에 대한 자세한 내용은 코드 삽입을 참조하세요."
	},
	"CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE": {
		"name": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE",
		"description": "프로젝트 이름으로 <PROJECT-NAME>을 지정하는 프로젝트 명령 호출의 첫 번째 단계로 포함할 CMake 언어 파일입니다. 이는 원본을 수정하지 않고 프로젝트 빌드에 사용자 지정 코드를 삽입하기 위한 것입니다. 프로젝트 호출 중에 잠재적으로 포함될 수 있는 파일에 대한 자세한 내용은 코드 삽입을 참조하세요."
	},
	"CMAKE_PROJECT_TOP_LEVEL_INCLUDES": {
		"name": "CMAKE_PROJECT_TOP_LEVEL_INCLUDES",
		"description": "첫 번째 프로젝트 호출의 일부로 포함할 CMake 언어 파일의 세미콜론으로 구분된 목록입니다. 파일은 도구 체인 파일을 읽고(지정된 경우) 플랫폼 변수가 설정된 직후에 포함되지만 언어가 활성화되기 전에 포함됩니다. 따라서 CMAKE_<LANG>_COMPILER과(와) 같은 언어별 변수가 설정되지 않을 수 있습니다. 프로젝트 호출 중에 잠재적으로 포함될 수 있는 파일에 대한 자세한 내용은 코드 삽입을 참조하세요."
	},
	"CMAKE_PROJECT_VERSION": {
		"name": "CMAKE_PROJECT_VERSION",
		"description": "최상위 프로젝트의 버전입니다."
	},
	"CMAKE_PROJECT_VERSION_MAJOR": {
		"name": "CMAKE_PROJECT_VERSION_MAJOR",
		"description": "최상위 프로젝트의 주 버전입니다."
	},
	"CMAKE_PROJECT_VERSION_MINOR": {
		"name": "CMAKE_PROJECT_VERSION_MINOR",
		"description": "최상위 프로젝트의 부 버전입니다."
	},
	"CMAKE_PROJECT_VERSION_PATCH": {
		"name": "CMAKE_PROJECT_VERSION_PATCH",
		"description": "최상위 프로젝트의 패치 버전입니다."
	},
	"CMAKE_PROJECT_VERSION_TWEAK": {
		"name": "CMAKE_PROJECT_VERSION_TWEAK",
		"description": "최상위 프로젝트의 조정 버전입니다."
	},
	"CMAKE_RANLIB": {
		"name": "CMAKE_RANLIB",
		"description": "정적 라이브러리의 무작위 지정 도구 이름입니다."
	},
	"CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>": {
		"name": "CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>",
		"description": "find_package 호출을 만들기 위한 변수가 필요합니다."
	},
	"CMAKE_ROOT": {
		"name": "CMAKE_ROOT",
		"description": "cmake를 실행할 설치 디렉터리입니다."
	},
	"CMAKE_RULE_MESSAGES": {
		"name": "CMAKE_RULE_MESSAGES",
		"description": "각 만들기 규칙의 메시지를 보고할지 여부를 지정합니다."
	},
	"CMAKE_RUNTIME_OUTPUT_DIRECTORY": {
		"name": "CMAKE_RUNTIME_OUTPUT_DIRECTORY",
		"description": "빌드될 때 모든 RUNTIME 대상 파일을 넣을 위치입니다."
	},
	"CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "특정 구성용으로 빌드될 때 모든 RUNTIME 대상 파일을 넣을 위치입니다."
	},
	"CMAKE_SCRIPT_MODE_FILE": {
		"name": "CMAKE_SCRIPT_MODE_FILE",
		"description": "현재 처리 중인 cmake -P 스크립트 파일의 전체 경로입니다."
	},
	"CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS": {
		"name": "CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS",
		"description": "공유 라이브러리에서 가져오기 파일을 생성할지 여부를 지정합니다."
	},
	"CMAKE_SHARED_LIBRARY_PREFIX": {
		"name": "CMAKE_SHARED_LIBRARY_PREFIX",
		"description": "연결할 공유 라이브러리의 접두사입니다."
	},
	"CMAKE_SHARED_LIBRARY_SUFFIX": {
		"name": "CMAKE_SHARED_LIBRARY_SUFFIX",
		"description": "연결할 공유 라이브러리의 접미사입니다."
	},
	"CMAKE_SHARED_LINKER_FLAGS": {
		"name": "CMAKE_SHARED_LINKER_FLAGS",
		"description": "공유 라이브러리를 만드는 데 사용할 링커 플래그입니다."
	},
	"CMAKE_SHARED_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>",
		"description": "공유 라이브러리를 연결할 때 사용할 플래그입니다."
	},
	"CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_SHARED_LINKER_FLAGS_ 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_SHARED_LINKER_FLAGS_INIT": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_SHARED_LINKER_FLAGS 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_SHARED_MODULE_PREFIX": {
		"name": "CMAKE_SHARED_MODULE_PREFIX",
		"description": "연결할 로그 가능 모듈의 접두사입니다."
	},
	"CMAKE_SHARED_MODULE_SUFFIX": {
		"name": "CMAKE_SHARED_MODULE_SUFFIX",
		"description": "연결할 공유 라이브러리의 접미사입니다."
	},
	"CMAKE_SIZEOF_VOID_P": {
		"name": "CMAKE_SIZEOF_VOID_P",
		"description": "void 포인터 크기입니다."
	},
	"CMAKE_SKIP_BUILD_RPATH": {
		"name": "CMAKE_SKIP_BUILD_RPATH",
		"description": "빌드 트리에 RPATH를 포함하지 마세요."
	},
	"CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": {
		"name": "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY",
		"description": "설치 대상이 모든 대상에 종속되도록 설정하지 마세요."
	},
	"CMAKE_SKIP_INSTALL_RPATH": {
		"name": "CMAKE_SKIP_INSTALL_RPATH",
		"description": "설치 트리에 RPATH를 포함하지 마세요."
	},
	"CMAKE_SKIP_INSTALL_RULES": {
		"name": "CMAKE_SKIP_INSTALL_RULES",
		"description": "설치 규칙 생성을 사용하지 않도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_SKIP_RPATH": {
		"name": "CMAKE_SKIP_RPATH",
		"description": "true인 경우 런타임 경로 정보를 추가하지 마세요."
	},
	"CMAKE_SKIP_TEST_ALL_DEPENDENCY": {
		"name": "CMAKE_SKIP_TEST_ALL_DEPENDENCY",
		"description": "테스트 대상이 모든 대상에 종속되는지 여부를 제어합니다."
	},
	"CMAKE_SOURCE_DIR": {
		"name": "CMAKE_SOURCE_DIR",
		"description": "최상위 소스 트리의 경로입니다."
	},
	"CMAKE_STAGING_PREFIX": {
		"name": "CMAKE_STAGING_PREFIX",
		"description": "이 변수는 교차 컴파일 시 설치할 경로로 설정할 수 있습니다. CMAKE_SYSROOT의 경로가 읽기 전용인 경우 이 변수가 유용합니다. 이외의 경우에는 원래대로 유지해야 합니다."
	},
	"CMAKE_STATIC_LIBRARY_PREFIX": {
		"name": "CMAKE_STATIC_LIBRARY_PREFIX",
		"description": "연결할 정적 라이브러리의 접두사입니다."
	},
	"CMAKE_STATIC_LIBRARY_SUFFIX": {
		"name": "CMAKE_STATIC_LIBRARY_SUFFIX",
		"description": "연결할 정적 라이브러리의 접미사입니다."
	},
	"CMAKE_STATIC_LINKER_FLAGS": {
		"name": "CMAKE_STATIC_LINKER_FLAGS",
		"description": "정적 라이브러리를 만드는 데 사용되는 플래그이며, 정적 라이브러리를 만들 때 아카이버에 전달됩니다."
	},
	"CMAKE_STATIC_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>",
		"description": "정적 라이브러리를 만드는 데 사용되는 플래그이며, <CONFIG> 구성에서 정적 라이브러리를 만들 때 아카이버에 전달됩니다."
	},
	"CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_STATIC_LINKER_FLAGS_ 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_STATIC_LINKER_FLAGS_INIT": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_INIT",
		"description": "빌드 트리가 처음 구성될 때 CMAKE_STATIC_LINKER_FLAGS 캐시 항목을 초기화하는 데 사용된 값입니다. 이 변수는 도구 체인 파일을 통해 설정할 수 있습니다. CMake는 환경 및 대상 플랫폼에 따라 값의 앞 또는 뒤에 콘텐츠를 추가합니다."
	},
	"CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": {
		"name": "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS",
		"description": "이 변수에는 환경 변수 목록이 var=value 구문을 포함하는 토큰 목록으로 포함됩니다."
	},
	"CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": {
		"name": "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE",
		"description": "이 변수가 최상위 CMakeLists.txt 파일의 끝에서 ON으로 평가되면 Sublime Text 2 추가 생성기는 소스 트리 내부에 있는 경우 .sublime-project에서 빌드 트리를 제외합니다."
	},
	"CMAKE_SUPPRESS_REGENERATION": {
		"name": "CMAKE_SUPPRESS_REGENERATION",
		"description": "CMAKE_SUPPRESS_REGENERATION이 기본값인 OFF이면 CMake는 모든 다른 대상이 종속된 특수 대상을 추가하며, 이 특수 대상은 빌드 시스템을 확인하고 필요한 경우 CMake를 다시 실행하여 대상 사양 소스가 변경될 때 빌드 시스템을 다시 생성합니다."
	},
	"CMAKE_Swift_COMPILATION_MODE": {
		"name": "CMAKE_Swift_COMPILATION_MODE",
		"description": "Swift가 대상을 컴파일하는 방법을 지정합니다. 이 변수는 생성되는 대상에서 Swift_COMPILATION_MODE 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_Swift_LANGUAGE_VERSION": {
		"name": "CMAKE_Swift_LANGUAGE_VERSION",
		"description": "Swift 언어 버전 번호로 설정합니다. 설정하지 않으면 호스트 Xcode 버전에서 사용할 수 있는 것으로 알려진 가장 오래된 레거시 버전이 고려됩니다."
	},
	"CMAKE_Swift_MODULE_DIRECTORY": {
		"name": "CMAKE_Swift_MODULE_DIRECTORY",
		"description": "Swift 모듈 출력 디렉터리입니다."
	},
	"CMAKE_Swift_NUM_THREADS": {
		"name": "CMAKE_Swift_NUM_THREADS",
		"description": "Swift 대상의 병렬 컴파일에 대한 스레드 수입니다."
	},
	"CMAKE_SYSROOT": {
		"name": "CMAKE_SYSROOT",
		"description": "--sysroot 플래그로 컴파일러에 전달할 경로입니다."
	},
	"CMAKE_SYSROOT_COMPILE": {
		"name": "CMAKE_SYSROOT_COMPILE",
		"description": "소스 파일을 컴파일할 때 --sysroot 플래그로 컴파일러에 전달할 경로입니다. 이 경로는 CMAKE_SYSROOT와 동일하지만 소스 컴파일에만 사용되고 연결에는 사용되지 않습니다."
	},
	"CMAKE_SYSROOT_LINK": {
		"name": "CMAKE_SYSROOT_LINK",
		"description": "연결할 때 --sysroot 플래그로 컴파일러에 전달할 경로입니다. 이 경로는 CMAKE_SYSROOT와 동일하지만 연결에만 사용되고 소스 컴파일에는 사용되지 않습니다."
	},
	"CMAKE_SYSTEM": {
		"name": "CMAKE_SYSTEM",
		"description": "운영 체제 CMake의 복합 이름이 컴파일되고 있습니다."
	},
	"CMAKE_SYSTEM_APPBUNDLE_PATH": {
		"name": "CMAKE_SYSTEM_APPBUNDLE_PATH",
		"description": "find_program 및 find_package 명령에서 사용되는 macOS 애플리케이션 번들의 검색 경로입니다. 기본적으로 이 경로에는 현재 시스템의 표준 디렉터리가 포함됩니다. 프로젝트에서 수정할 수 없으며, CMAKE_APPBUNDLE_PATH를 대신 사용하세요."
	},
	"CMAKE_SYSTEM_FRAMEWORK_PATH": {
		"name": "CMAKE_SYSTEM_FRAMEWORK_PATH",
		"description": "find_library, find_package, find_path 및 find_file 명령에서 사용되는 macOS 프레임워크의 검색 경로입니다. 기본적으로 이 경로에는 현재 시스템의 표준 디렉터리가 포함됩니다. 프로젝트에서 수정할 수 없으며, CMAKE_FRAMEWORK_PATH를 대신 사용하세요."
	},
	"CMAKE_SYSTEM_IGNORE_PATH": {
		"name": "CMAKE_SYSTEM_IGNORE_PATH",
		"description": "다양한 find...() 명령에서 무시할 세미콜론으로 구분된 디렉터리 목록입니다."
	},
	"CMAKE_SYSTEM_IGNORE_PREFIX_PATH": {
		"name": "CMAKE_SYSTEM_IGNORE_PREFIX_PATH",
		"description": "find_program, find_library, find_file, find_path 명령으로 무시할 세미콜론으로 구분된 검색 접두사 목록입니다. 접두사도 find_package 명령의 구성 모드에서 무시됩니다(모듈 모드는 영향을 받지 않음). 이렇게 하지 않고 특정 디렉터리를 무시하려면 CMAKE_IGNORE_NONPREFIX_VAR을 참조하세요."
	},
	"CMAKE_SYSTEM_INCLUDE_PATH": {
		"name": "CMAKE_SYSTEM_INCLUDE_PATH",
		"description": "find_file 및 find_path 명령을 위한 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다. 기본적으로 현재 시스템의 표준 디렉터리가 포함됩니다. 프로젝트에서 수정할 수 없으며 CMAKE_INCLUDE_PATH를 대신 사용하세요. CMAKE_SYSTEM_PREFIX_PATH를 참조하세요."
	},
	"CMAKE_SYSTEM_LIBRARY_PATH": {
		"name": "CMAKE_SYSTEM_LIBRARY_PATH",
		"description": "find_library 명령을 위한 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다. 기본적으로 현재 시스템의 표준 디렉터리가 포함됩니다. 프로젝트에서 수정할 수 없으며 CMAKE_LIBRARY_PATH를 대신 사용하세요. CMAKE_SYSTEM_PREFIX_PATH를 참조하세요."
	},
	"CMAKE_SYSTEM_NAME": {
		"name": "CMAKE_SYSTEM_NAME",
		"description": "CMake가 빌드될 운영 체제의 이름입니다. OS 버전에 대해서는 CMAKE_SYSTEM_VERSION 변수를 참조하세요."
	},
	"CMAKE_SYSTEM_PREFIX_PATH": {
		"name": "CMAKE_SYSTEM_PREFIX_PATH",
		"description": "find_package, find_program, find_library, find_file 및 find_path 명령으로 검색할 설치 접두사를 지정하는 디렉터리의 세미콜론으로 구분된 목록입니다. 각 명령은 자세 설명서에 지정된 대로 적절한 하위 디렉터리(예: bin, lib 및 include)를 추가합니다."
	},
	"CMAKE_SYSTEM_PROCESSOR": {
		"name": "CMAKE_SYSTEM_PROCESSOR",
		"description": "교차 컴파일 시 이 변수의 값은 CMAKE_HOST_SYSTEM_PROCESSOR 변수의 값과 같습니다. 많은 경우에 이 변수는 빌드의 대상 아키텍처와 일치하지만, 반드시 그런 것은 아닙니다. 예를 들어 Windows에서 32비트 대상에 MSVC cl 컴파일러를 사용하는 경우에도 호스트는 AMD64가 될 수 있습니다."
	},
	"CMAKE_SYSTEM_PROGRAM_PATH": {
		"name": "CMAKE_SYSTEM_PROGRAM_PATH",
		"description": "find_program 명령을 위한 검색 경로를 지정하는 세미콜론으로 구분된 디렉터리 목록입니다. 기본적으로 현재 시스템의 표준 디렉터리가 포함됩니다. 프로젝트에서 수정할 수 없으며 CMAKE_PROGRAM_PATH를 대신 사용하세요. CMAKE_SYSTEM_PREFIX_PATH를 참조하세요."
	},
	"CMAKE_SYSTEM_VERSION": {
		"name": "CMAKE_SYSTEM_VERSION",
		"description": "CMake가 빌드될 운영 체제의 버전입니다. OS 이름에 대해서는 CMAKE_SYSTEM_NAME 변수를 참조하세요."
	},
	"CMAKE_TASKING_TOOLSET": {
		"name": "CMAKE_TASKING_TOOLSET",
		"description": "컴파일러를 제공하는 Tasking 도구 세트를 선택하세요."
	},
	"CMAKE_TEST_LAUNCHER": {
		"name": "CMAKE_TEST_LAUNCHER",
		"description": "이 변수는 실행 가능한 대상의 TEST_LAUNCHER 대상 속성을 만들 때 초기화하는 데 사용됩니다. 실행 가능한 대상을 실행하는 add_test 명령에 의해 추가된 테스트를 실행하기 위한 시작 관리자를 지정하는 데 사용됩니다."
	},
	"CMAKE_TLS_CAINFO": {
		"name": "CMAKE_TLS_CAINFO",
		"description": "파일 및 파일 명령의 TLS_CAINFO 옵션에 대한 기본값을 지정합니다. 기본적으로 설정되지 않습니다."
	},
	"CMAKE_TLS_VERIFY": {
		"name": "CMAKE_TLS_VERIFY",
		"description": "파일 및 파일 명령의 TLS_VERIFY 옵션에 대한 기본값을 지정합니다. 이 변수를 설정하지 않으면 명령은 CMAKE_TLS_VERIFY 환경 변수를 확인합니다. 둘 다 설정되지 않으면 기본값이 해제됩니다."
	},
	"CMAKE_TLS_VERSION": {
		"name": "CMAKE_TLS_VERSION",
		"description": "파일 및 파일 명령의 TLS_VERSION 옵션에 대한 기본값을 지정합니다. 이 변수를 설정하지 않으면 명령은 CMAKE_TLS_VERSION 환경 변수를 확인합니다."
	},
	"CMAKE_TOOLCHAIN_FILE": {
		"name": "CMAKE_TOOLCHAIN_FILE",
		"description": "cmake에 제공되는 도구 체인 파일의 경로입니다."
	},
	"CMAKE_TRY_COMPILE_CONFIGURATION": {
		"name": "CMAKE_TRY_COMPILE_CONFIGURATION",
		"description": "try_compile 및 try_run 프로젝트에 사용되는 빌드 구성입니다."
	},
	"CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES": {
		"name": "CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES",
		"description": "테스트 프로젝트에 플랫폼 변수를 전파하지 않도록 try_compile 명령에 지시하려면 true 값으로 설정하세요."
	},
	"CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": {
		"name": "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES",
		"description": "호스트 프로젝트와 동일한 플랫폼을 대상으로 지정하기 위해 try_compile 명령 소스 파일 시그니처가 테스트 프로젝트에 전파해야 하는 변수 목록입니다."
	},
	"CMAKE_TRY_COMPILE_TARGET_TYPE": {
		"name": "CMAKE_TRY_COMPILE_TARGET_TYPE",
		"description": "소스 파일 시그니처를 사용하여 try_compile 호출에 대해 생성된 대상의 형식입니다. 유효한 값은 다음과 같습니다:"
	},
	"CMAKE_TWEAK_VERSION": {
		"name": "CMAKE_TWEAK_VERSION",
		"description": "더 높은 값을 정의했을 수 있는 이전 CMake 버전용으로 작성된 코드와 호환될 수 있도록 0으로 정의됩니다."
	},
	"CMAKE_UNITY_BUILD": {
		"name": "CMAKE_UNITY_BUILD",
		"description": "이 변수는 대상이 생성될 때 대상의 UNITY_BUILD 속성을 초기화하는 데 사용됩니다. True로 설정하면 각 대상 내에서 여러 소스를 일괄 컴파일할 수 있습니다. 해당 기능을 Unity 또는 Jumbo 빌드라고 합니다."
	},
	"CMAKE_UNITY_BUILD_BATCH_SIZE": {
		"name": "CMAKE_UNITY_BUILD_BATCH_SIZE",
		"description": "이 변수는 대상이 생성될 때 UNITY_BUILD_BATCH_SIZE 속성을 초기화하는 데 사용됩니다. 대상에 Unity 빌드를 사용할 경우 하나의 Unity 소스 파일로 결합할 수 있는 소스 파일 수에 대한 기본 상한을 지정합니다."
	},
	"CMAKE_UNITY_BUILD_UNIQUE_ID": {
		"name": "CMAKE_UNITY_BUILD_UNIQUE_ID",
		"description": "이 변수는 대상이 생성될 때 대상의 UNITY_BUILD_UNIQUE_ID 속성을 초기화하는 데 사용됩니다. Unity 빌드에서 파일별로 생성되는 고유한 식별자의 이름을 지정합니다."
	},
	"CMAKE_USER_MAKE_RULES_OVERRIDE": {
		"name": "CMAKE_USER_MAKE_RULES_OVERRIDE",
		"description": "플랫폼 정보를 재정의하는 CMake 파일을 지정합니다."
	},
	"CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>": {
		"name": "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>",
		"description": "<LANG>의 플랫폼 정보를 재정의하는 CMake 파일을 지정합니다."
	},
	"CMAKE_USE_RELATIVE_PATHS": {
		"name": "CMAKE_USE_RELATIVE_PATHS",
		"description": "이 변수는 아무런 영향을 주지 않습니다. 이전 릴리스에서 부분적으로 구현된 효과가 CMake 3.4에서 제거되었습니다."
	},
	"CMAKE_VERBOSE_MAKEFILE": {
		"name": "CMAKE_VERBOSE_MAKEFILE",
		"description": "Makefile 빌드에서 자세한 정보 출력을 사용하도록 설정합니다."
	},
	"CMAKE_VERIFY_INTERFACE_HEADER_SETS": {
		"name": "CMAKE_VERIFY_INTERFACE_HEADER_SETS",
		"description": "이 변수는 대상이 생성될 때 대상의 VERIFY_INTERFACE_HEADER_SETS 속성을 초기화하는 데 사용됩니다. true로 설정하면 헤더 집합 확인이 활성화됩니다."
	},
	"CMAKE_VERSION": {
		"name": "CMAKE_VERSION",
		"description": "음수가 아닌 정수 구성 요소 세 개가 .으로 구분되고 뒤에 - 및 기타 정보가 올 수 있는 CMake 버전 문자열입니다. 처음 두 개 구성 요소는 기능 수준을 나타내고 세 번째 구성 요소는 버그 수정 수준 또는 개발 날짜를 나타냅니다."
	},
	"CMAKE_VISIBILITY_INLINES_HIDDEN": {
		"name": "CMAKE_VISIBILITY_INLINES_HIDDEN",
		"description": "대상이 생성될 때 VISIBILITY_INLINES_HIDDEN 대상 속성의 기본값입니다."
	},
	"CMAKE_VS_DEBUGGER_COMMAND": {
		"name": "CMAKE_VS_DEBUGGER_COMMAND",
		"description": "이 변수는 생성되는 각 대상에서 VS_DEBUGGER_COMMAND 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS": {
		"name": "CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS",
		"description": "이 변수는 생성되는 각 대상에서 VS_DEBUGGER_COMMAND_ARGUMENTS 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_VS_DEBUGGER_ENVIRONMENT": {
		"name": "CMAKE_VS_DEBUGGER_ENVIRONMENT",
		"description": "이 변수는 생성되는 각 대상에서 VS_DEBUGGER_ENVIRONMENT 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_VS_DEBUGGER_WORKING_DIRECTORY": {
		"name": "CMAKE_VS_DEBUGGER_WORKING_DIRECTORY",
		"description": "이 변수는 생성되는 각 대상에서 VS_DEBUGGER_WORKING_DIRECTORY 속성을 초기화하는 데 사용됩니다. 자세한 내용은 해당 대상 속성을 참조하세요."
	},
	"CMAKE_VS_DEVENV_COMMAND": {
		"name": "CMAKE_VS_DEVENV_COMMAND",
		"description": "Visual Studio 12 2013 이상의 생성기는 이 변수를 해당 Visual Studio 버전과 함께 설치된 devenv.com 명령으로 설정합니다. Visual Studio 기본 버전에서는 이 도구를 제공하지 않으므로 이 변수가 비어 있을 수 있습니다."
	},
	"CMAKE_VS_GLOBALS": {
		"name": "CMAKE_VS_GLOBALS",
		"description": "변수=키 및 Value 값을 사용하여 대상 속성 VS_GLOBAL_로 대상별로 설정할 키=값 레코드 목록입니다."
	},
	"CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": {
		"name": "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD",
		"description": "기본 빌드에 대한 INSTALL 대상을 포함합니다."
	},
	"CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": {
		"name": "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD",
		"description": "기본 빌드에 대한 PACKAGE 대상을 포함합니다."
	},
	"CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": {
		"name": "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION",
		"description": "Intel Fortran 플러그인이 설치된 Visual Studio 12 2013 이상용으로 생성하는 경우 .vfproj 프로젝트 파일 형식 버전이 지정됩니다. 이 항목은 CMake에서 내부용으로 사용할 수 있고 프로젝트 코드에서 사용해서는 안 됩니다."
	},
	"CMAKE_VS_JUST_MY_CODE_DEBUGGING": {
		"name": "CMAKE_VS_JUST_MY_CODE_DEBUGGING",
		"description": "Visual Studio 디버거를 사용하여 내 코드만을 사용하도록 설정합니다."
	},
	"CMAKE_VS_MSBUILD_COMMAND": {
		"name": "CMAKE_VS_MSBUILD_COMMAND",
		"description": "Visual Studio 12 2013 이상의 생성기는 해당 Visual Studio 버전을 사용하여 설치된 MSBuild.exe 명령으로 이 변수를 설정합니다."
	},
	"CMAKE_VS_NO_COMPILE_BATCHING": {
		"name": "CMAKE_VS_NO_COMPILE_BATCHING",
		"description": "Visual Studio 생성기를 사용할 때 컴파일 일괄 처리를 끕니다."
	},
	"CMAKE_VS_NsightTegra_VERSION": {
		"name": "CMAKE_VS_NsightTegra_VERSION",
		"description": "CMAKE_SYSTEM_NAME 변수를 Android로 설정하고 Visual Studio 생성기를 사용할 경우 이 변수에는 설치된 NVIDIA Nsight Tegra Visual Studio Edition의 버전 번호가 포함됩니다."
	},
	"CMAKE_VS_NUGET_PACKAGE_RESTORE": {
		"name": "CMAKE_VS_NUGET_PACKAGE_RESTORE",
		"description": "Visual Studio 생성기 사용 시 이 캐시 변수는 msbuild가 빌드 전에 NuGet 패키지의 자동 복원을 시도해야 하는지를 제어합니다. NuGet 패키지는 대상의 VS_PACKAGE_REFERENCES 속성을 사용하여 정의할 수 있습니다. 패키지 참조가 정의되지 않은 경우 이 설정은 아무 작업도 수행하지 않습니다."
	},
	"CMAKE_VS_PLATFORM_NAME": {
		"name": "CMAKE_VS_PLATFORM_NAME",
		"description": "현재 생성기에서 사용되는 Visual Studio 대상 플랫폼 이름입니다."
	},
	"CMAKE_VS_PLATFORM_NAME_DEFAULT": {
		"name": "CMAKE_VS_PLATFORM_NAME_DEFAULT",
		"description": "CMAKE_GENERATOR_PLATFORM 변수 값을 고려하지 않고 현재 생성기에 대한 Visual Studio 대상 플랫폼 이름의 기본값입니다. VS 2017용 Visual Studio 생성기의 경우 해당 이름은 항상 Win32입니다. VS 2019 이상의 경우 해당 이름은 호스트 플랫폼을 기반으로 합니다."
	},
	"CMAKE_VS_PLATFORM_TOOLSET": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET",
		"description": "Visual Studio 플랫폼 도구 세트 이름입니다."
	},
	"CMAKE_VS_PLATFORM_TOOLSET_CUDA": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_CUDA",
		"description": "사용할 Visual Studio 도구 세트가 포함된 NVIDIA CUDA 도구 키트 버전입니다."
	},
	"CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR",
		"description": "독립 실행형 NVIDIA CUDA 도구 키트의 경로입니다(예: 설치 관리자에서 추출됨)."
	},
	"CMAKE_VS_PLATFORM_TOOLSET_FORTRAN": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_FORTRAN",
		"description": "Visual Studio 프로젝트에서 사용할 Fortran 컴파일러입니다."
	},
	"CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE",
		"description": "Visual Studio 기본 설정 도구 아키텍처입니다."
	},
	"CMAKE_VS_PLATFORM_TOOLSET_VERSION": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_VERSION",
		"description": "Visual Studio 플랫폼 도구 세트 버전입니다."
	},
	"CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES",
		"description": "이 변수를 사용하여 Visual Studio 기본 제외 디렉터리를 재정의할 수 있습니다."
	},
	"CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES",
		"description": "이 변수를 사용하여 Visual Studio 기본 실행 파일 디렉터리를 재정의할 수 있습니다."
	},
	"CMAKE_VS_SDK_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_INCLUDE_DIRECTORIES",
		"description": "이 변수를 사용하여 Visual Studio 기본 포함 디렉터리를 재정의할 수 있습니다."
	},
	"CMAKE_VS_SDK_LIBRARY_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_LIBRARY_DIRECTORIES",
		"description": "이 변수를 사용하여 Visual Studio 기본 라이브러리 디렉터리를 재정의할 수 있습니다."
	},
	"CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES",
		"description": "이 변수를 사용하여 Visual Studio 기본 라이브러리 WinRT 디렉터리를 재정의할 수 있습니다."
	},
	"CMAKE_VS_SDK_REFERENCE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_REFERENCE_DIRECTORIES",
		"description": "이 변수를 사용하여 Visual Studio 기본 참조 디렉터리를 재정의할 수 있습니다."
	},
	"CMAKE_VS_SDK_SOURCE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_SOURCE_DIRECTORIES",
		"description": "이 변수를 사용하여 Visual Studio 기본 소스 디렉터리를 재정의할 수 있습니다."
	},
	"CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER",
		"description": "Visual Studio 대상 프레임워크 식별자입니다."
	},
	"CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION",
		"description": "Visual Studio 대상 프레임워크는 버전을 대상으로 합니다."
	},
	"CMAKE_VS_TARGET_FRAMEWORK_VERSION": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_VERSION",
		"description": "Visual Studio 대상 프레임워크 버전입니다."
	},
	"CMAKE_VS_USE_DEBUG_LIBRARIES": {
		"name": "CMAKE_VS_USE_DEBUG_LIBRARIES",
		"description": "Visual Studio 생성기에 어떤 구성을 디버그 구성으로 간주할지 지정합니다. .vcxproj 파일의 각 구성에서 UseDebugLibraries 설정을 제어합니다."
	},
	"CMAKE_VS_VERSION_BUILD_NUMBER": {
		"name": "CMAKE_VS_VERSION_BUILD_NUMBER",
		"description": "Visual Studio 버전."
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION",
		"description": "지정된 Windows 대상 플랫폼 최소 버전을 사용하도록 Visual Studio 생성기에 지시합니다."
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION",
		"description": "Visual Studio Windows 대상 플랫폼 버전입니다."
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM",
		"description": "VS 2015 이상의 경우 Windows 10 SDK 최대 버전을 재정의합니다."
	},
	"CMAKE_VS_WINRT_BY_DEFAULT": {
		"name": "CMAKE_VS_WINRT_BY_DEFAULT",
		"description": "대상 플랫폼이 기본적으로 WinRT 컴파일을 사용하며 /ZW 또는 VS_WINRT_COMPONENT가 생략된 경우 명시적으로 사용하지 않도록 설정해야 함을 VS 2010 이상용 Visual Studio 생성기에 알립니다."
	},
	"CMAKE_WARN_DEPRECATED": {
		"name": "CMAKE_WARN_DEPRECATED",
		"description": "사용되지 않는 기능에 대한 경고를 발생시킬지 여부를 나타냅니다."
	},
	"CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "절대 INSTALL DESTINATION이 포함된 파일이 나타날 때마다 경고하도록 cmake_install.cmake 스크립트에 요청합니다."
	},
	"CMAKE_WATCOM_RUNTIME_LIBRARY": {
		"name": "CMAKE_WATCOM_RUNTIME_LIBRARY",
		"description": "Watcom ABI를 대상으로 하는 컴파일러에서 사용할 Watcom 런타임 라이브러리를 선택합니다. 이 변수는 생성되는 모든 대상에서 WATCOM_RUNTIME_LIBRARY 속성을 초기화하는 데 사용됩니다. 또한 try_compile 명령을 호출하여 테스트 프로젝트로 전파됩니다."
	},
	"CMAKE_WIN32_EXECUTABLE": {
		"name": "CMAKE_WIN32_EXECUTABLE",
		"description": "대상에 대한 WIN32_EXECUTABLE의 기본값입니다."
	},
	"CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": {
		"name": "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS",
		"description": "WINDOWS_EXPORT_ALL_SYMBOLS 대상 속성의 기본값입니다. 이 변수는 속성이 생성될 때 각 대상에서 속성을 초기화하는 데 사용됩니다."
	},
	"CMAKE_XCODE_ATTRIBUTE_<an-attribute>": {
		"name": "CMAKE_XCODE_ATTRIBUTE_<an-attribute>",
		"description": "Xcode 대상 특성을 직접 설정합니다."
	},
	"CMAKE_XCODE_BUILD_SYSTEM": {
		"name": "CMAKE_XCODE_BUILD_SYSTEM",
		"description": "Xcode 빌드 시스템 선택 영역입니다."
	},
	"CMAKE_XCODE_GENERATE_SCHEME": {
		"name": "CMAKE_XCODE_GENERATE_SCHEME",
		"description": "사용되는 경우 Xcode 생성기는 스키마 파일을 생성합니다. 해당 스키마 파일은 명령줄에서 작업을 분석, 보관, 테스트용 빌드 및 테스트하는 데 유용합니다."
	},
	"CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": {
		"name": "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY",
		"description": "사용되는 경우 Xcode 생성기는 모든 project() 명령이 아니라 최상위 project() 명령의 단일 Xcode 프로젝트 파일만 생성합니다."
	},
	"CMAKE_XCODE_LINK_BUILD_PHASE_MODE": {
		"name": "CMAKE_XCODE_LINK_BUILD_PHASE_MODE",
		"description": "이 변수는 대상에서 XCODE_LINK_BUILD_PHASE_MODE 속성을 초기화하는 데 사용됩니다. Xcode 생성기에서 다른 종류의 라이브러리를 연결하기 위해 사용하는 메서드에 영향을 줍니다. 기본값은 NONE입니다."
	},
	"CMAKE_XCODE_PLATFORM_TOOLSET": {
		"name": "CMAKE_XCODE_PLATFORM_TOOLSET",
		"description": "Xcode 컴파일러 선택입니다."
	},
	"CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 주소 삭제기를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": {
		"name": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Detect use of stack after return을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": {
		"name": "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
		"description": "생성된 Xcode 체계의 옵션 섹션에서 문서 버전 브라우저를 사용할 때 디버깅 허용을 사용할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": {
		"name": "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
		"description": "생성된 Xcode 구성표의 Diagnostics 섹션에서 Main Thread Checker를 사용하지 않도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": {
		"name": "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 동적 라이브러리 로드를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": {
		"name": "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 동적 링커 API 사용을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION",
		"description": "Metal에 대한 속성 값: 생성된 Xcode 체계의 옵션 섹션에 있는 API 유효성 검사입니다."
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE",
		"description": "생성된 Xcode 구성표의 옵션 섹션에 있는 GPU 프레임 캡처의 속성 값입니다. 예제 값은 Metal 및 Disabled입니다."
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION",
		"description": "생성된 Xcode 구성표의 옵션 섹션에 있는 Metal: Shader Validation의 속성 값입니다."
	},
	"CMAKE_XCODE_SCHEME_ENVIRONMENT": {
		"name": "CMAKE_XCODE_SCHEME_ENVIRONMENT",
		"description": "생성된 Xcode 구성표의 Arguments 섹션에 추가해야 하는 환경 변수를 지정합니다."
	},
	"CMAKE_XCODE_SCHEME_GUARD_MALLOC": {
		"name": "CMAKE_XCODE_SCHEME_GUARD_MALLOC",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Guard Malloc을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION": {
		"name": "CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION",
		"description": "대상을 실행하도록 빌드 구성을 설정합니다."
	},
	"CMAKE_XCODE_SCHEME_LAUNCH_MODE": {
		"name": "CMAKE_XCODE_SCHEME_LAUNCH_MODE",
		"description": "생성된 Xcode 체계의 정보 섹션에 있는 시작에 대한 속성 값입니다."
	},
	"CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
		"description": "생성된 Xcode 구성표의 Diagnostics 섹션에서 Main Thread Checker 옵션인 문제 발생 시 Pause를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Malloc Guard Edges를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Malloc Scribble을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_MALLOC_STACK": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_STACK",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Malloc 스택을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_THREAD_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 스레드 삭제기를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 스레드 삭제기 - 문제 발생 시 일시 중지를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 정의되지 않은 동작 삭제기를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 정의되지 않은 동작 삭제기 옵션인 문제 발생 시 일시 중지를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_SCHEME_WORKING_DIRECTORY": {
		"name": "CMAKE_XCODE_SCHEME_WORKING_DIRECTORY",
		"description": "생성된 Xcode 체계에서 실행 및 프로필 작업의 작업 디렉터리를 지정합니다."
	},
	"CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": {
		"name": "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 좀비 개체를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"CMAKE_XCODE_XCCONFIG": {
		"name": "CMAKE_XCODE_XCCONFIG",
		"description": "설정하면 Xcode 생성기는 지정된 파일을 전역 XCConfig 파일로 등록합니다. 대상 수준 XCConfig 파일의 경우 XCODE_XCCONFIG 대상 속성을 참조하세요."
	},
	"CPACK_ABSOLUTE_DESTINATION_FILES": {
		"name": "CPACK_ABSOLUTE_DESTINATION_FILES",
		"description": "절대 대상 경로를 사용하여 설치된 파일 목록입니다."
	},
	"CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": {
		"name": "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY",
		"description": "최상위 디렉터리(구성 요소 사례)를 포함/제외하기 위한 부울 토글입니다."
	},
	"CPACK_CUSTOM_INSTALL_VARIABLES": {
		"name": "CPACK_CUSTOM_INSTALL_VARIABLES",
		"description": "CPack 변수(예: cpack -D, CPackConfig.cmake 또는 CPACK_PROJECT_CONFIG_FILE 스크립트를 통해 설정)는 설치 스크립트에서 직접 볼 수 없습니다. 대신 CPACK_CUSTOM_INSTALL_VARIABLES 변수에 varName=value 쌍 목록을 전달할 수 있습니다. 설치 시 각 목록 항목은 지정된 이름(varName)의 변수가 지정된 값으로 설정되도록 합니다. =는 빈 값에 대해 생략할 수 있습니다."
	},
	"CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "절대 INSTALL DESTINATION이 포함된 파일이 나타나면 최대한 빨리 오류를 발생시키도록 CPack에 요청합니다."
	},
	"CPACK_INCLUDE_TOPLEVEL_DIRECTORY": {
		"name": "CPACK_INCLUDE_TOPLEVEL_DIRECTORY",
		"description": "최상위 디렉터리를 포함/제외하기 위한 부울 토글입니다."
	},
	"CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": {
		"name": "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
		"description": "패키지하는 동안 암시적으로 생성된 디렉터리의 기본 권한입니다."
	},
	"CPACK_PACKAGING_INSTALL_PREFIX": {
		"name": "CPACK_PACKAGING_INSTALL_PREFIX",
		"description": "빌드된 패키지에서 사용되는 접두사입니다."
	},
	"CPACK_SET_DESTDIR": {
		"name": "CPACK_SET_DESTDIR",
		"description": "패키지할 때 CPack이 DESTDIR 메커니즘을 사용하도록 설정하는 부울 토글입니다."
	},
	"CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "절대 INSTALL DESTINATION이 포함된 파일이 나타날 때마다 경고하도록 CPack에 요청합니다."
	},
	"CTEST_BINARY_DIRECTORY": {
		"name": "CTEST_BINARY_DIRECTORY",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest BuildDirectory 설정을 지정합니다."
	},
	"CTEST_BUILD_COMMAND": {
		"name": "CTEST_BUILD_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest MakeCommand 설정을 지정합니다."
	},
	"CTEST_BUILD_NAME": {
		"name": "CTEST_BUILD_NAME",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest BuildName 설정을 지정합니다."
	},
	"CTEST_BZR_COMMAND": {
		"name": "CTEST_BZR_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest BZRCommand 설정을 지정합니다."
	},
	"CTEST_BZR_UPDATE_OPTIONS": {
		"name": "CTEST_BZR_UPDATE_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest BZRUpdateOptions 설정을 지정합니다."
	},
	"CTEST_CHANGE_ID": {
		"name": "CTEST_CHANGE_ID",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest ChangeId 설정을 지정합니다."
	},
	"CTEST_CHECKOUT_COMMAND": {
		"name": "CTEST_CHECKOUT_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 소스 디렉터리를 체크 아웃하거나 초기화하는 방법을 ctest_start 명령에 알립니다."
	},
	"CTEST_CONFIGURATION_TYPE": {
		"name": "CTEST_CONFIGURATION_TYPE",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest DefaultCTestConfigurationType 설정을 지정합니다."
	},
	"CTEST_CONFIGURE_COMMAND": {
		"name": "CTEST_CONFIGURE_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest ConfigureCommand 설정을 지정합니다."
	},
	"CTEST_COVERAGE_COMMAND": {
		"name": "CTEST_COVERAGE_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest CoverageCommand 설정을 지정합니다."
	},
	"CTEST_COVERAGE_EXTRA_FLAGS": {
		"name": "CTEST_COVERAGE_EXTRA_FLAGS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest CoverageExtraFlags 설정을 지정합니다."
	},
	"CTEST_CURL_OPTIONS": {
		"name": "CTEST_CURL_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest CurlOptions 설정을 지정합니다."
	},
	"CTEST_CUSTOM_COVERAGE_EXCLUDE": {
		"name": "CTEST_CUSTOM_COVERAGE_EXCLUDE",
		"description": "ctest_coverage 명령으로 검사 출력에서 경로별 파일을 제외하는 데 사용할 정규식 목록입니다."
	},
	"CTEST_CUSTOM_ERROR_EXCEPTION": {
		"name": "CTEST_CUSTOM_ERROR_EXCEPTION",
		"description": "ctest_build 명령의 빌드 출력에서 오류 메시지를 검색할 때 제외하기 위해 사용할 정규식 목록입니다."
	},
	"CTEST_CUSTOM_ERROR_MATCH": {
		"name": "CTEST_CUSTOM_ERROR_MATCH",
		"description": "ctest_build 명령으로 빌드 출력에서 오류 메시지를 검색하는 데 사용할 정규식 목록입니다."
	},
	"CTEST_CUSTOM_ERROR_POST_CONTEXT": {
		"name": "CTEST_CUSTOM_ERROR_POST_CONTEXT",
		"description": "ctest_build 명령에 의한 오류 메시지 뒤에 컨텍스트로 포함할 줄 수입니다. 기본값은 10입니다."
	},
	"CTEST_CUSTOM_ERROR_PRE_CONTEXT": {
		"name": "CTEST_CUSTOM_ERROR_PRE_CONTEXT",
		"description": "ctest_build 명령에 의한 오류 메시지 앞에 컨텍스트로 포함할 줄 수입니다. 기본값은 10입니다."
	},
	"CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": {
		"name": "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE",
		"description": "실패한 테스트의 출력을 저장할 때 이것은 ctest_test 명령에 의해 수집되는 최대 크기(바이트)입니다. 기본값은 307200(300KiB)입니다. 가능한 잘림 모드는 CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION을 참조하세요."
	},
	"CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": {
		"name": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS",
		"description": "단일 빌드 단계에서 검색할 최대 오류 수입니다. ctest_test 명령은 이 값 이후 출력을 자릅니다. 기본값은 50입니다."
	},
	"CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": {
		"name": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS",
		"description": "단일 빌드 단계에서 검색할 최대 경고 수입니다. ctest_test 명령은 이 값 이후 출력을 자릅니다. 기본값은 50입니다."
	},
	"CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": {
		"name": "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE",
		"description": "통과한 테스트의 출력을 저장할 때 이것은 ctest_test 명령에 의해 수집되는 최대 크기(바이트)입니다. 기본값은 1024(1KiB)입니다. 가능한 잘림 모드는 CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION을 참조하세요."
	},
	"CTEST_CUSTOM_MEMCHECK_IGNORE": {
		"name": "CTEST_CUSTOM_MEMCHECK_IGNORE",
		"description": "ctest_memcheck 명령을 실행하는 동안 테스트를 제외하는 데 사용할 정규식 목록입니다."
	},
	"CTEST_CUSTOM_POST_MEMCHECK": {
		"name": "CTEST_CUSTOM_POST_MEMCHECK",
		"description": "ctest_memcheck 명령 종료 시 실행할 명령 목록입니다."
	},
	"CTEST_CUSTOM_POST_TEST": {
		"name": "CTEST_CUSTOM_POST_TEST",
		"description": "ctest_test 명령 종료 시 실행할 명령 목록입니다."
	},
	"CTEST_CUSTOM_PRE_MEMCHECK": {
		"name": "CTEST_CUSTOM_PRE_MEMCHECK",
		"description": "ctest_memcheck 명령 시작 시 실행할 명령 목록입니다."
	},
	"CTEST_CUSTOM_PRE_TEST": {
		"name": "CTEST_CUSTOM_PRE_TEST",
		"description": "ctest_test 명령 시작 시 실행할 명령 목록입니다."
	},
	"CTEST_CUSTOM_TESTS_IGNORE": {
		"name": "CTEST_CUSTOM_TESTS_IGNORE",
		"description": "ctest_test 명령으로 실행되는 테스트 집합에서 제외할 테스트 이름 목록입니다."
	},
	"CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION": {
		"name": "CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION",
		"description": "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE 또는 CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 변수를 통해 최대 크기가 구성된 경우 테스트 출력 자르기 모드를 설정합니다. 기본적으로 출력의 꼬리는 잘립니다. 다른 가능한 값은 중간 및 머리입니다."
	},
	"CTEST_CUSTOM_WARNING_EXCEPTION": {
		"name": "CTEST_CUSTOM_WARNING_EXCEPTION",
		"description": "ctest_build 명령으로 빌드 출력에서 경고 메시지를 검색할 때 제외하는 데 사용할 정규식 목록입니다."
	},
	"CTEST_CUSTOM_WARNING_MATCH": {
		"name": "CTEST_CUSTOM_WARNING_MATCH",
		"description": "ctest_build 명령으로 빌드 출력에서 경고 메시지를 검색하는 데 사용할 정규식 목록입니다."
	},
	"CTEST_CVS_CHECKOUT": {
		"name": "CTEST_CVS_CHECKOUT",
		"description": "사용되지 않는 명령어입니다. CTEST_CHECKOUT_COMMAND를 대신 사용하세요."
	},
	"CTEST_CVS_COMMAND": {
		"name": "CTEST_CVS_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest CVSCommand 설정을 지정합니다."
	},
	"CTEST_CVS_UPDATE_OPTIONS": {
		"name": "CTEST_CVS_UPDATE_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest CVSUpdateOptions 설정을 지정합니다."
	},
	"CTEST_DROP_LOCATION": {
		"name": "CTEST_DROP_LOCATION",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest DropLocation 설정을 지정합니다."
	},
	"CTEST_DROP_METHOD": {
		"name": "CTEST_DROP_METHOD",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest DropMethod 설정을 지정합니다."
	},
	"CTEST_DROP_SITE": {
		"name": "CTEST_DROP_SITE",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest DropSite 설정을 지정합니다."
	},
	"CTEST_DROP_SITE_CDASH": {
		"name": "CTEST_DROP_SITE_CDASH",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest IsCDash 설정을 지정합니다."
	},
	"CTEST_DROP_SITE_PASSWORD": {
		"name": "CTEST_DROP_SITE_PASSWORD",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest DropSitePassword 설정을 지정합니다."
	},
	"CTEST_DROP_SITE_USER": {
		"name": "CTEST_DROP_SITE_USER",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest DropSiteUser 설정을 지정합니다."
	},
	"CTEST_EXTRA_COVERAGE_GLOB": {
		"name": "CTEST_EXTRA_COVERAGE_GLOB",
		"description": "ctest_coverage 명령으로 검사해야 하는 파일을 찾는 데 사용할 정규식 목록입니다."
	},
	"CTEST_GIT_COMMAND": {
		"name": "CTEST_GIT_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest GITCommand 설정을 지정합니다."
	},
	"CTEST_GIT_INIT_SUBMODULES": {
		"name": "CTEST_GIT_INIT_SUBMODULES",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest GITInitSubmodules 설정을 지정합니다."
	},
	"CTEST_GIT_UPDATE_CUSTOM": {
		"name": "CTEST_GIT_UPDATE_CUSTOM",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest GITUpdateCustom 설정을 지정합니다."
	},
	"CTEST_GIT_UPDATE_OPTIONS": {
		"name": "CTEST_GIT_UPDATE_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest GITUpdateOptions 설정을 지정합니다."
	},
	"CTEST_HG_COMMAND": {
		"name": "CTEST_HG_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest HGCommand 설정을 지정합니다."
	},
	"CTEST_HG_UPDATE_OPTIONS": {
		"name": "CTEST_HG_UPDATE_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest HGUpdateOptions 설정을 지정합니다."
	},
	"CTEST_LABELS_FOR_SUBPROJECTS": {
		"name": "CTEST_LABELS_FOR_SUBPROJECTS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest LabelsForSubprojects 설정을 지정합니다."
	},
	"CTEST_MEMORYCHECK_COMMAND": {
		"name": "CTEST_MEMORYCHECK_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest MemoryCheckCommand 설정을 지정합니다."
	},
	"CTEST_MEMORYCHECK_COMMAND_OPTIONS": {
		"name": "CTEST_MEMORYCHECK_COMMAND_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest MemoryCheckCommandOptions 설정을 지정합니다."
	},
	"CTEST_MEMORYCHECK_SANITIZER_OPTIONS": {
		"name": "CTEST_MEMORYCHECK_SANITIZER_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest MemoryCheckSanitizerOptions 설정을 지정합니다."
	},
	"CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": {
		"name": "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest MemoryCheckSuppressionFile 설정을 지정합니다."
	},
	"CTEST_MEMORYCHECK_TYPE": {
		"name": "CTEST_MEMORYCHECK_TYPE",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest MemoryCheckType 설정을 지정합니다. 유효한 값은 Valgrind, Purify, BoundsChecker, DrMemory, CudaSanitizer, ThreadSanitizer, AddressSanitizer, LeakSanitizer, MemorySanitizer, UndefinedBehaviorSanitizer입니다."
	},
	"CTEST_NIGHTLY_START_TIME": {
		"name": "CTEST_NIGHTLY_START_TIME",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest NightlyStartTime 설정을 지정합니다."
	},
	"CTEST_P4_CLIENT": {
		"name": "CTEST_P4_CLIENT",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest P4Client 설정을 지정합니다."
	},
	"CTEST_P4_COMMAND": {
		"name": "CTEST_P4_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest P4Command 설정을 지정합니다."
	},
	"CTEST_P4_OPTIONS": {
		"name": "CTEST_P4_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest P4Options 설정을 지정합니다."
	},
	"CTEST_P4_UPDATE_OPTIONS": {
		"name": "CTEST_P4_UPDATE_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest P4UpdateOptions 설정을 지정합니다."
	},
	"CTEST_RESOURCE_SPEC_FILE": {
		"name": "CTEST_RESOURCE_SPEC_FILE",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest ResourceSpecFile 설정을 지정합니다."
	},
	"CTEST_RUN_CURRENT_SCRIPT": {
		"name": "CTEST_RUN_CURRENT_SCRIPT",
		"description": "이 값을 0으로 설정하면 ctest -S를 호출하여 스크립트 실행의 끝에 도달할 때 ctest가 다시 실행되지 않습니다."
	},
	"CTEST_SCP_COMMAND": {
		"name": "CTEST_SCP_COMMAND",
		"description": "레거시 옵션입니다. 사용되지 않습니다."
	},
	"CTEST_SCRIPT_DIRECTORY": {
		"name": "CTEST_SCRIPT_DIRECTORY",
		"description": "최상위 CTest 스크립트가 포함된 디렉터리입니다. 개념은 CMAKE_SOURCE_DIR과 유사합니다."
	},
	"CTEST_SITE": {
		"name": "CTEST_SITE",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest Site 설정을 지정합니다."
	},
	"CTEST_SOURCE_DIRECTORY": {
		"name": "CTEST_SOURCE_DIRECTORY",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest SourceDirectory 설정을 지정합니다."
	},
	"CTEST_SUBMIT_INACTIVITY_TIMEOUT": {
		"name": "CTEST_SUBMIT_INACTIVITY_TIMEOUT",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest SubmitInactivityTimeout 설정을 지정합니다."
	},
	"CTEST_SUBMIT_URL": {
		"name": "CTEST_SUBMIT_URL",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest SubmitURL 설정을 지정합니다."
	},
	"CTEST_SVN_COMMAND": {
		"name": "CTEST_SVN_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest SVNCommand 설정을 지정합니다."
	},
	"CTEST_SVN_OPTIONS": {
		"name": "CTEST_SVN_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest SVNOptions 설정을 지정합니다."
	},
	"CTEST_SVN_UPDATE_OPTIONS": {
		"name": "CTEST_SVN_UPDATE_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest SVNUpdateOptions 설정을 지정합니다."
	},
	"CTEST_TEST_LOAD": {
		"name": "CTEST_TEST_LOAD",
		"description": "ctest 대시보드 클라이언트 스크립트의 CTest 테스트 단계에서 TestLoad 설정을 지정합니다. 이 항목은 ctest_test 명령의 TEST_LOAD 옵션 기본값을 설정합니다."
	},
	"CTEST_TEST_TIMEOUT": {
		"name": "CTEST_TEST_TIMEOUT",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest TimeOut 설정을 지정합니다."
	},
	"CTEST_TLS_VERIFY": {
		"name": "CTEST_TLS_VERIFY",
		"description": "CTest 모듈을 포함하기 전에 ctest 대시보드 클라이언트 스크립트 또는 프로젝트 CMakeLists.txt 코드에서 CTest TLSVerify 설정을 지정합니다. 이 값은 https:// URL을 통해 대시보드에 제출할 때 서버 인증서를 확인할지 여부를 나타내는 부울입니다."
	},
	"CTEST_TLS_VERSION": {
		"name": "CTEST_TLS_VERSION",
		"description": "CTest 모듈을 포함하기 전에 ctest 대시보드 클라이언트 스크립트 또는 프로젝트 CMakeLists.txt 코드에서 CTest TLSVersion 설정을 지정합니다. 이 값은 https:// URL을 통해 대시보드에 제출할 때 허용되는 최소 TLS 버전입니다."
	},
	"CTEST_TRIGGER_SITE": {
		"name": "CTEST_TRIGGER_SITE",
		"description": "레거시 옵션입니다. 사용되지 않습니다."
	},
	"CTEST_UPDATE_COMMAND": {
		"name": "CTEST_UPDATE_COMMAND",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest UpdateCommand 설정을 지정합니다."
	},
	"CTEST_UPDATE_OPTIONS": {
		"name": "CTEST_UPDATE_OPTIONS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest UpdateOptions 설정을 지정합니다."
	},
	"CTEST_UPDATE_VERSION_ONLY": {
		"name": "CTEST_UPDATE_VERSION_ONLY",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest UpdateVersionOnly 설정을 지정합니다."
	},
	"CTEST_UPDATE_VERSION_OVERRIDE": {
		"name": "CTEST_UPDATE_VERSION_OVERRIDE",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest UpdateVersionOverride 설정을 지정합니다."
	},
	"CTEST_USE_LAUNCHERS": {
		"name": "CTEST_USE_LAUNCHERS",
		"description": "ctest 대시보드 클라이언트 스크립트에서 CTest UseLaunchers 설정을 지정합니다."
	},
	"CYGWIN": {
		"name": "CYGWIN",
		"description": "Cygwin의 경우 True입니다."
	},
	"ENV": {
		"name": "ENV",
		"description": "환경 변수를 읽기 위한 연산자입니다."
	},
	"EXECUTABLE_OUTPUT_PATH": {
		"name": "EXECUTABLE_OUTPUT_PATH",
		"description": "이전 실행 파일 위치 변수입니다."
	},
	"GHSMULTI": {
		"name": "GHSMULTI",
		"description": "Green Hills MULTI 생성기를 사용할 경우 1입니다."
	},
	"IOS": {
		"name": "IOS",
		"description": "대상 시스템(CMAKE_SYSTEM_NAME)이 iOS인 경우 1로 설정합니다."
	},
	"LIBRARY_OUTPUT_PATH": {
		"name": "LIBRARY_OUTPUT_PATH",
		"description": "이전 라이브러리 위치 변수입니다."
	},
	"LINUX": {
		"name": "LINUX",
		"description": "대상 시스템이 Linux인 경우 true로 설정합니다."
	},
	"MINGW": {
		"name": "MINGW",
		"description": "Windows의 GNU ABI(MinGW)를 대상으로 하는 컴파일러에서 하나 이상의 언어를 사용하도록 설정한 경우 true 값으로 설정합니다."
	},
	"MSVC": {
		"name": "MSVC",
		"description": "컴파일러가 Microsoft Visual C++의 특정 버전이거나 Visual C++ cl 명령줄 구문을 시뮬레이션하는 또 다른 컴파일러인 경우 true로 설정합니다."
	},
	"MSVC10": {
		"name": "MSVC10",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC11": {
		"name": "MSVC11",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC12": {
		"name": "MSVC12",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC14": {
		"name": "MSVC14",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC60": {
		"name": "MSVC60",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC70": {
		"name": "MSVC70",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC71": {
		"name": "MSVC71",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC80": {
		"name": "MSVC80",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC90": {
		"name": "MSVC90",
		"description": "권장되지 않는 명령어입니다. MSVC_VERSION 변수를 대신 사용하세요."
	},
	"MSVC_IDE": {
		"name": "MSVC_IDE",
		"description": "Microsoft Visual C++ IDE를 사용할 경우 True입니다."
	},
	"MSVC_TOOLSET_VERSION": {
		"name": "MSVC_TOOLSET_VERSION",
		"description": "사용 중인 Microsoft Visual C/C++의 도구 세트 버전입니다(있는 경우). 유사 MSVC가 사용되는 경우 이 변수는 MSVC_VERSION 변수를 통해 제공된 대로 컴파일러 버전에 따라 설정됩니다."
	},
	"MSVC_VERSION": {
		"name": "MSVC_VERSION",
		"description": "사용 중인 Microsoft Visual C/C++의 버전입니다(있는 경우). Visual C++를 시뮬레이션하는 컴파일러가 사용되는 경우 이 변수는 _MSC_VER 전처리기 정의를 통해 제공된 대로 시뮬레이션된 도구 세트 버전으로 설정됩니다."
	},
	"MSYS": {
		"name": "MSYS",
		"description": "MSYS Makefiles 생성기를 사용할 경우 True입니다."
	},
	"<PackageName>_ROOT": {
		"name": "<PackageName>_ROOT",
		"description": "find_package(<PackageName>) 호출은 <PackageName>_ROOT CMake 변수로 지정되는 접두사를 검색합니다. 여기서 <PackageName>은 find_package 호출에 지정된 (대/소문자가 유지된) 이름이고 _ROOT는 리터럴입니다. 예를 들어 find_package(Foo)는 Foo_ROOT CMake 변수(설정된 경우)에 지정된 접두사를 검색합니다. 정책 CMP0074를 참조하세요."
	},
	"<PROJECT-NAME>_BINARY_DIR": {
		"name": "<PROJECT-NAME>_BINARY_DIR",
		"description": "명명된 프로젝트의 최상위 이진 디렉터리입니다."
	},
	"<PROJECT-NAME>_DESCRIPTION": {
		"name": "<PROJECT-NAME>_DESCRIPTION",
		"description": "프로젝트 이름 <PROJECT-NAME>를 사용하는 프로젝트 명령에 대한 가장 최근 호출의 DESCRIPTION 옵션에 제공된 값입니다(있는 경우)."
	},
	"<PROJECT-NAME>_HOMEPAGE_URL": {
		"name": "<PROJECT-NAME>_HOMEPAGE_URL",
		"description": "프로젝트 이름 <PROJECT-NAME>를 사용하는 프로젝트 명령에 대한 가장 최근 호출의 HOMEPAGE_URL 옵션에 제공된 값입니다(있는 경우)."
	},
	"<PROJECT-NAME>_IS_TOP_LEVEL": {
		"name": "<PROJECT-NAME>_IS_TOP_LEVEL",
		"description": "명명된 프로젝트가 최상위 CMakeLists.txt 파일에서 호출되었는지 여부를 나타내는 부울 변수입니다."
	},
	"<PROJECT-NAME>_SOURCE_DIR": {
		"name": "<PROJECT-NAME>_SOURCE_DIR",
		"description": "명명된 프로젝트의 최상위 소스 디렉터리입니다."
	},
	"<PROJECT-NAME>_VERSION": {
		"name": "<PROJECT-NAME>_VERSION",
		"description": "프로젝트 이름 <PROJECT-NAME>를 사용하는 프로젝트 명령에 대한 가장 최근 호출의 VERSION 옵션에 제공된 값입니다(있는 경우)."
	},
	"<PROJECT-NAME>_VERSION_MAJOR": {
		"name": "<PROJECT-NAME>_VERSION_MAJOR",
		"description": "프로젝트 명령으로 설정된 <PROJECT-NAME>_VERSION 변수의 첫 번째 버전 번호 구성 요소입니다."
	},
	"<PROJECT-NAME>_VERSION_MINOR": {
		"name": "<PROJECT-NAME>_VERSION_MINOR",
		"description": "프로젝트 명령으로 설정된 <PROJECT-NAME>_VERSION 변수의 두 번째 버전 번호 구성 요소입니다."
	},
	"<PROJECT-NAME>_VERSION_PATCH": {
		"name": "<PROJECT-NAME>_VERSION_PATCH",
		"description": "프로젝트 명령으로 설정된 <PROJECT-NAME>_VERSION 변수의 세 번째 버전 번호 구성 요소입니다."
	},
	"<PROJECT-NAME>_VERSION_TWEAK": {
		"name": "<PROJECT-NAME>_VERSION_TWEAK",
		"description": "프로젝트 명령으로 설정된 <PROJECT-NAME>_VERSION 변수의 4번째 버전 번호 구성 요소입니다."
	},
	"PROJECT_BINARY_DIR": {
		"name": "PROJECT_BINARY_DIR",
		"description": "프로젝트 빌드 디렉터리의 전체 경로입니다."
	},
	"PROJECT_DESCRIPTION": {
		"name": "PROJECT_DESCRIPTION",
		"description": "프로젝트 명령에 제공된 짧은 프로젝트 설명입니다."
	},
	"PROJECT_HOMEPAGE_URL": {
		"name": "PROJECT_HOMEPAGE_URL",
		"description": "프로젝트의 홈페이지 URL입니다."
	},
	"PROJECT_IS_TOP_LEVEL": {
		"name": "PROJECT_IS_TOP_LEVEL",
		"description": "현재 범위 이상에서 가장 최근에 호출된 프로젝트 명령이 최상위 CMakeLists.txt 파일에 있는지 여부를 나타내는 부울 변수입니다."
	},
	"PROJECT_NAME": {
		"name": "PROJECT_NAME",
		"description": "프로젝트 명령에 제공된 프로젝트 이름입니다."
	},
	"PROJECT_SOURCE_DIR": {
		"name": "PROJECT_SOURCE_DIR",
		"description": "현재 디렉터리 범위 또는 해당 부모 중 하나에서 수행된 프로젝트 명령에 대한 마지막 호출의 소스 디렉터리입니다. 이는 자식 디렉터리 범위 내(즉, 현재 범위의 add_subdirectory 호출 내)에서 수행된 프로젝트 호출의 영향을 받지 않습니다."
	},
	"PROJECT_VERSION": {
		"name": "PROJECT_VERSION",
		"description": "프로젝트 명령에 대한 가장 최근 호출의 VERSION 옵션에 제공된 값입니다(있는 경우)."
	},
	"PROJECT_VERSION_MAJOR": {
		"name": "PROJECT_VERSION_MAJOR",
		"description": "프로젝트 명령으로 설정된 PROJECT_VERSION 변수의 첫 번째 버전 번호 구성 요소입니다."
	},
	"PROJECT_VERSION_MINOR": {
		"name": "PROJECT_VERSION_MINOR",
		"description": "프로젝트 명령으로 설정된 PROJECT_VERSION 변수의 두 번째 버전 번호 구성 요소입니다."
	},
	"PROJECT_VERSION_PATCH": {
		"name": "PROJECT_VERSION_PATCH",
		"description": "프로젝트 명령으로 설정된 PROJECT_VERSION 변수의 세 번째 버전 번호 구성 요소입니다."
	},
	"PROJECT_VERSION_TWEAK": {
		"name": "PROJECT_VERSION_TWEAK",
		"description": "프로젝트 명령으로 설정된 PROJECT_VERSION 변수의 4번째 버전 번호 구성 요소입니다."
	},
	"UNIX": {
		"name": "UNIX",
		"description": "대상 시스템이 UNIX 또는 유사 UNIX(예: APPLE 및 CYGWIN)인 경우 True로 설정합니다. 대상 시스템의 더 구체적으로 이해해야 하면 CMAKE_SYSTEM_NAME 변수를 쿼리해야 합니다."
	},
	"WIN32": {
		"name": "WIN32",
		"description": "대상 시스템이 Win64를 포함한 Windows인 경우 True로 설정합니다."
	},
	"WINCE": {
		"name": "WINCE",
		"description": "CMAKE_SYSTEM_NAME 변수가 WindowsCE로 설정된 경우 True입니다."
	},
	"WINDOWS_PHONE": {
		"name": "WINDOWS_PHONE",
		"description": "CMAKE_SYSTEM_NAME 변수가 WindowsPhone으로 설정된 경우 True입니다."
	},
	"WINDOWS_STORE": {
		"name": "WINDOWS_STORE",
		"description": "CMAKE_SYSTEM_NAME 변수가 WindowsStore로 설정된 경우 True입니다."
	},
	"XCODE": {
		"name": "XCODE",
		"description": "Xcode 생성기를 사용할 경우 True입니다."
	},
	"XCODE_VERSION": {
		"name": "XCODE_VERSION",
		"description": "Xcode 버전입니다(Xcode 생성기만 해당)."
	},
	"ADVANCED": {
		"name": "ADVANCED",
		"description": "GUI에서 기본적으로 항목을 숨겨야 하는 경우 True입니다."
	},
	"HELPSTRING": {
		"name": "HELPSTRING",
		"description": "GUI의 항목과 연결된 도움말입니다."
	},
	"MODIFIED": {
		"name": "MODIFIED",
		"description": "내부 관리 속성입니다. 설정하거나 가져오지 마세요."
	},
	"STRINGS": {
		"name": "STRINGS",
		"description": "GUI 선택을 위한 가능한 STRING 항목 값을 열거합니다."
	},
	"TYPE": {
		"name": "TYPE",
		"description": "GUI에 있는 항목의 위젯 형식입니다."
	},
	"VALUE": {
		"name": "VALUE",
		"description": "캐시 항목의 값입니다."
	},
	"ADDITIONAL_CLEAN_FILES": {
		"name": "ADDITIONAL_CLEAN_FILES",
		"description": "전역 정리 대상의 일부로 제거되는 파일 또는 디렉터리의 세미콜론으로 구분된 목록입니다. 여러 대상 또는 CMake 자체에서 사용하는 생성된 파일이나 디렉터리 또는 사용자 지정 명령의 출력이나 생성 항목으로 캡처할 수 없게 생성되는 파일 또는 디렉터리를 지정하는 데 유용합니다."
	},
	"ADDITIONAL_MAKE_CLEAN_FILES": {
		"name": "ADDITIONAL_MAKE_CLEAN_FILES",
		"description": "clean 스테이지 중에 제거할 추가 파일입니다."
	},
	"BINARY_DIR": {
		"name": "BINARY_DIR",
		"description": "이 읽기 전용 디렉터리 속성은 읽은 소스에 해당하는 이진 디렉터리의 절대 경로를 보고합니다."
	},
	"BUILDSYSTEM_TARGETS": {
		"name": "BUILDSYSTEM_TARGETS",
		"description": "이 읽기 전용 디렉터리 속성에는 add_library, add_executable 및 add_custom_target 명령 호출을 통해 디렉터리에 추가되는 빌드 시스템 대상의 세미콜론으로 구분된 목록이 포함됩니다. 이 목록에는 가져온 대상 또는 별칭 대상이 포함되지 않지만 인터페이스 라이브러리는 포함됩니다. 목록의 각 항목은 대상의 논리적 이름이고 get_property 명령 TARGET 옵션에 전달할 수 있습니다."
	},
	"CACHE_VARIABLES": {
		"name": "CACHE_VARIABLES",
		"description": "현재 디렉터리에서 사용할 수 있는 캐시 변수 목록입니다."
	},
	"CLEAN_NO_CUSTOM": {
		"name": "CLEAN_NO_CUSTOM",
		"description": "make clean 작업 중에 이 디렉터리에 대한 사용자 지정 명령의 출력을 제거하지 않도록 Makefile 생성기에 지시하려면 true로 설정합니다. 이 항목은 구현할 수 없으므로 다른 생성기에서는 무시됩니다."
	},
	"CMAKE_CONFIGURE_DEPENDS": {
		"name": "CMAKE_CONFIGURE_DEPENDS",
		"description": "구성 프로세스의 추가 입력 파일에 대해 CMake에 알립니다. 명명된 파일이 수정되면 빌드 시스템은 CMake를 다시 실행하여 파일을 다시 구성하고 빌드 시스템을 다시 생성합니다."
	},
	"COMPILE_DEFINITIONS": {
		"name": "COMPILE_DEFINITIONS",
		"description": "디렉터리의 소스를 컴파일하기 위한 전처리기 정의입니다."
	},
	"COMPILE_DEFINITIONS_<CONFIG>": {
		"name": "COMPILE_DEFINITIONS_<CONFIG>",
		"description": "무시됩니다. CMake 정책 CMP0043을 참조하세요."
	},
	"COMPILE_OPTIONS": {
		"name": "COMPILE_OPTIONS",
		"description": "컴파일러에 전달할 옵션 목록입니다."
	},
	"DEFINITIONS": {
		"name": "DEFINITIONS",
		"description": "CMake 2.4 호환성에만 해당합니다. COMPILE_DEFINITIONS를 대신 사용하세요."
	},
	"EXCLUDE_FROM_ALL": {
		"name": "EXCLUDE_FROM_ALL",
		"description": "하위 디렉터리에서 이 디렉터리 속성을 true 값으로 설정하여 상위 항목의 \"모든\" 대상에서 해당 대상을 제외합니다. 제외된 경우 부모 디렉터리에서 예를 들어 make를 실행해도 기본적으로 하위 디렉터리의 대상이 빌드되지 않습니다. 해당 설정이 하위 디렉터리 자체의 \"모든\" 대상에 영향을 주지는 않습니다. 하위 디렉터리 내부에서 예를 들어 make를 실행하면 해당 대상이 계속 빌드됩니다."
	},
	"IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": {
		"name": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM",
		"description": "디렉터리에서 종속성에 대한 #include 줄 변환을 지정합니다."
	},
	"IMPORTED_TARGETS": {
		"name": "IMPORTED_TARGETS",
		"description": "이 읽기 전용 디렉터리 속성에는 add_library 및 add_executable 명령을 호출하여 디렉터리에 추가된 가져온 대상의 세미콜론으로 구분된 목록이 포함되어 있습니다. 목록의 각 항목은 대상의 논리적 이름이며 동일한 디렉토리에서 호출될 때 get_property 명령 TARGET 옵션에 전달하기에 적합합니다."
	},
	"INCLUDE_DIRECTORIES": {
		"name": "INCLUDE_DIRECTORIES",
		"description": "전처리기 포함 파일 검색 디렉터리 목록입니다."
	},
	"INCLUDE_REGULAR_EXPRESSION": {
		"name": "INCLUDE_REGULAR_EXPRESSION",
		"description": "정규식을 검색하는 포함 파일입니다."
	},
	"INTERPROCEDURAL_OPTIMIZATION": {
		"name": "INTERPROCEDURAL_OPTIMIZATION",
		"description": "이 디렉터리 속성이 더 이상 존재하지 않습니다."
	},
	"INTERPROCEDURAL_OPTIMIZATION_<CONFIG>": {
		"name": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
		"description": "이 디렉터리 속성이 더 이상 존재하지 않습니다."
	},
	"LABELS": {
		"name": "LABELS",
		"description": "디렉터리 및 모든 하위 디렉터리와 연결된 텍스트 레이블 목록을 지정합니다. 이는 현재 디렉터리와 하위 디렉터리에 있는 모든 대상 및 테스트에서 LABELS 대상 속성과 LABELS 테스트 속성을 설정하는 것과 같습니다. 참고: 대상에 레이블을 전파하려면 시작 관리자를 사용하도록 설정해야 합니다."
	},
	"LINK_DIRECTORIES": {
		"name": "LINK_DIRECTORIES",
		"description": "링커 검색 디렉터리 목록입니다."
	},
	"LINK_OPTIONS": {
		"name": "LINK_OPTIONS",
		"description": "공유 라이브러리, 모듈 및 실행 파일 대상의 링크 단계와 디바이스 링크 단계에 사용할 옵션 목록입니다."
	},
	"LISTFILE_STACK": {
		"name": "LISTFILE_STACK",
		"description": "처리 중인 listfile의 현재 스택입니다."
	},
	"MACROS": {
		"name": "MACROS",
		"description": "현재 디렉터리에서 사용할 수 있는 매크로 명령 목록입니다."
	},
	"PARENT_DIRECTORY": {
		"name": "PARENT_DIRECTORY",
		"description": "현재 하위 디렉터리를 추가한 소스 디렉터리입니다."
	},
	"RULE_LAUNCH_COMPILE": {
		"name": "RULE_LAUNCH_COMPILE",
		"description": "컴파일 규칙의 시작 관리자를 지정합니다."
	},
	"RULE_LAUNCH_CUSTOM": {
		"name": "RULE_LAUNCH_CUSTOM",
		"description": "사용자 지정 규칙의 시작 관리자를 지정합니다."
	},
	"RULE_LAUNCH_LINK": {
		"name": "RULE_LAUNCH_LINK",
		"description": "링크 규칙의 시작 관리자를 지정합니다."
	},
	"SOURCE_DIR": {
		"name": "SOURCE_DIR",
		"description": "이 읽기 전용 디렉터리 속성은 읽은 소스 디렉터리의 절대 경로를 보고합니다."
	},
	"SUBDIRECTORIES": {
		"name": "SUBDIRECTORIES",
		"description": "이 읽기 전용 디렉터리 속성에는 지금까지 add_subdirectory 또는 subdirs 명령을 통해 처리된 하위 디렉터리의 세미콜론으로 구분된 목록이 포함됩니다. 각 항목은 CMakeLists.txt 파일이 포함된 소스 디렉터리의 절대 경로입니다. 이 속성은 get_property 명령 DIRECTORY 옵션에 전달할 수 있습니다."
	},
	"SYSTEM": {
		"name": "SYSTEM",
		"description": "이 디렉터리 속성은 해당 디렉터리에 생성된 가져오지 않은 대상에 대한 SYSTEM 대상 속성을 초기화하는 데 사용됩니다. SYSTEM 옵션이 add_subdirectory 및 FetchContent_Declare에 대한 인수로 제공되면 해당 명령에 의해 true로 설정됩니다."
	},
	"TESTS": {
		"name": "TESTS",
		"description": "테스트 목록입니다."
	},
	"TEST_INCLUDE_FILE": {
		"name": "TEST_INCLUDE_FILE",
		"description": "사용되지 않는 명령어입니다. TEST_INCLUDE_FILES를 대신 사용하세요."
	},
	"TEST_INCLUDE_FILES": {
		"name": "TEST_INCLUDE_FILES",
		"description": "ctest를 실행할 때 포함할 cmake 파일 목록입니다."
	},
	"VARIABLES": {
		"name": "VARIABLES",
		"description": "현재 디렉터리에 정의된 변수 목록입니다."
	},
	"VS_GLOBAL_SECTION_POST_<section>": {
		"name": "VS_GLOBAL_SECTION_POST_<section>",
		"description": "Visual Studio에서 postSolution 전역 섹션을 지정합니다."
	},
	"VS_GLOBAL_SECTION_PRE_<section>": {
		"name": "VS_GLOBAL_SECTION_PRE_<section>",
		"description": "Visual Studio에서 preSolution 전역 섹션을 지정합니다."
	},
	"VS_STARTUP_PROJECT": {
		"name": "VS_STARTUP_PROJECT",
		"description": "Visual Studio 솔루션에서 기본 시작 프로젝트를 지정합니다."
	},
	"ALLOW_DUPLICATE_CUSTOM_TARGETS": {
		"name": "ALLOW_DUPLICATE_CUSTOM_TARGETS",
		"description": "중복 사용자 지정 대상을 만들도록 허용합니다."
	},
	"AUTOGEN_SOURCE_GROUP": {
		"name": "AUTOGEN_SOURCE_GROUP",
		"description": "AUTOMOC, AUTORCC 및 AUTOUIC 생성 파일의 source_group 이름입니다."
	},
	"AUTOGEN_TARGETS_FOLDER": {
		"name": "AUTOGEN_TARGETS_FOLDER",
		"description": "AUTOMOC를 사용할 수 있는 대상에 대해 CMake에 의해 자동으로 추가되는 *_autogen 대상의 폴더 이름입니다."
	},
	"AUTOMOC_SOURCE_GROUP": {
		"name": "AUTOMOC_SOURCE_GROUP",
		"description": "AUTOMOC 생성 파일의 source_group 이름입니다."
	},
	"AUTOMOC_TARGETS_FOLDER": {
		"name": "AUTOMOC_TARGETS_FOLDER",
		"description": "AUTOMOC를 사용할 수 있는 대상에 대해 CMake에 의해 자동으로 추가되는 *_autogen 대상의 폴더 이름입니다."
	},
	"AUTORCC_SOURCE_GROUP": {
		"name": "AUTORCC_SOURCE_GROUP",
		"description": "AUTORCC 생성 파일의 source_group 이름입니다."
	},
	"AUTOUIC_SOURCE_GROUP": {
		"name": "AUTOUIC_SOURCE_GROUP",
		"description": "AUTOUIC 생성 파일의 source_group 이름입니다."
	},
	"CMAKE_CUDA_KNOWN_FEATURES": {
		"name": "CMAKE_CUDA_KNOWN_FEATURES",
		"description": "해당CMake 버전에서 인식되는 CUDA 기능 목록입니다."
	},
	"CMAKE_CXX_KNOWN_FEATURES": {
		"name": "CMAKE_CXX_KNOWN_FEATURES",
		"description": "이 CMake 버전에서 인식되는 C++ 기능 목록입니다."
	},
	"CMAKE_C_KNOWN_FEATURES": {
		"name": "CMAKE_C_KNOWN_FEATURES",
		"description": "이 CMake 버전에서 인식되는 C 기능 목록입니다."
	},
	"CMAKE_HIP_KNOWN_FEATURES": {
		"name": "CMAKE_HIP_KNOWN_FEATURES",
		"description": "이 버전의 CMake에 알려진 HIP 기능 목록입니다."
	},
	"CMAKE_ROLE": {
		"name": "CMAKE_ROLE",
		"description": "현재 스크립트가 실행되는 모드를 알립니다. 다음과 같은 여러 가지 값 중 하나를 사용할 수 있습니다."
	},
	"DEBUG_CONFIGURATIONS": {
		"name": "DEBUG_CONFIGURATIONS",
		"description": "디버깅에 해당하는 구성을 지정합니다."
	},
	"DISABLED_FEATURES": {
		"name": "DISABLED_FEATURES",
		"description": "CMake 실행 중에 사용하지 않도록 설정된 기능 목록입니다."
	},
	"ECLIPSE_EXTRA_CPROJECT_CONTENTS": {
		"name": "ECLIPSE_EXTRA_CPROJECT_CONTENTS",
		"description": "생성된 Eclipse cproject 파일에 삽입할 추가 콘텐츠입니다."
	},
	"ECLIPSE_EXTRA_NATURES": {
		"name": "ECLIPSE_EXTRA_NATURES",
		"description": "생성된 Eclipse 프로젝트 파일에 추가할 특성 목록입니다."
	},
	"ENABLED_FEATURES": {
		"name": "ENABLED_FEATURES",
		"description": "CMake 실행 중에 사용하도록 설정된 기능 목록입니다."
	},
	"ENABLED_LANGUAGES": {
		"name": "ENABLED_LANGUAGES",
		"description": "현재 사용할 수 있는 언어 목록을 포함하는 읽기 전용 속성입니다."
	},
	"FIND_LIBRARY_USE_LIB32_PATHS": {
		"name": "FIND_LIBRARY_USE_LIB32_PATHS",
		"description": "find_library 명령이 lib32 디렉터리를 자동으로 검색해야 하는지 여부를 나타냅니다."
	},
	"FIND_LIBRARY_USE_LIB64_PATHS": {
		"name": "FIND_LIBRARY_USE_LIB64_PATHS",
		"description": "find_library가 lib64 디렉터리를 자동으로 검색해야 하는지 여부를 나타냅니다."
	},
	"FIND_LIBRARY_USE_LIBX32_PATHS": {
		"name": "FIND_LIBRARY_USE_LIBX32_PATHS",
		"description": "find_library 명령이 libx32 디렉터리를 자동으로 검색해야 하는지 여부를 나타냅니다."
	},
	"FIND_LIBRARY_USE_OPENBSD_VERSIONING": {
		"name": "FIND_LIBRARY_USE_OPENBSD_VERSIONING",
		"description": "find_library가 OpenBSD 스타일 공유 라이브러리를 찾아야 하는지 여부를 나타냅니다."
	},
	"GENERATOR_IS_MULTI_CONFIG": {
		"name": "GENERATOR_IS_MULTI_CONFIG",
		"description": "다중 구성 생성기에서 true인 읽기 전용 속성입니다."
	},
	"GLOBAL_DEPENDS_DEBUG_MODE": {
		"name": "GLOBAL_DEPENDS_DEBUG_MODE",
		"description": "전역 대상 종속성 그래프 디버그 모드를 사용하도록 설정합니다."
	},
	"GLOBAL_DEPENDS_NO_CYCLES": {
		"name": "GLOBAL_DEPENDS_NO_CYCLES",
		"description": "전역 대상 종속성 그래프 주기를 허용하지 않습니다."
	},
	"INSTALL_PARALLEL": {
		"name": "INSTALL_PARALLEL",
		"description": "Ninja 생성기에 대한 병렬 설치 옵션을 활성화합니다."
	},
	"IN_TRY_COMPILE": {
		"name": "IN_TRY_COMPILE",
		"description": "try-compile 구성 중에 true인 읽기 전용 속성입니다."
	},
	"JOB_POOLS": {
		"name": "JOB_POOLS",
		"description": "Ninja만 해당: 사용 가능한 풀 목록입니다."
	},
	"PACKAGES_FOUND": {
		"name": "PACKAGES_FOUND",
		"description": "CMake 실행 중에 발견된 패키지 목록입니다."
	},
	"PACKAGES_NOT_FOUND": {
		"name": "PACKAGES_NOT_FOUND",
		"description": "CMake 실행 중에 발견되지 않은 패키지 목록입니다."
	},
	"PREDEFINED_TARGETS_FOLDER": {
		"name": "PREDEFINED_TARGETS_FOLDER",
		"description": "CMake에서 자동으로 추가하는 대상의 FOLDER 이름입니다."
	},
	"PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE": {
		"name": "PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE",
		"description": "이 전역 속성을 true로 설정하면 CMAKE_PROJECT_TOP_LEVEL_INCLUDES 변수가 전체 프로젝트 서명을 사용하는 try_compile 호출로 전파됩니다. 원본 파일 서명에 대한 호출은 이 속성의 영향을 받지 않습니다. PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE이 기본적으로 설정되지 않습니다."
	},
	"REPORT_UNDEFINED_PROPERTIES": {
		"name": "REPORT_UNDEFINED_PROPERTIES",
		"description": "설정될 경우 이 파일에 대한 정의되지 않은 모든 속성을 보고합니다."
	},
	"RULE_MESSAGES": {
		"name": "RULE_MESSAGES",
		"description": "각 만들기 규칙의 메시지를 보고할지 여부를 지정합니다."
	},
	"TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": {
		"name": "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS",
		"description": "공유 라이브러리의 이름을 보관 파일처럼 지정할 수 있는지 여부를 설정합니다."
	},
	"TARGET_MESSAGES": {
		"name": "TARGET_MESSAGES",
		"description": "각 대상의 완료를 보고할지 여부를 지정합니다."
	},
	"TARGET_SUPPORTS_SHARED_LIBS": {
		"name": "TARGET_SUPPORTS_SHARED_LIBS",
		"description": "대상 플랫폼 지원 공유 라이브러리를 수행합니다."
	},
	"USE_FOLDERS": {
		"name": "USE_FOLDERS",
		"description": "FOLDER 대상 속성을 사용하여 대상을 폴더로 구성할지 여부를 제어합니다. 최상위 CMakeLists.txt 파일의 끝에 있는 USE_FOLDERS 값이 동작을 결정합니다."
	},
	"XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": {
		"name": "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME",
		"description": "Xcode 생성기를 통한 EFFECTIVE_PLATFORM_NAME 내보내기를 제어합니다."
	},
	"CPACK_DESKTOP_SHORTCUTS": {
		"name": "CPACK_DESKTOP_SHORTCUTS",
		"description": "이 파일의 바탕 화면에서 만들어야 하는 바로 가기 이름 목록을 지정합니다."
	},
	"CPACK_NEVER_OVERWRITE": {
		"name": "CPACK_NEVER_OVERWRITE",
		"description": "설치 또는 재설치 시 이 파일을 덮어쓰지 않도록 요청합니다."
	},
	"CPACK_PERMANENT": {
		"name": "CPACK_PERMANENT",
		"description": "제거 시 이 파일을 제거하지 않도록 요청합니다."
	},
	"CPACK_STARTUP_SHORTCUTS": {
		"name": "CPACK_STARTUP_SHORTCUTS",
		"description": "이 파일의 시작 폴더에서 만들어야 하는 바로 가기 이름 목록을 지정합니다."
	},
	"CPACK_START_MENU_SHORTCUTS": {
		"name": "CPACK_START_MENU_SHORTCUTS",
		"description": "이 파일의 시작 메뉴에서 만들어야 하는 바로 가기 이름 목록을 지정합니다."
	},
	"CPACK_WIX_ACL": {
		"name": "CPACK_WIX_ACL",
		"description": "WiX 설치 관리자를 통해 설치된 파일 또는 디렉터리의 액세스 권한을 지정합니다."
	},
	"ABSTRACT": {
		"name": "ABSTRACT",
		"description": "이 소스 파일이 추상 클래스인지 여부입니다."
	},
	"AUTORCC_OPTIONS": {
		"name": "AUTORCC_OPTIONS",
		"description": "AUTORCC를 사용하는 경우 rcc에 대한 추가 옵션"
	},
	"AUTOUIC_OPTIONS": {
		"name": "AUTOUIC_OPTIONS",
		"description": "AUTOUIC를 사용하는 경우 uic에 대한 추가 옵션"
	},
	"COMPILE_FLAGS": {
		"name": "COMPILE_FLAGS",
		"description": "해당 소스 파일을 컴파일할 때 추가되는 플래그입니다."
	},
	"CXX_SCAN_FOR_MODULES": {
		"name": "CXX_SCAN_FOR_MODULES",
		"description": "CXX_SCAN_FOR_MODULES는 CMake가 원본에서 C++ 모듈 종속성을 검색할지 여부를 지정하는 부울입니다. 대상 전체 설정에 대한 CXX_SCAN_FOR_MODULES도 참조하세요."
	},
	"EXTERNAL_OBJECT": {
		"name": "EXTERNAL_OBJECT",
		"description": "true로 설정될 경우 개체 파일입니다."
	},
	"Fortran_FORMAT": {
		"name": "Fortran_FORMAT",
		"description": "Fortran 소스 레이아웃을 나타내려면 FIXED 또는 FREE로 설정합니다."
	},
	"Fortran_PREPROCESS": {
		"name": "Fortran_PREPROCESS",
		"description": "Fortran 소스 파일을 무조건 전처리해야 하는지 여부를 제어합니다."
	},
	"GENERATED": {
		"name": "GENERATED",
		"description": "이 소스 파일이 빌드 또는 CMake 프로세스의 일부로 생성되는지 여부입니다."
	},
	"HEADER_FILE_ONLY": {
		"name": "HEADER_FILE_ONLY",
		"description": "이 소스 파일이 헤더 파일일 뿐인지 여부입니다."
	},
	"KEEP_EXTENSION": {
		"name": "KEEP_EXTENSION",
		"description": "출력 파일에 소스 파일과 동일한 확장명이 포함되도록 합니다."
	},
	"LANGUAGE": {
		"name": "LANGUAGE",
		"description": "소스 파일이 작성되는 프로그래밍 언어를 지정합니다."
	},
	"LOCATION": {
		"name": "LOCATION",
		"description": "소스 파일의 전체 경로입니다."
	},
	"MACOSX_PACKAGE_LOCATION": {
		"name": "MACOSX_PACKAGE_LOCATION",
		"description": "애플리케이션 번들(MACOSX_BUNDLE), 코어 파운데이션 번들(BUNDLE) 또는 프레임워크 번들(FRAMEWORK) 내부에 소스 파일을 배치합니다. macOS 및 iOS에 적용할 수 있습니다."
	},
	"OBJECT_DEPENDS": {
		"name": "OBJECT_DEPENDS",
		"description": "컴파일된 개체 파일이 사용하는 추가 파일입니다."
	},
	"OBJECT_OUTPUTS": {
		"name": "OBJECT_OUTPUTS",
		"description": "Ninja 또는 Makefile 생성기 규칙의 추가 출력입니다."
	},
	"SKIP_AUTOGEN": {
		"name": "SKIP_AUTOGEN",
		"description": "AUTOMOC, AUTOUIC 및 AUTORCC 처리에서 소스 파일을 제외합니다(Qt 프로젝트의 경우)."
	},
	"SKIP_AUTOMOC": {
		"name": "SKIP_AUTOMOC",
		"description": "AUTOMOC 처리에서 소스 파일을 제외합니다(Qt 프로젝트의 경우)."
	},
	"SKIP_AUTORCC": {
		"name": "SKIP_AUTORCC",
		"description": "AUTORCC 처리에서 소스 파일을 제외합니다(Qt 프로젝트의 경우)."
	},
	"SKIP_AUTOUIC": {
		"name": "SKIP_AUTOUIC",
		"description": "AUTOUIC 처리에서 소스 파일을 제외합니다(Qt 프로젝트의 경우)."
	},
	"SKIP_LINTING": {
		"name": "SKIP_LINTING",
		"description": "이 속성을 사용하면 Linting 프로세스에서 특정 소스 파일을 제외할 수 있습니다. linting 프로세스에는 소스 파일에서 <LANG>_CPPLINT, <LANG>_CLANG_TIDY, <LANG>_CPPCHECK 및 <LANG>_INCLUDE_WHAT_YOU_USE 같은 도구를 실행하고 헤더 파일을 VERIFY_INTERFACE_HEADER_SETS 일부로 컴파일하는 작업이 포함됩니다. 소스 파일에서 SKIP_LINTING 설정하면 언급된 linting 도구가 해당 특정 파일에 대해 실행되지 않습니다."
	},
	"SKIP_PRECOMPILE_HEADERS": {
		"name": "SKIP_PRECOMPILE_HEADERS",
		"description": "PRECOMPILE_HEADERS 기능으로 건너뛴 해당 소스 파일입니다."
	},
	"SKIP_UNITY_BUILD_INCLUSION": {
		"name": "SKIP_UNITY_BUILD_INCLUSION",
		"description": "이 속성을 true로 설정하면 연결된 대상의 UNITY_BUILD 속성이 true로 설정된 경우 unity 빌드가 소스 파일을 건너뛰게 됩니다. 대신, 소스 파일은 Unity 빌드를 사용하지 않는 경우와 동일한 방식으로 자동으로 컴파일됩니다."
	},
	"Swift_DEPENDENCIES_FILE": {
		"name": "Swift_DEPENDENCIES_FILE",
		"description": "이 속성은 소스에 대한 Swift 종속성 파일(swiftdeps)의 경로를 설정합니다. 지정하지 않으면 기본적으로 <OBJECT>.swiftdeps로 설정됩니다."
	},
	"Swift_DIAGNOSTICS_FILE": {
		"name": "Swift_DIAGNOSTICS_FILE",
		"description": "이 속성은 Swift 진단이 직렬화되는 위치를 제어합니다."
	},
	"SYMBOLIC": {
		"name": "SYMBOLIC",
		"description": "규칙의 이름일 뿐인지 여부입니다."
	},
	"UNITY_GROUP": {
		"name": "UNITY_GROUP",
		"description": "이 속성은 UNITY_BUILD_MODE가 GROUP으로 설정된 경우 소스가 포함될 버킷을 제어합니다."
	},
	"VS_COPY_TO_OUT_DIR": {
		"name": "VS_COPY_TO_OUT_DIR",
		"description": "Visual Studio 프로젝트 파일에서 소스 파일의 <CopyToOutputDirectory> 태그를 설정합니다. 유효한 값은 Never, Always 및 PreserveNewest입니다."
	},
	"VS_CSHARP_<tagname>": {
		"name": "VS_CSHARP_<tagname>",
		"description": "Visual Studio 및 CSharp 소스 파일별 구성입니다."
	},
	"VS_DEPLOYMENT_CONTENT": {
		"name": "VS_DEPLOYMENT_CONTENT",
		"description": "Visual Studio 생성기 <cmake-generators(7)>를 사용하여 빌드될 때 Windows Phone 또는 Windows 스토어 애플리케이션과 함께 배포할 콘텐츠로 소스 파일을 표시합니다. 해당 값은 1 또는 0으로 평가되어야 하고 생성기 식 <cmake-generator-expressions(7)>를 사용하여 빌드 구성에 따라 선택할 수 있습니다. 소스 파일의 .vcxproj 파일 항목은 각각 값 1 또는 0에 대해 DeploymentContent 또는 ExcludedFromBuild로 표시됩니다."
	},
	"VS_DEPLOYMENT_LOCATION": {
		"name": "VS_DEPLOYMENT_LOCATION",
		"description": "Visual Studio 생성기 <cmake-generators(7)>를 사용하여 빌드될 때 Windows Phone 또는 Windows 스토어 애플리케이션과 함께 콘텐츠 소스 파일의 배포 위치를 지정합니다. 이 속성은 VS_DEPLOYMENT_CONTENT를 사용할 경우에만 적용할 수 있습니다. 값은 앱 패키지의 상대 경로를 나타내고 모든 구성에 적용됩니다."
	},
	"VS_INCLUDE_IN_VSIX": {
		"name": "VS_INCLUDE_IN_VSIX",
		"description": "파일이 VSIX(Visual Studio Integration Extension) 확장 패키지에 포함되어야 하는지 여부를 지정하는 부울 속성입니다. 해당 속성은 Visual Studio 확장 개발에 필요합니다."
	},
	"VS_RESOURCE_GENERATOR": {
		"name": "VS_RESOURCE_GENERATOR",
		"description": "이 속성을 통해 이 파일에서 사용할 리소스 생성기를 지정할 수 있습니다. 이 속성을 설정하지 않으면 기본값인 PublicResXFileCodeGenerator로 설정됩니다."
	},
	"VS_SETTINGS": {
		"name": "VS_SETTINGS",
		"description": "파일에 항목 메타데이터를 설정합니다."
	},
	"VS_SHADER_DISABLE_OPTIMIZATIONS": {
		"name": "VS_SHADER_DISABLE_OPTIMIZATIONS",
		"description": ".hlsl 소스 파일의 컴파일러 최적화를 사용하지 않도록 설정합니다. 이 속성은 -Od 플래그를 FxCompiler 도구의 명령줄에 추가합니다. 이 속성을 통해 컴파일러 최적화를 사용하지 않도록 설정하려면 true 값을 지정합니다."
	},
	"VS_SHADER_ENABLE_DEBUG": {
		"name": "VS_SHADER_ENABLE_DEBUG",
		"description": ".hlsl 소스 파일의 디버깅 정보를 사용하도록 설정합니다. 이 속성은 -Zi 플래그를 FxCompiler 도구의 명령줄에 추가합니다. 컴파일된 셰이더의 디버깅 정보를 생성하려면 true 값을 지정합니다."
	},
	"VS_SHADER_ENTRYPOINT": {
		"name": "VS_SHADER_ENTRYPOINT",
		"description": ".hlsl 소스 파일 셰이더의 진입점 이름을 지정합니다."
	},
	"VS_SHADER_FLAGS": {
		"name": "VS_SHADER_FLAGS",
		"description": ".hlsl 소스 파일의 추가 Visual Studio 셰이더 플래그를 설정합니다."
	},
	"VS_SHADER_MODEL": {
		"name": "VS_SHADER_MODEL",
		"description": ".hlsl 소스 파일의 셰이더 모델을 지정합니다. 일부 셰이더 형식은 최신 셰이더 모델과만 사용할 수 있습니다."
	},
	"VS_SHADER_OBJECT_FILE_NAME": {
		"name": "VS_SHADER_OBJECT_FILE_NAME",
		"description": ".hlsl 소스 파일용으로 컴파일된 셰이더 개체 파일의 파일 이름을 지정합니다. 이 항목은 FxCompiler 도구의 명령줄에 -Fo 플래그를 추가합니다."
	},
	"VS_SHADER_OUTPUT_HEADER_FILE": {
		"name": "VS_SHADER_OUTPUT_HEADER_FILE",
		"description": ".hlsl 소스 파일의 개체 코드를 포함하는 출력 헤더 파일의 파일 이름을 설정합니다."
	},
	"VS_SHADER_TYPE": {
		"name": "VS_SHADER_TYPE",
		"description": ".hlsl 소스 파일의 Visual Studio 셰이더 형식을 설정합니다."
	},
	"VS_SHADER_VARIABLE_NAME": {
		"name": "VS_SHADER_VARIABLE_NAME",
		"description": ".hlsl 소스 파일의 개체 코드를 포함하는 헤더 파일에서 변수 이름을 설정합니다."
	},
	"VS_TOOL_OVERRIDE": {
		"name": "VS_TOOL_OVERRIDE",
		"description": "파일 확장명을 따르지 않는 새 도구로 소스 파일에 적용될 기본 Visual Studio 도구를 재정의합니다."
	},
	"VS_XAML_TYPE": {
		"name": "VS_XAML_TYPE",
		"description": "XAML(Extensible Application Markup Language) 소스 파일을 기본 페이지가 아닌 다른 형식으로 표시합니다. 기본 App.xaml 파일을 ApplicationDefinition으로 설정하는 것이 가장 일반적입니다."
	},
	"WRAP_EXCLUDE": {
		"name": "WRAP_EXCLUDE",
		"description": "코드 래핑 기술에서 이 소스 파일을 제외합니다."
	},
	"XCODE_EXPLICIT_FILE_TYPE": {
		"name": "XCODE_EXPLICIT_FILE_TYPE",
		"description": "소스 파일에 대한 참조에서 Xcode explicitFileType 특성을 설정합니다. CMake는 파일 확장명에 따라 기본값을 계산하지만 이 속성을 사용하여 명시적으로 지시될 수 있습니다."
	},
	"XCODE_FILE_ATTRIBUTES": {
		"name": "XCODE_FILE_ATTRIBUTES",
		"description": "소스 파일에 대한 참조에서 Xcode ATTRIBUTES 설정에 값을 추가합니다. 무엇보다 해당 설정은 mig 파일에서 역할을 설정하는 데 사용할 수 있습니다."
	},
	"XCODE_LAST_KNOWN_FILE_TYPE": {
		"name": "XCODE_LAST_KNOWN_FILE_TYPE",
		"description": "소스 파일에 대한 참조에서 Xcode lastKnownFileType 특성을 설정합니다. CMake는 파일 확장명에 따라 기본값을 계산하지만 이 속성을 사용하여 명시적으로 지시될 수 있습니다."
	},
	"ATTACHED_FILES": {
		"name": "ATTACHED_FILES",
		"description": "대시보드 제출에 파일 목록을 연결합니다."
	},
	"ATTACHED_FILES_ON_FAIL": {
		"name": "ATTACHED_FILES_ON_FAIL",
		"description": "테스트에 실패할 경우 대시보드 제출에 파일 목록을 연결합니다."
	},
	"COST": {
		"name": "COST",
		"description": "이 속성은 테스트 비용을 설명합니다. 병렬 테스트가 사용되는 경우 테스트 세트의 테스트는 비용의 내림차순으로 실행됩니다. 프로젝트는 해당 속성을 부동 소수점 값으로 설정하여 테스트 비용을 명시적으로 정의할 수 있습니다."
	},
	"DEPENDS": {
		"name": "DEPENDS",
		"description": "이 테스트가 지정된 테스트 목록 후에만 실행되도록 지정합니다."
	},
	"DISABLED": {
		"name": "DISABLED",
		"description": "True로 설정될 경우 테스트를 건너뛰고 해당 상태는 '실행되지 않음'이 됩니다. DISABLED 테스트는 총 테스트 수에 계산되지 않고 해당 완료 상태는 CDash에 '사용 안 함'으로 보고됩니다."
	},
	"ENVIRONMENT": {
		"name": "ENVIRONMENT",
		"description": "테스트를 실행하기 위해 정의해야 하는 환경 변수를 지정합니다."
	},
	"ENVIRONMENT_MODIFICATION": {
		"name": "ENVIRONMENT_MODIFICATION",
		"description": "테스트를 실행하기 위해 수정해야 하는 환경 변수를 지정합니다. 이 속성에 의해 수행 되는 작업은 ENVIRONMENT 속성이 이미 적용된 후 수행됩니다."
	},
	"FAIL_REGULAR_EXPRESSION": {
		"name": "FAIL_REGULAR_EXPRESSION",
		"description": "테스트 출력(stdout 또는 stderr)이 이 정규식과 일치하면 프로세스 종료 코드에 관계없이 테스트가 실패합니다. TIMEOUT에 지정된 시간 제한을 초과하는 테스트는 FAIL_REGULAR_EXPRESSION과 관계없이 실패합니다. 정규식이 일치하지 않더라도 0이 아닌 반환 코드 또는 세분화 오류, 신호 중단 또는 힙 오류를 포함한 시스템 수준 테스트 오류는 테스트에 실패합니다."
	},
	"FIXTURES_CLEANUP": {
		"name": "FIXTURES_CLEANUP",
		"description": "테스트를 정리 테스트로 처리할 픽스쳐 목록을 지정합니다. 이러한 픽스쳐 이름은 테스트 사례 이름과 구분되며 연결된 테스트의 이름과 유사할 필요가 없습니다."
	},
	"FIXTURES_REQUIRED": {
		"name": "FIXTURES_REQUIRED",
		"description": "테스트에 필요한 픽스쳐 목록을 지정합니다. 픽스쳐 이름은 대/소문자를 구분하며 테스트 이름과 유사할 필요가 없습니다."
	},
	"FIXTURES_SETUP": {
		"name": "FIXTURES_SETUP",
		"description": "테스트를 설정 테스트로 처리할 픽스쳐 목록을 지정합니다. 이러한 픽스쳐 이름은 테스트 사례 이름과 구분되며 연결된 테스트의 이름과 유사할 필요가 없습니다."
	},
	"GENERATED_RESOURCE_SPEC_FILE": {
		"name": "GENERATED_RESOURCE_SPEC_FILE",
		"description": "이 테스트에서 생성된 동적으로 생성된 리소스 사양 파일 <ctest-resource-dynamically-generated-spec-file> 경로입니다."
	},
	"MEASUREMENT": {
		"name": "MEASUREMENT",
		"description": "테스트를 위해 보고할 CDASH 측정값 및 값을 지정합니다."
	},
	"PASS_REGULAR_EXPRESSION": {
		"name": "PASS_REGULAR_EXPRESSION",
		"description": "테스트 출력(stdout 또는 stderr)은 테스트가 통과하려면 이 정규식과 일치해야 합니다. 프로세스 종료 코드는 무시됩니다. TIMEOUT에 의해 지정된 시간 제한을 초과하는 테스트는 PASS_REGULAR_EXPRESSION 관계없이 실패합니다. 세분화 오류, 신호 중단 또는 힙 오류를 포함한 시스템 수준 테스트 오류는 PASS_REGULAR_EXPRESSION 일치하더라도 테스트에 실패할 수 있습니다."
	},
	"PROCESSORS": {
		"name": "PROCESSORS",
		"description": "이 테스트에 필요한 프로세스 슬롯 수를 지정하려면 설정합니다. 설정되지 않을 경우 기본값은 1개 프로세서입니다."
	},
	"PROCESSOR_AFFINITY": {
		"name": "PROCESSOR_AFFINITY",
		"description": "고정된 프로세서 세트에 대한 CPU 선호도를 사용하여 테스트 프로세스를 시작하도록 CTest에 요청하려면 true 값으로 설정합니다. 현재 플랫폼에서 지원되고 사용하도록 설정되면 CTest는 테스트 프로세스를 시작할 때 CPU 선호도 마스크에 배치할 프로세서 세트를 선택합니다. 해당 세트의 프로세서 수는 PROCESSORS 테스트 속성 또는 CTest에 사용 가능한 프로세서 수 중 더 작은 값으로 결정됩니다. 선택된 프로세서 세트는 PROCESSOR_AFFINITY 속성이 사용하도록 설정된 다른 동시 실행 테스트에 할당된 프로세서에서 분리됩니다."
	},
	"REQUIRED_FILES": {
		"name": "REQUIRED_FILES",
		"description": "테스트를 실행하는 데 필요한 파일 목록입니다. 절대 경로가 지정되지 않은 경우 파일 이름은 테스트 WORKING_DIRECTORY에 상대적입니다."
	},
	"RESOURCE_GROUPS": {
		"name": "RESOURCE_GROUPS",
		"description": "테스트에 필요한 리소스를 테스트에 의미 있는 방식으로 그룹화하여 지정합니다. 이 속성을 CTest 리소스 할당 기능에 통합하는 방법에 관한 자세한 내용은 리소스 할당 <ctest-resource-allocation>을 참조하세요."
	},
	"RESOURCE_LOCK": {
		"name": "RESOURCE_LOCK",
		"description": "이 테스트에 의해 잠기는 리소스 목록을 지정합니다."
	},
	"RUN_SERIAL": {
		"name": "RUN_SERIAL",
		"description": "이 테스트를 다른 테스트와 동시에 실행하지 마세요."
	},
	"SKIP_REGULAR_EXPRESSION": {
		"name": "SKIP_REGULAR_EXPRESSION",
		"description": "테스트 출력(stderr 또는 stdout)이 이 정규식과 일치하면 프로세스 종료 코드에 관계없이 테스트가 건너뛴 것으로 표시됩니다. TIMEOUT에 의해 지정된 시간 제한을 초과하는 테스트는 SKIP_REGULAR_EXPRESSION 관계없이 실패합니다. 정규식이 일치하는 경우에도 조각화 오류, 신호 중단 또는 힙 오류를 포함한 시스템 수준 테스트 오류가 테스트에 실패할 수 있습니다."
	},
	"SKIP_RETURN_CODE": {
		"name": "SKIP_RETURN_CODE",
		"description": "테스트를 건너뜀으로 표시할 반환 코드입니다."
	},
	"TIMEOUT": {
		"name": "TIMEOUT",
		"description": "이 테스트에 허용할 기간(초)입니다."
	},
	"TIMEOUT_AFTER_MATCH": {
		"name": "TIMEOUT_AFTER_MATCH",
		"description": "일치하는 줄이 출력에 나타난 후 테스트의 시간 제한 기간을 변경합니다."
	},
	"TIMEOUT_SIGNAL_GRACE_PERIOD": {
		"name": "TIMEOUT_SIGNAL_GRACE_PERIOD",
		"description": "TIMEOUT_SIGNAL_NAME 테스트 속성이 설정된 경우 이 속성은 사용자 지정 신호를 보낸 후 테스트 프로세스가 종료되기를 기다리는 시간(초)을 지정합니다. 그렇지 않으면 이 속성은 의미가 없습니다."
	},
	"TIMEOUT_SIGNAL_NAME": {
		"name": "TIMEOUT_SIGNAL_NAME",
		"description": "시간 제한에 도달하면 테스트 프로세스에 보낼 사용자 지정 신호를 지정합니다. 이는 POSIX 신호를 지원하는 플랫폼에서만 사용할 수 있습니다. Windows에서는 사용할 수 없습니다."
	},
	"WILL_FAIL": {
		"name": "WILL_FAIL",
		"description": "true이면 통과/실패 테스트 조건이 반전됩니다. WILL_FAIL true인 테스트는 반환 코드 0으로 실패하고 0이 아닌 반환 코드를 사용하여 통과합니다. TIMEOUT에 의해 지정된 시간 제한을 초과하는 테스트는 WILL_FAIL 관계없이 실패합니다. 세분화 오류, 신호 중단 또는 힙 오류를 포함한 시스템 수준 테스트 오류는 WILL_FAIL true인 경우에도 테스트에 실패할 수 있습니다."
	},
	"WORKING_DIRECTORY": {
		"name": "WORKING_DIRECTORY",
		"description": "테스트 실행 파일이 호출될 소스 디렉터리입니다."
	},
	"AIX_EXPORT_ALL_SYMBOLS": {
		"name": "AIX_EXPORT_ALL_SYMBOLS",
		"description": "AIX에서 CMake는 ENABLE_EXPORTS 대상 속성 세트를 사용하여 실행 파일 및 공유 라이브러리의 모든 기호를 자동으로 내보냅니다. 동작을 억제하고 기본적으로 기호를 내보내지 않으려면 해당 부울 속성을 명시적으로 사용하지 않도록 설정합니다. 이 경우 프로젝트에서 다른 수단을 사용하여 일부 기호를 내보내야 합니다."
	},
	"ALIASED_TARGET": {
		"name": "ALIASED_TARGET",
		"description": "이 대상에서 별칭을 지정하는 대상 이름입니다."
	},
	"ALIAS_GLOBAL": {
		"name": "ALIAS_GLOBAL",
		"description": "ALIAS 대상이 전역적으로 표시되는지 여부를 나타내는 읽기 전용 속성입니다."
	},
	"ANDROID_ANT_ADDITIONAL_OPTIONS": {
		"name": "ANDROID_ANT_ADDITIONAL_OPTIONS",
		"description": "Android Ant 빌드 시스템의 추가 옵션을 설정합니다. 이 속성은 Ant 빌드의 모든 명령줄 옵션을 포함하는 문자열 값입니다. 대상이 생성될 때 설정되는 경우 CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS 변수의 값으로 초기화됩니다."
	},
	"ANDROID_API": {
		"name": "ANDROID_API",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition을 사용한 Android에 대한 교차 컴파일 시 이 속성은 Android 대상 API 버전(예: 15)을 설정합니다. 버전 번호는 양의 10진 정수여야 합니다. 이 속성은 대상이 생성될 때 설정되면 CMAKE_ANDROID_API 변수의 값으로 초기화됩니다."
	},
	"ANDROID_API_MIN": {
		"name": "ANDROID_API_MIN",
		"description": "Android MIN API 버전(예: 9)을 설정합니다. 버전 번호는 양의 10진 정수여야 합니다. 이 속성은 대상이 생성될 때 설정되면 CMAKE_ANDROID_API_MIN 변수의 값으로 초기화됩니다. 네이티브 코드는 이 API 버전을 사용하여 빌드됩니다."
	},
	"ANDROID_ARCH": {
		"name": "ANDROID_ARCH",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition을 사용한 Android에 대한 교차 컴파일 시 이 속성은 Android 대상 아키텍처를 설정합니다."
	},
	"ANDROID_ASSETS_DIRECTORIES": {
		"name": "ANDROID_ASSETS_DIRECTORIES",
		"description": "빌드 전에 주 자산 폴더에 복사할 Android 자산 디렉터리를 설정합니다. 이 속성은 세미콜론으로 구분된 디렉터리 경로를 포함하는 문자열 속성입니다. 대상이 생성될 때 설정되면 CMAKE_ANDROID_ASSETS_DIRECTORIES 변수의 값으로 초기화됩니다."
	},
	"ANDROID_GUI": {
		"name": "ANDROID_GUI",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition을 사용한 Android에 대한 교차 컴파일 시 이 속성은 실행 파일을 Android의 애플리케이션 패키지로 빌드할지 여부를 지정합니다."
	},
	"ANDROID_JAR_DEPENDENCIES": {
		"name": "ANDROID_JAR_DEPENDENCIES",
		"description": "JAR 종속성을 지정하는 Android 속성을 설정합니다. 이 속성은 문자열 값 속성입니다. 대상이 생성될 때 설정되면 CMAKE_ANDROID_JAR_DEPENDENCIES 변수의 값으로 초기화됩니다."
	},
	"ANDROID_JAR_DIRECTORIES": {
		"name": "ANDROID_JAR_DIRECTORIES",
		"description": "JAR 라이브러리를 검색할 디렉터리를 지정하는 Android 속성을 설정합니다."
	},
	"ANDROID_JAVA_SOURCE_DIR": {
		"name": "ANDROID_JAVA_SOURCE_DIR",
		"description": "Java 소스 코드 루트 디렉터리를 정의하는 Android 속성을 설정합니다. 이 속성은 세미콜론으로 구분된 디렉터리 경로를 포함하는 문자열 속성입니다. 대상이 생성될 때 설정되면 CMAKE_ANDROID_JAVA_SOURCE_DIR 변수의 값으로 초기화됩니다."
	},
	"ANDROID_NATIVE_LIB_DEPENDENCIES": {
		"name": "ANDROID_NATIVE_LIB_DEPENDENCIES",
		"description": ".so 종속성을 지정하는 Android 속성을 설정합니다. 이 속성은 문자열 속성입니다."
	},
	"ANDROID_NATIVE_LIB_DIRECTORIES": {
		"name": "ANDROID_NATIVE_LIB_DIRECTORIES",
		"description": ".so 라이브러리를 검색할 디렉터리를 지정하는 Android 속성을 설정합니다."
	},
	"ANDROID_PROCESS_MAX": {
		"name": "ANDROID_PROCESS_MAX",
		"description": "병렬 Android NDK 컴파일러 프로세스의 최대 개수(예: 4)를 정의하는 Android 속성을 설정합니다. 이 속성은 대상이 생성될 때 설정되면 CMAKE_ANDROID_PROCESS_MAX 변수의 값으로 초기화됩니다."
	},
	"ANDROID_PROGUARD": {
		"name": "ANDROID_PROGUARD",
		"description": "이 속성을 true로 설정하면 ProGuard 도구가 사용되지 않는 코드를 제거하고 클래스, 필드 및 메서드의 이름을 의미 체계가 모호한 이름으로 바꿔 코드를 축소, 최적화 및 난독 처리할 수 있습니다. 이 속성은 대상이 생성될 때 설정될 경우 CMAKE_ANDROID_PROGUARD 변수의 값으로 초기화됩니다."
	},
	"ANDROID_PROGUARD_CONFIG_PATH": {
		"name": "ANDROID_PROGUARD_CONFIG_PATH",
		"description": "ProGuard 구성 파일의 위치를 지정하는 Android 속성을 설정합니다. 기본값을 사용하려면 비워 둡니다. 이 속성은 ProGuard 구성 파일의 경로를 포함하는 문자열 속성입니다. 대상이 생성될 때 설정되면 CMAKE_ANDROID_PROGUARD_CONFIG_PATH 변수의 값으로 초기화됩니다."
	},
	"ANDROID_SECURE_PROPS_PATH": {
		"name": "ANDROID_SECURE_PROPS_PATH",
		"description": "보안 속성 파일의 위치를 명시하는 Android 속성을 설정합니다. 이 속성은 파일 경로를 포함하는 문자열 속성입니다. 대상이 생성될 때 설정되면 CMAKE_ANDROID_SECURE_PROPS_PATH 변수의 값으로 초기화됩니다."
	},
	"ANDROID_SKIP_ANT_STEP": {
		"name": "ANDROID_SKIP_ANT_STEP",
		"description": "Ant 빌드 단계를 건너뛸지 여부를 정의하는 Android 속성을 설정합니다. 이 속성은 대상이 생성될 때 설정되면 CMAKE_ANDROID_SKIP_ANT_STEP 변수의 값으로 초기화되는 부울 속성입니다."
	},
	"ANDROID_STL_TYPE": {
		"name": "ANDROID_STL_TYPE",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition을 사용한 Android에 대한 교차 컴파일 시 이 속성은 프로젝트의 STL 지원 형식을 지정합니다. 이 속성은 다음 값 중 하나로 설정할 수 있는 문자열 속성입니다:"
	},
	"ARCHIVE_OUTPUT_DIRECTORY": {
		"name": "ARCHIVE_OUTPUT_DIRECTORY",
		"description": "XXX 대상 파일을 빌드할 출력 디렉터리입니다."
	},
	"ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "ARCHIVE 대상 파일의 구성별 출력 디렉터리입니다."
	},
	"ARCHIVE_OUTPUT_NAME": {
		"name": "ARCHIVE_OUTPUT_NAME",
		"description": "XXX 대상 파일의 출력 이름입니다."
	},
	"ARCHIVE_OUTPUT_NAME_<CONFIG>": {
		"name": "ARCHIVE_OUTPUT_NAME_<CONFIG>",
		"description": "ARCHIVE 대상 파일의 구성별 출력 이름입니다."
	},
	"AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": {
		"name": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG",
		"description": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG는 다중 구성 생성기에 대한 더 나은 종속성 그래프를 갖도록 대상에 설정할 수 있는 부울 속성입니다. 이 속성을 사용하도록 설정하면 CMake는 구성별 대상을 더 많이 생성합니다. 따라서 다중 구성 생성기에 대한 종속성 그래프가 더 정확하며 일부 다시 컴파일은 방지됩니다."
	},
	"AUTOGEN_BUILD_DIR": {
		"name": "AUTOGEN_BUILD_DIR",
		"description": "AUTOMOC, AUTOUIC 및 AUTORCC가 대상 관련 파일을 생성하는 디렉터리입니다."
	},
	"AUTOGEN_COMMAND_LINE_LENGTH_MAX": {
		"name": "AUTOGEN_COMMAND_LINE_LENGTH_MAX",
		"description": "명령줄에 모든 인수를 전달하는 대신 Windows에서 응답 파일 사용을 트리거하는 autogen 대상(예: moc 또는 uic)에 대한 명령줄 길이 제한입니다."
	},
	"AUTOGEN_ORIGIN_DEPENDS": {
		"name": "AUTOGEN_ORIGIN_DEPENDS",
		"description": "원본 대상 종속성을 해당 <ORIGIN>_autogen 대상으로 전달하도록 전환합니다."
	},
	"AUTOGEN_PARALLEL": {
		"name": "AUTOGEN_PARALLEL",
		"description": "AUTOMOC 및 AUTOUIC를 사용할 경우 시작할 병렬 moc 또는 uic 프로세스 수입니다."
	},
	"AUTOGEN_TARGET_DEPENDS": {
		"name": "AUTOGEN_TARGET_DEPENDS",
		"description": "해당 <ORIGIN>_autogen 대상의 추가 대상 종속성입니다."
	},
	"AUTOGEN_USE_SYSTEM_INCLUDE": {
		"name": "AUTOGEN_USE_SYSTEM_INCLUDE",
		"description": "AUTOGEN_USE_SYSTEM_INCLUDE는 대상에 설정할 수 있는 부울 속성으로, autogen 대상 포함 디렉터리를 시스템에 포함 디렉터리 또는 일반 포함 디렉터리로 대상에 추가해야 함을 나타냅니다."
	},
	"AUTOMOC": {
		"name": "AUTOMOC",
		"description": "auto-moc로 대상을 처리해야 하는지 여부를 나타냅니다(Qt 프로젝트의 경우)."
	},
	"AUTOMOC_COMPILER_PREDEFINES": {
		"name": "AUTOMOC_COMPILER_PREDEFINES",
		"description": "컴파일러 사전 정의 파일 moc_predefs.h를 생성해야 하는지 여부를 결정하기 위해 AUTOMOC에서 사용되는 부울 값입니다."
	},
	"AUTOMOC_DEPEND_FILTERS": {
		"name": "AUTOMOC_DEPEND_FILTERS",
		"description": "소스 파일의 moc 파일에 대한 추가 종속성으로 등록되는 소스 파일에서 파일 이름을 추출하기 위해 AUTOMOC에서 사용되는 필터 정의입니다."
	},
	"AUTOMOC_EXECUTABLE": {
		"name": "AUTOMOC_EXECUTABLE",
		"description": "AUTOMOC_EXECUTABLE은 AUTOMOC 사용 가능 파일에 사용할 moc 실행 파일을 가리키는 파일 경로입니다. 해당 속성을 설정하면 CMake가 moc 이진 파일의 자동 검색을 건너뛰며 온전성 테스트가 정상적으로 실행되어 이진 파일이 사용 가능하고 예상대로 작동하는지 확인할 수 있습니다."
	},
	"AUTOMOC_MACRO_NAMES": {
		"name": "AUTOMOC_MACRO_NAMES",
		"description": "moc로 C++ 파일을 처리해야 하는지 결정하기 위해 AUTOMOC에서 사용되는 매크로 이름의 세미콜론으로 구분된 목록입니다."
	},
	"AUTOMOC_MOC_OPTIONS": {
		"name": "AUTOMOC_MOC_OPTIONS",
		"description": "AUTOMOC를 사용하는 경우 moc에 대한 추가 옵션"
	},
	"AUTOMOC_PATH_PREFIX": {
		"name": "AUTOMOC_PATH_PREFIX",
		"description": "이 속성이 ON이면 CMake는 AUTOMOC 사용 가능 Qt 대상의 moc에 대해 -p 경로 접두사 옵션을 생성합니다."
	},
	"AUTORCC": {
		"name": "AUTORCC",
		"description": "auto-rcc로 대상을 처리해야 하는지 여부를 나타냅니다(Qt 프로젝트의 경우)."
	},
	"AUTORCC_EXECUTABLE": {
		"name": "AUTORCC_EXECUTABLE",
		"description": "AUTORCC_EXECUTABLE은 AUTORCC 사용 가능 파일에 사용할 rcc 실행 파일을 가리키는 파일 경로입니다. 해당 속성을 설정하면 CMake가 rcc 이진 파일의 자동 검색을 건너뛰며 온전성 테스트가 정상적으로 실행되어 이진 파일이 사용 가능하고 예상대로 작동하는지 확인할 수 있습니다."
	},
	"AUTOUIC": {
		"name": "AUTOUIC",
		"description": "auto-uic로 대상을 처리해야 하는지 여부를 나타냅니다(Qt 프로젝트의 경우)."
	},
	"AUTOUIC_EXECUTABLE": {
		"name": "AUTOUIC_EXECUTABLE",
		"description": "AUTOUIC_EXECUTABLE은 AUTOUIC 사용 가능 파일에 사용할 uic 실행 파일을 가리키는 파일 경로입니다. 해당 속성을 설정하면 CMake가 uic 이진 파일의 자동 검색을 건너뛰며 온전성 테스트가 정상적으로 실행되어 이진 파일이 사용 가능하고 예상대로 작동하는지 확인할 수 있습니다."
	},
	"AUTOUIC_SEARCH_PATHS": {
		"name": "AUTOUIC_SEARCH_PATHS",
		"description": "AUTOUIC에서 포함된 .ui 파일을 찾는 데 사용되는 검색 경로 목록입니다."
	},
	"BUILD_RPATH": {
		"name": "BUILD_RPATH",
		"description": "빌드 트리에 연결된 이진 파일(이를 지원하는 플랫폼의 경우)에 추가할 RPATH(런타임 경로) 항목을 지정하는 세미콜론으로 구분된 목록입니다. 기본적으로 CMake는 연결된 공유 라이브러리를 찾는 데 필요한 검색 경로를 포함하도록 빌드 트리에서 이진 파일의 런타임 경로를 설정합니다. 프로젝트는 BUILD_RPATH를 설정하여 추가 검색 경로를 지정할 수 있습니다."
	},
	"BUILD_RPATH_USE_ORIGIN": {
		"name": "BUILD_RPATH_USE_ORIGIN",
		"description": "빌드 RPATH에 상대 경로를 사용할지 여부를 나타냅니다."
	},
	"BUILD_WITH_INSTALL_NAME_DIR": {
		"name": "BUILD_WITH_INSTALL_NAME_DIR",
		"description": "BUILD_WITH_INSTALL_NAME_DIR은 빌드 트리에 있는 대상의 macOS install_name에 INSTALL_NAME_DIR로 제공된 디렉터리를 사용할지 여부를 지정하는 부울입니다. 이 설정은 macOS의 대상에만 적용됩니다."
	},
	"BUILD_WITH_INSTALL_RPATH": {
		"name": "BUILD_WITH_INSTALL_RPATH",
		"description": "BUILD_WITH_INSTALL_RPATH는 빌드 트리의 대상을 INSTALL_RPATH와 연결할지 여부를 지정하는 부울입니다. 이 설정은 SKIP_BUILD_RPATH보다 우선하며 이 설정을 사용하면 설치하기 전에 다시 연결할 필요가 없습니다."
	},
	"BUNDLE": {
		"name": "BUNDLE",
		"description": "이 대상은 macOS의 CFBundle입니다."
	},
	"BUNDLE_EXTENSION": {
		"name": "BUNDLE_EXTENSION",
		"description": "macOS 및 iOS에서 BUNDLE, FRAMEWORK 또는 MACOSX_BUNDLE 대상의 이름을 지정하는 데 사용되는 파일 확장명입니다."
	},
	"COMMON_LANGUAGE_RUNTIME": {
		"name": "COMMON_LANGUAGE_RUNTIME",
		"description": "이 대상 속성을 설정하면 대상은 C++/CLI 지원을 통해 빌드하도록 구성됩니다."
	},
	"COMPATIBLE_INTERFACE_BOOL": {
		"name": "COMPATIBLE_INTERFACE_BOOL",
		"description": "링크 인터페이스와 호환되어야 하는 속성입니다."
	},
	"COMPATIBLE_INTERFACE_NUMBER_MAX": {
		"name": "COMPATIBLE_INTERFACE_NUMBER_MAX",
		"description": "링크 인터페이스의 최댓값이 사용되는 속성입니다."
	},
	"COMPATIBLE_INTERFACE_NUMBER_MIN": {
		"name": "COMPATIBLE_INTERFACE_NUMBER_MIN",
		"description": "링크 인터페이스의 최소값이 사용되는 속성입니다."
	},
	"COMPATIBLE_INTERFACE_STRING": {
		"name": "COMPATIBLE_INTERFACE_STRING",
		"description": "링크 인터페이스와 문자열이 호환되어야 하는 속성입니다."
	},
	"COMPILE_FEATURES": {
		"name": "COMPILE_FEATURES",
		"description": "이 대상에 사용할 수 있는 컴파일러 기능입니다."
	},
	"COMPILE_PDB_NAME": {
		"name": "COMPILE_PDB_NAME",
		"description": "소스 파일을 빌드하는 동안 컴파일러에서 생성된 MS 디버그 기호 .pdb 파일의 출력 이름입니다."
	},
	"COMPILE_PDB_NAME_<CONFIG>": {
		"name": "COMPILE_PDB_NAME_<CONFIG>",
		"description": "소스 파일을 빌드하는 동안 컴파일러에서 생성된 MS 디버그 기호 .pdb 파일의 구성별 출력 이름입니다."
	},
	"COMPILE_PDB_OUTPUT_DIRECTORY": {
		"name": "COMPILE_PDB_OUTPUT_DIRECTORY",
		"description": "소스 파일을 빌드하는 동안 컴파일러에서 생성된 MS 디버그 기호 .pdb 파일의 출력 디렉터리입니다."
	},
	"COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "소스 파일을 빌드하는 동안 컴파일러에서 생성된 MS 디버그 기호 .pdb 파일의 구성별 출력 디렉터리입니다."
	},
	"COMPILE_WARNING_AS_ERROR": {
		"name": "COMPILE_WARNING_AS_ERROR",
		"description": "컴파일 시 경고를 오류로 처리할지 여부를 지정합니다. 활성화된 경우 컴파일 시 경고를 오류로 처리하는 플래그를 추가합니다. cmake --compile-no-warning-as-error 옵션이 cmake 명령줄에 지정되면 이 속성은 무시됩니다."
	},
	"<CONFIG>_OUTPUT_NAME": {
		"name": "<CONFIG>_OUTPUT_NAME",
		"description": "이전 구성별 대상 파일 기본 이름입니다. OUTPUT_NAME_을 대신 사용하세요."
	},
	"<CONFIG>_POSTFIX": {
		"name": "<CONFIG>_POSTFIX",
		"description": "구성 <CONFIG>의 대상 파일 이름에 추가할 후위입니다."
	},
	"CROSSCOMPILING_EMULATOR": {
		"name": "CROSSCOMPILING_EMULATOR",
		"description": "지정된 에뮬레이터를 사용하여 교차 컴파일 시 생성된 실행 파일을 실행합니다. 이 명령은 빌드된 대상 시스템 실행 파일에 대한 add_test, add_custom_command 및 add_custom_target 명령에 접두사로 추가됩니다."
	},
	"CUDA_ARCHITECTURES": {
		"name": "CUDA_ARCHITECTURES",
		"description": "디바이스 코드를 생성할 아키텍처 목록입니다."
	},
	"CUDA_CUBIN_COMPILATION": {
		"name": "CUDA_CUBIN_COMPILATION",
		"description": "CUDA 원본을 개체 라이브러리 내의 .obj 파일 대신 .netin 파일로 컴파일합니다."
	},
	"CUDA_EXTENSIONS": {
		"name": "CUDA_EXTENSIONS",
		"description": "컴파일러 관련 확장이 요청되는지 여부를 지정하는 부울입니다."
	},
	"CUDA_FATBIN_COMPILATION": {
		"name": "CUDA_FATBIN_COMPILATION",
		"description": "CUDA 원본을 개체 라이브러리 내의 .obj 파일 대신 .fatbin 파일로 컴파일합니다."
	},
	"CUDA_OPTIX_COMPILATION": {
		"name": "CUDA_OPTIX_COMPILATION",
		"description": "CUDA 원본을 개체 라이브러리 내의 .obj 파일 대신 .optixir 파일로 컴파일합니다."
	},
	"CUDA_PTX_COMPILATION": {
		"name": "CUDA_PTX_COMPILATION",
		"description": "개체 라이브러리 내에서 CUDA 소스를 .obj 파일이 아닌 .ptx 파일로 컴파일합니다."
	},
	"CUDA_RESOLVE_DEVICE_SYMBOLS": {
		"name": "CUDA_RESOLVE_DEVICE_SYMBOLS",
		"description": "CUDA만 해당: 필요한 경우 특정 라이브러리 대상의 디바이스 연결을 사용하도록 설정합니다."
	},
	"CUDA_RUNTIME_LIBRARY": {
		"name": "CUDA_RUNTIME_LIBRARY",
		"description": "CUDA 언어를 대상으로 하는 컴파일러에서 사용할 CUDA 런타임 라이브러리를 선택합니다."
	},
	"CUDA_SEPARABLE_COMPILATION": {
		"name": "CUDA_SEPARABLE_COMPILATION",
		"description": "CUDA만 해당: 디바이스 코드의 개별 컴파일을 사용하도록 설정합니다."
	},
	"CUDA_STANDARD": {
		"name": "CUDA_STANDARD",
		"description": "이 대상을 빌드하도록 기능이 요청되는 CUDA/C++ 표준입니다."
	},
	"CUDA_STANDARD_REQUIRED": {
		"name": "CUDA_STANDARD_REQUIRED",
		"description": "CUDA_STANDARD 값이 요구 사항인지 여부를 설명하는 부울입니다."
	},
	"CXX_EXTENSIONS": {
		"name": "CXX_EXTENSIONS",
		"description": "컴파일러 관련 확장이 요청되는지 여부를 지정하는 부울입니다."
	},
	"CXX_MODULE_DIRS": {
		"name": "CXX_MODULE_DIRS",
		"description": "대상의 기본 C++ 모듈 세트(즉, 이름과 유형이 CXX_MODULES인 파일 세트)의 세미콜론으로 구분된 기본 디렉터리 목록입니다. 속성은 생성기 식 <cmake-generator-expressions(7)>을(를) 지원합니다."
	},
	"CXX_MODULE_DIRS_<NAME>": {
		"name": "CXX_MODULE_DIRS_<NAME>",
		"description": "세트 유형이 CXX_MODULES인 대상의 <NAME> C++ 모듈 세트에 대한 세미콜론으로 구분된 기본 디렉터리 목록입니다. 속성은 생성기 식 <cmake-generator-expressions(7)>을(를) 지원합니다."
	},
	"CXX_MODULE_SET": {
		"name": "CXX_MODULE_SET",
		"description": "대상의 기본 C++ 모듈 세트에 있는 파일의 세미콜론으로 구분된 목록입니다(즉, 이름과 유형이 CXX_MODULES인 파일 세트). 경로 중 하나라도 상대 경로인 경우 대상의 소스 디렉터리를 기준으로 계산됩니다. 속성은 생성기 식 <cmake-generator-expressions(7)>을(를) 지원합니다."
	},
	"CXX_MODULE_SETS": {
		"name": "CXX_MODULE_SETS",
		"description": "대상의 PRIVATE 및 PUBLIC C++ 모듈 세트(즉, CXX_MODULES 유형의 모든 파일 세트)의 읽기 전용 목록입니다. 이러한 파일 세트에 나열된 파일은 IDE 통합을 위한 원본 파일로 처리됩니다."
	},
	"CXX_MODULE_SET_<NAME>": {
		"name": "CXX_MODULE_SET_<NAME>",
		"description": "세트 유형이 CXX_MODULES인 대상의 <NAME> C++ 모듈 세트에 있는 세미콜론으로 구분된 파일 목록입니다. 경로 중 하나라도 상대 경로인 경우 대상의 소스 디렉터리를 기준으로 계산됩니다. 속성은 생성기 식 <cmake-generator-expressions(7)>을(를) 지원합니다."
	},
	"CXX_MODULE_STD": {
		"name": "CXX_MODULE_STD",
		"description": "CXX_MODULE_STD 대상이 import std를 사용할 수 있는지 여부를 지정하는 부울입니다. 해당 C++ 소스인지 여부입니다."
	},
	"CXX_STANDARD": {
		"name": "CXX_STANDARD",
		"description": "이 대상을 빌드하도록 기능이 요청되는 C++ 표준입니다."
	},
	"CXX_STANDARD_REQUIRED": {
		"name": "CXX_STANDARD_REQUIRED",
		"description": "CXX_STANDARD 값이 요구 사항인지 여부를 설명하는 부울입니다."
	},
	"C_EXTENSIONS": {
		"name": "C_EXTENSIONS",
		"description": "컴파일러 관련 확장이 요청되는지 여부를 지정하는 부울입니다."
	},
	"C_STANDARD": {
		"name": "C_STANDARD",
		"description": "이 대상을 빌드하도록 기능이 요청되는 C 표준입니다."
	},
	"C_STANDARD_REQUIRED": {
		"name": "C_STANDARD_REQUIRED",
		"description": "C_STANDARD 값이 요구 사항인지 여부를 설명하는 부울입니다."
	},
	"DEBUG_POSTFIX": {
		"name": "DEBUG_POSTFIX",
		"description": "대상 속성 <CONFIG>_POSTFIX를 참조하세요."
	},
	"DEFINE_SYMBOL": {
		"name": "DEFINE_SYMBOL",
		"description": "이 대상의 소스를 컴파일할 때 기호를 정의합니다."
	},
	"DEPLOYMENT_ADDITIONAL_FILES": {
		"name": "DEPLOYMENT_ADDITIONAL_FILES",
		"description": "Visual Studio 생성기에서 생성한 .vcproj 파일에서 DeploymentTool의 WinCE 프로젝트 AdditionalFiles를 설정합니다. 원격 WinCE 디바이스에서 디버그하려는 경우 유용합니다. 디바이스에 복사할 추가 파일을 지정합니다. 예:"
	},
	"DEPLOYMENT_REMOTE_DIRECTORY": {
		"name": "DEPLOYMENT_REMOTE_DIRECTORY",
		"description": "Visual Studio 생성기에서 생성한 .vcproj 파일에서 DeploymentTool의 WinCE 프로젝트 RemoteDirectory와 DebuggerTool의 RemoteExecutable을 설정합니다. 원격 WinCE 디바이스에서 디버그하려는 경우 유용합니다. 예:"
	},
	"DEPRECATION": {
		"name": "DEPRECATION",
		"description": "가져온 대상 개발자의 사용 중단 메시지입니다."
	},
	"DISABLE_PRECOMPILE_HEADERS": {
		"name": "DISABLE_PRECOMPILE_HEADERS",
		"description": "PRECOMPILE_HEADERS 속성으로 지정된 헤더 파일의 미리 컴파일을 사용하지 않습니다."
	},
	"DLL_NAME_WITH_SOVERSION": {
		"name": "DLL_NAME_WITH_SOVERSION",
		"description": "이 속성은 WIN32 변수를 설정할 때 선택되는 Windows 플랫폼에 대해 생성된 DLL 파일 이름의 파일 이름에 SOVERSION 대상 속성이 추가되는지 여부를 제어합니다."
	},
	"DOTNET_SDK": {
		"name": "DOTNET_SDK",
		"description": "C# 프로젝트에 대한 .NET SDK를 지정합니다(예: Microsoft.NET.Sdk)."
	},
	"DOTNET_TARGET_FRAMEWORK": {
		"name": "DOTNET_TARGET_FRAMEWORK",
		"description": ".NET 대상 프레임워크를 지정합니다."
	},
	"DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": ".NET 대상 프레임워크 버전을 지정합니다."
	},
	"EchoString": {
		"name": "EchoString",
		"description": "대상이 빌드될 때 표시할 메시지입니다."
	},
	"ENABLE_EXPORTS": {
		"name": "ENABLE_EXPORTS",
		"description": "실행 파일 또는 공유 라이브러리에서 기호를 내보낼지 여부를 지정합니다."
	},
	"EXCLUDE_FROM_DEFAULT_BUILD": {
		"name": "EXCLUDE_FROM_DEFAULT_BUILD",
		"description": "빌드 솔루션에서 대상을 제외합니다."
	},
	"EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>": {
		"name": "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>",
		"description": "빌드 솔루션에서 제외할 대상의 구성별 버전입니다."
	},
	"EXPORT_COMPILE_COMMANDS": {
		"name": "EXPORT_COMPILE_COMMANDS",
		"description": "대상에 대해 생성하는 동안 컴파일 명령의 출력을 사용하도록/사용하지 않도록 설정합니다."
	},
	"EXPORT_FIND_PACKAGE_NAME": {
		"name": "EXPORT_FIND_PACKAGE_NAME",
		"description": "설치 또는 내보내기에서 find_dependency 호출을 내보낼 때 종속성 대상과 연결된 패키지 이름을 제어합니다. CMake에서 빌드하고 내보낸 패키지에 패키지 이름을 할당하거나 대상을 만든 find_package 호출에서 패키지를 재정의하는 데 사용할 수 있습니다."
	},
	"EXPORT_NAME": {
		"name": "EXPORT_NAME",
		"description": "대상 파일의 내보낸 이름입니다."
	},
	"EXPORT_NO_SYSTEM": {
		"name": "EXPORT_NO_SYSTEM",
		"description": "이 속성은 대상을 설치하거나 내보낼 때 설치 및 내보내기 명령의 동작에 각각 영향을 미칩니다. EXPORT_NO_SYSTEM이 true로 설정된 경우 이러한 명령은 SYSTEM 속성이 false로 설정된 상태에서 가져온 대상을 생성합니다."
	},
	"EXPORT_PROPERTIES": {
		"name": "EXPORT_PROPERTIES",
		"description": "대상에 대해 내보낼 추가 속성을 나열합니다."
	},
	"FOLDER": {
		"name": "FOLDER",
		"description": "폴더 계층 구조를 사용하여 대상을 표시하는 IDE의 경우 이 속성은 대상을 배치할 폴더의 이름을 지정합니다. 폴더를 중첩하려면 폴더 수준을 구분하는 / 문자자를 사용해 GUI/Dialogs와 같은 FOLDER 값을 사용합니다. FOLDER 속성이 없는 대상은 최상위 엔터티로 표시됩니다. FOLDER 속성 값이 같은 대상은 형제와 동일한 폴더에 나타납니다."
	},
	"Fortran_BUILDING_INSTRINSIC_MODULES": {
		"name": "Fortran_BUILDING_INSTRINSIC_MODULES",
		"description": "대상이 Fortran 컴파일러를 빌드하기 위해 Fortran 내장 함수를 빌드하고 있음을 CMake Fortran 전처리기에 지시합니다."
	},
	"Fortran_MODULE_DIRECTORY": {
		"name": "Fortran_MODULE_DIRECTORY",
		"description": "대상에서 제공된 Fortran 모듈의 출력 디렉터리를 지정합니다."
	},
	"FRAMEWORK": {
		"name": "FRAMEWORK",
		"description": "macOS 및 iOS에서 SHARED 또는 STATIC 라이브러리를 프레임워크 번들로 빌드합니다."
	},
	"FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>": {
		"name": "FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
		"description": "다중 구성 생성기(예: Xcode 및 Ninja 다중 구성)를 사용할 때 구성 <CONFIG>의 프레임워크 파일 이름에 추가할 후위입니다."
	},
	"FRAMEWORK_VERSION": {
		"name": "FRAMEWORK_VERSION",
		"description": "FRAMEWORK 대상 속성을 사용하여 생성된 프레임워크의 버전입니다(예: A)."
	},
	"GENERATOR_FILE_NAME": {
		"name": "GENERATOR_FILE_NAME",
		"description": "이 대상에 대한 생성기 파일입니다."
	},
	"GHS_INTEGRITY_APP": {
		"name": "GHS_INTEGRITY_APP",
		"description": "실행 파일 대상이 무결성 애플리케이션으로 처리되어야 하는지 결정하는 켜기/끄기 부울입니다."
	},
	"GHS_NO_SOURCE_GROUP_FILE": {
		"name": "GHS_NO_SOURCE_GROUP_FILE",
		"description": "대상의 프로젝트 파일이 단일 파일 또는 여러 파일이어야 하는지를 제어하는 켜기/끄기 부울입니다."
	},
	"GNUtoMS": {
		"name": "GNUtoMS",
		"description": "GNU 가져오기 라이브러리(.dll.a)를 MS 형식(.lib)으로 변환합니다."
	},
	"HAS_CXX": {
		"name": "HAS_CXX",
		"description": "C++ 링커 도구를 사용하여 대상을 연결합니다(사용되지 않음)."
	},
	"HEADER_DIRS": {
		"name": "HEADER_DIRS",
		"description": "대상의 기본 헤더 집합(예: 이름 및 형식 HEADERS가 있는 파일 집합)에 대한 세미콜론으로 구분된 기본 디렉터리 목록입니다. 이 속성은 <cmake-generator-expressions(7)> 생성기 식을 지원합니다."
	},
	"HEADER_DIRS_<NAME>": {
		"name": "HEADER_DIRS_<NAME>",
		"description": "집합 형식 HEADERS가 있는 대상의 <NAME> 헤더 집합에 대한 세미콜론으로 구분된 기본 디렉터리 목록입니다. 이 속성은 <cmake-generator-expressions(7)> 생성기 식을 지원합니다."
	},
	"HEADER_SET": {
		"name": "HEADER_SET",
		"description": "대상의 기본 헤더 집합(이름 및 형식 HEADERS가 있는 파일 집합)에 있는 세미콜론으로 구분된 파일 목록입니다. 상대 경로가 있으면 대상의 소스 디렉터리와 비교하여 계산됩니다. 이 속성은 <cmake-generator-expressions(7)> 생성기 식을 지원합니다."
	},
	"HEADER_SETS": {
		"name": "HEADER_SETS",
		"description": "대상의 PRIVATE 및 PUBLIC 헤더 집합(예: 형식 HEADERS가 있는 모든 파일 집합)에 대한 읽기 전용 목록입니다. 이러한 파일 집합에 나열된 파일은 IDE 통합을 위해 원본 파일로 처리됩니다. 파일의 HEADER_FILE_ONLY 속성도 TRUE로 설정되어 있습니다."
	},
	"HEADER_SET_<NAME>": {
		"name": "HEADER_SET_<NAME>",
		"description": "집합 형식 HEADERS가 있는 대상의 <NAME> 헤더 집합에 있는 세미콜론으로 구분된 파일 목록입니다. 상대 경로가 있으면 대상의 소스 디렉터리와 비교하여 계산됩니다. 이 속성은 <cmake-generator-expressions(7)> 생성기 식을 지원합니다."
	},
	"HIP_ARCHITECTURES": {
		"name": "HIP_ARCHITECTURES",
		"description": "디바이스 코드를 생성할 GPU 아키텍처 목록입니다. 아키텍처 이름은 CMAKE_HIP_PLATFORM에 따라 해석됩니다."
	},
	"HIP_EXTENSIONS": {
		"name": "HIP_EXTENSIONS",
		"description": "컴파일러 관련 확장이 요청되는지 여부를 지정하는 부울입니다."
	},
	"HIP_STANDARD": {
		"name": "HIP_STANDARD",
		"description": "이 대상을 빌드하도록 요청된 HIP/C++ 표준입니다."
	},
	"HIP_STANDARD_REQUIRED": {
		"name": "HIP_STANDARD_REQUIRED",
		"description": "HIP_STANDARD 값이 요구 사항인지 여부를 설명하는 부울입니다."
	},
	"IMPORTED": {
		"name": "IMPORTED",
		"description": "대상이 IMPORTED인지 여부를 읽기 전용으로 나타냅니다."
	},
	"IMPORTED_COMMON_LANGUAGE_RUNTIME": {
		"name": "IMPORTED_COMMON_LANGUAGE_RUNTIME",
		"description": "대상이 C++/CLI를 사용하는 경우 정의할 속성입니다."
	},
	"IMPORTED_CONFIGURATIONS": {
		"name": "IMPORTED_CONFIGURATIONS",
		"description": "가져온 대상에 대해 제공된 구성입니다."
	},
	"IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS",
		"description": "IMPORTED 대상의 C++ 모듈 원본을 컴파일하기 위한 전처리기 정의입니다."
	},
	"IMPORTED_CXX_MODULES_COMPILE_FEATURES": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_FEATURES",
		"description": "이 IMPORTED 대상의 C++ 모듈에 대해 사용하도록 설정된 컴파일러 기능입니다."
	},
	"IMPORTED_CXX_MODULES_COMPILE_OPTIONS": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_OPTIONS",
		"description": "이 IMPORTED 대상의 C++ 모듈에 대해 컴파일러에 전달할 옵션 목록입니다."
	},
	"IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES": {
		"name": "IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES",
		"description": "IMPORTED 대상에 대한 C++ 모듈을 컴파일할 때 전처리기 목록에 파일 검색 디렉터리가 포함됩니다."
	},
	"IMPORTED_CXX_MODULES_LINK_LIBRARIES": {
		"name": "IMPORTED_CXX_MODULES_LINK_LIBRARIES",
		"description": "대상의 C++ 모듈에서 C++ 모듈의 사용 요구 사항에 사용할 직접 종속성 목록입니다."
	},
	"IMPORTED_GLOBAL": {
		"name": "IMPORTED_GLOBAL",
		"description": "IMPORTED 대상이 전체적으로 표시되는지 여부를 나타냅니다."
	},
	"IMPORTED_IMPLIB": {
		"name": "IMPORTED_IMPLIB",
		"description": "IMPORTED 대상에 대한 가져오기 라이브러리의 전체 경로입니다."
	},
	"IMPORTED_IMPLIB_<CONFIG>": {
		"name": "IMPORTED_IMPLIB_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_IMPLIB 속성의 특정 버전입니다."
	},
	"IMPORTED_LIBNAME": {
		"name": "IMPORTED_LIBNAME",
		"description": "가져온 인터페이스 라이브러리의 링크 라이브러리 이름을 지정합니다."
	},
	"IMPORTED_LIBNAME_<CONFIG>": {
		"name": "IMPORTED_LIBNAME_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LIBNAME 속성의 특정 버전입니다."
	},
	"IMPORTED_LINK_DEPENDENT_LIBRARIES": {
		"name": "IMPORTED_LINK_DEPENDENT_LIBRARIES",
		"description": "가져온 공유 라이브러리의 종속 공유 라이브러리입니다."
	},
	"IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>": {
		"name": "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_DEPENDENT_LIBRARIES의 특정 버전입니다."
	},
	"IMPORTED_LINK_INTERFACE_LANGUAGES": {
		"name": "IMPORTED_LINK_INTERFACE_LANGUAGES",
		"description": "IMPORTED 정적 라이브러리로 컴파일되는 언어입니다."
	},
	"IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_INTERFACE_LANGUAGES의 특정 버전입니다."
	},
	"IMPORTED_LINK_INTERFACE_LIBRARIES": {
		"name": "IMPORTED_LINK_INTERFACE_LIBRARIES",
		"description": "IMPORTED 대상의 전이적 링크 인터페이스입니다."
	},
	"IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_INTERFACE_LIBRARIES의 특정 버전입니다."
	},
	"IMPORTED_LINK_INTERFACE_MULTIPLICITY": {
		"name": "IMPORTED_LINK_INTERFACE_MULTIPLICITY",
		"description": "IMPORTED 정적 라이브러리의 주기 반복 횟수입니다."
	},
	"IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_INTERFACE_MULTIPLICITY의 특정 버전입니다."
	},
	"IMPORTED_LOCATION": {
		"name": "IMPORTED_LOCATION",
		"description": "IMPORTED 대상에 대한 디스크에 있는 주 파일의 전체 경로입니다."
	},
	"IMPORTED_LOCATION_<CONFIG>": {
		"name": "IMPORTED_LOCATION_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LOCATION 속성의 특정 버전입니다."
	},
	"IMPORTED_NO_SONAME": {
		"name": "IMPORTED_NO_SONAME",
		"description": "IMPORTED 공유 라이브러리 대상에 soname이 없도록 지정합니다."
	},
	"IMPORTED_NO_SONAME_<CONFIG>": {
		"name": "IMPORTED_NO_SONAME_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_NO_SONAME 속성의 특정 버전입니다."
	},
	"IMPORTED_NO_SYSTEM": {
		"name": "IMPORTED_NO_SYSTEM",
		"description": "가져온 대상에서 IMPORTED_NO_SYSTEM을 true로 설정하면 시스템 대상이 아닌 것으로 지정됩니다. 다음과 같은 효과가 있습니다."
	},
	"IMPORTED_OBJECTS": {
		"name": "IMPORTED_OBJECTS",
		"description": "가져온 개체 라이브러리에 대한 디스크에 있는 개체 파일의 세미콜론으로 구분된 절대 경로 목록입니다."
	},
	"IMPORTED_OBJECTS_<CONFIG>": {
		"name": "IMPORTED_OBJECTS_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_OBJECTS 속성의 특정 버전입니다."
	},
	"IMPORTED_SONAME": {
		"name": "IMPORTED_SONAME",
		"description": "공유 라이브러리 형식 IMPORTED 대상의 soname입니다."
	},
	"IMPORTED_SONAME_<CONFIG>": {
		"name": "IMPORTED_SONAME_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_SONAME 속성의 특정 버전입니다."
	},
	"IMPORT_PREFIX": {
		"name": "IMPORT_PREFIX",
		"description": "가져오기 라이브러리 이름 앞에 오는 항목입니다."
	},
	"IMPORT_SUFFIX": {
		"name": "IMPORT_SUFFIX",
		"description": "가져오기 라이브러리 이름 뒤에 오는 항목입니다."
	},
	"INSTALL_NAME_DIR": {
		"name": "INSTALL_NAME_DIR",
		"description": "Apple 플랫폼에 설치된 대상의 디렉토리 이름입니다."
	},
	"INSTALL_REMOVE_ENVIRONMENT_RPATH": {
		"name": "INSTALL_REMOVE_ENVIRONMENT_RPATH",
		"description": "설치 중에 도구 체인 정의 rpaths를 제거할지 여부를 제어합니다."
	},
	"INSTALL_RPATH": {
		"name": "INSTALL_RPATH",
		"description": "설치된 대상에 사용할 rpath입니다."
	},
	"INSTALL_RPATH_USE_LINK_PATH": {
		"name": "INSTALL_RPATH_USE_LINK_PATH",
		"description": "링커 검색 및 설치된 rpath에 경로를 추가합니다."
	},
	"INTERFACE_AUTOMOC_MACRO_NAMES": {
		"name": "INTERFACE_AUTOMOC_MACRO_NAMES",
		"description": "AUTOMOC가 소비자에게 전파될 매크로 이름의 세미콜론으로 구분된 목록입니다."
	},
	"INTERFACE_AUTOUIC_OPTIONS": {
		"name": "INTERFACE_AUTOUIC_OPTIONS",
		"description": "uic에 전달할 인터페이스 옵션 목록입니다."
	},
	"INTERFACE_COMPILE_DEFINITIONS": {
		"name": "INTERFACE_COMPILE_DEFINITIONS",
		"description": "라이브러리의 공용 property_name 요구 사항 목록입니다."
	},
	"INTERFACE_COMPILE_FEATURES": {
		"name": "INTERFACE_COMPILE_FEATURES",
		"description": "라이브러리의 공용 property_name 요구 사항 목록입니다."
	},
	"INTERFACE_COMPILE_OPTIONS": {
		"name": "INTERFACE_COMPILE_OPTIONS",
		"description": "라이브러리의 공용 property_name 요구 사항 목록입니다."
	},
	"INTERFACE_CXX_MODULE_SETS": {
		"name": "INTERFACE_CXX_MODULE_SETS",
		"description": "대상의 PUBLIC C++ 모듈 세트의 읽기 전용 목록(즉, 유형이 CXX_MODULES인 모든 파일 세트). 이러한 C++ 모듈 세트에 나열된 파일은 설치로 설치하고 설치 및 내보내기로 내보낼 수 있습니다."
	},
	"INTERFACE_HEADER_SETS": {
		"name": "INTERFACE_HEADER_SETS",
		"description": "대상의 INTERFACE 및 PUBLIC 헤더 집합(예: 형식 HEADERS가 있는 모든 파일 집합)에 대한 읽기 전용 목록입니다. 이 헤더 집합에 나열된 파일은 install을 사용하여 설치하고 install 및 export를 사용하여 내보낼 수 있습니다."
	},
	"INTERFACE_HEADER_SETS_TO_VERIFY": {
		"name": "INTERFACE_HEADER_SETS_TO_VERIFY",
		"description": "확인해야 하는 대상의 PUBLIC 및 INTERFACE 헤더 세트를 지정하는 데 사용됩니다."
	},
	"INTERFACE_INCLUDE_DIRECTORIES": {
		"name": "INTERFACE_INCLUDE_DIRECTORIES",
		"description": "라이브러리의 공용 property_name 요구 사항 목록입니다."
	},
	"INTERFACE_LINK_DEPENDS": {
		"name": "INTERFACE_LINK_DEPENDS",
		"description": "대상 이진 파일이 연결을 위해 사용하는 추가 공용 인터페이스 파일입니다."
	},
	"INTERFACE_LINK_DIRECTORIES": {
		"name": "INTERFACE_LINK_DIRECTORIES",
		"description": "라이브러리의 공용 property_name 요구 사항 목록입니다."
	},
	"INTERFACE_LINK_LIBRARIES": {
		"name": "INTERFACE_LINK_LIBRARIES",
		"description": "라이브러리의 공용 인터페이스 라이브러리를 나열합니다."
	},
	"INTERFACE_LINK_LIBRARIES_DIRECT": {
		"name": "INTERFACE_LINK_LIBRARIES_DIRECT",
		"description": "이 라이브러리의 소비자가 직접 링크 종속성으로 처리해야 하는 라이브러리 목록입니다."
	},
	"INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE": {
		"name": "INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE",
		"description": "이 라이브러리의 소비자가 직접 링크 종속성으로 취급하지 않아야 하는 라이브러리 목록입니다."
	},
	"INTERFACE_LINK_OPTIONS": {
		"name": "INTERFACE_LINK_OPTIONS",
		"description": "라이브러리의 공용 property_name 요구 사항 목록입니다."
	},
	"INTERFACE_POSITION_INDEPENDENT_CODE": {
		"name": "INTERFACE_POSITION_INDEPENDENT_CODE",
		"description": "소비자가 위치와 관계없는 대상을 만들어야 하는지 여부를 나타냅니다."
	},
	"INTERFACE_PRECOMPILE_HEADERS": {
		"name": "INTERFACE_PRECOMPILE_HEADERS",
		"description": "사용 대상으로 미리 컴파일할 인터페이스 헤더 파일의 목록입니다."
	},
	"INTERFACE_SOURCES": {
		"name": "INTERFACE_SOURCES",
		"description": "사용 대상으로 컴파일할 인터페이스 소스 목록입니다."
	},
	"INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": {
		"name": "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES",
		"description": "라이브러리의 공용 시스템 포함 디렉터리 목록입니다."
	},
	"IOS_INSTALL_COMBINED": {
		"name": "IOS_INSTALL_COMBINED",
		"description": "설치할 때 결합된(디바이스 및 시뮬레이터) 대상을 빌드합니다."
	},
	"ISPC_HEADER_DIRECTORY": {
		"name": "ISPC_HEADER_DIRECTORY",
		"description": "대상에서 제공한 ISPC 헤더의 상대 출력 디렉터리를 지정합니다."
	},
	"ISPC_HEADER_SUFFIX": {
		"name": "ISPC_HEADER_SUFFIX",
		"description": "대상에서 제공한 ISPC 생성된 헤더에 사용할 출력 접미사를 지정합니다."
	},
	"ISPC_INSTRUCTION_SETS": {
		"name": "ISPC_INSTRUCTION_SETS",
		"description": "코드를 생성할 명령어 집합 아키텍처 목록입니다."
	},
	"JOB_POOL_COMPILE": {
		"name": "JOB_POOL_COMPILE",
		"description": "Ninja만 해당: 컴파일에 사용되는 풀입니다."
	},
	"JOB_POOL_LINK": {
		"name": "JOB_POOL_LINK",
		"description": "Ninja만 해당: 연결에 사용되는 풀입니다."
	},
	"JOB_POOL_PRECOMPILE_HEADER": {
		"name": "JOB_POOL_PRECOMPILE_HEADER",
		"description": "Ninja 전용: 미리 컴파일된 헤더를 생성하는 데 사용되는 풀입니다."
	},
	"<LANG>_CLANG_TIDY": {
		"name": "<LANG>_CLANG_TIDY",
		"description": "이 속성은 <LANG>이 C, CXX, OBJC 또는 OBJCXX인 경우에만 구현됩니다."
	},
	"<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR": {
		"name": "<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR",
		"description": "이 속성은 <LANG>이 C, CXX, OBJC 또는 OBJCXX인 경우에만 구현되며, <LANG>_CLANG_TIDY를 설정한 경우에만 적용됩니다."
	},
	"<LANG>_COMPILER_LAUNCHER": {
		"name": "<LANG>_COMPILER_LAUNCHER",
		"description": "이 속성은 <LANG>이 C, CXX, Fortran, HIP, ISPC, OBJC, OBJCXX 또는 CUDA인 경우에만 구현됩니다."
	},
	"<LANG>_CPPCHECK": {
		"name": "<LANG>_CPPCHECK",
		"description": "이 속성은 <LANG>이 C 또는 CXX인 경우에만 지원됩니다."
	},
	"<LANG>_CPPLINT": {
		"name": "<LANG>_CPPLINT",
		"description": "이 속성은 <LANG>이 C 또는 CXX인 경우에만 지원됩니다."
	},
	"<LANG>_EXTENSIONS": {
		"name": "<LANG>_EXTENSIONS",
		"description": "변형은 다음과 같습니다."
	},
	"<LANG>_INCLUDE_WHAT_YOU_USE": {
		"name": "<LANG>_INCLUDE_WHAT_YOU_USE",
		"description": "이 속성은 <LANG>이 C 또는 CXX인 경우에만 구현됩니다."
	},
	"<LANG>_LINKER_LAUNCHER": {
		"name": "<LANG>_LINKER_LAUNCHER",
		"description": "이 속성은 <LANG>이 C, CXX, OBJC 또는 OBJCXX인 경우에만 구현됩니다."
	},
	"<LANG>_STANDARD": {
		"name": "<LANG>_STANDARD",
		"description": "변형은 다음과 같습니다."
	},
	"<LANG>_STANDARD_REQUIRED": {
		"name": "<LANG>_STANDARD_REQUIRED",
		"description": "변형은 다음과 같습니다."
	},
	"<LANG>_VISIBILITY_PRESET": {
		"name": "<LANG>_VISIBILITY_PRESET",
		"description": "기호 표시 여부 컴파일 플래그 값"
	},
	"LIBRARY_OUTPUT_DIRECTORY": {
		"name": "LIBRARY_OUTPUT_DIRECTORY",
		"description": "XXX 대상 파일을 빌드할 출력 디렉터리입니다."
	},
	"LIBRARY_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "LIBRARY 대상 파일의 구성별 출력 디렉터리입니다."
	},
	"LIBRARY_OUTPUT_NAME": {
		"name": "LIBRARY_OUTPUT_NAME",
		"description": "XXX 대상 파일의 출력 이름입니다."
	},
	"LIBRARY_OUTPUT_NAME_<CONFIG>": {
		"name": "LIBRARY_OUTPUT_NAME_<CONFIG>",
		"description": "LIBRARY 대상 파일의 구성별 출력 이름입니다."
	},
	"LINKER_LANGUAGE": {
		"name": "LINKER_LANGUAGE",
		"description": "컴파일러에서 링커를 호출하는 언어를 지정합니다."
	},
	"LINKER_TYPE": {
		"name": "LINKER_TYPE",
		"description": "링크 단계에 사용할 링커를 지정합니다. 속성 값은 생성기 식 <cmake-generator-expressions(7)>을 사용할 수 있습니다."
	},
	"LINK_DEPENDS": {
		"name": "LINK_DEPENDS",
		"description": "대상 이진 파일이 연결을 위해 사용하는 추가 파일입니다."
	},
	"LINK_DEPENDS_NO_SHARED": {
		"name": "LINK_DEPENDS_NO_SHARED",
		"description": "연결된 공유 라이브러리 파일을 사용하지 마세요."
	},
	"LINK_FLAGS": {
		"name": "LINK_FLAGS",
		"description": "공유 라이브러리, 모듈 라이브러리 또는 실행 파일인 경우 이 대상을 연결할 때 사용할 추가 플래그입니다. 정적 라이브러리는 STATIC_LIBRARY_OPTIONS 또는 STATIC_LIBRARY_FLAGS 속성을 사용해야 합니다."
	},
	"LINK_FLAGS_<CONFIG>": {
		"name": "LINK_FLAGS_<CONFIG>",
		"description": "SHARED 라이브러리, MODULE 또는 EXECUTABLE 대상의 구성별 링커 플래그입니다."
	},
	"LINK_INTERFACE_LIBRARIES": {
		"name": "LINK_INTERFACE_LIBRARIES",
		"description": "공유 라이브러리 또는 실행 파일의 공용 인터페이스 라이브러리를 나열합니다."
	},
	"LINK_INTERFACE_LIBRARIES_<CONFIG>": {
		"name": "LINK_INTERFACE_LIBRARIES_<CONFIG>",
		"description": "대상에 대한 공용 인터페이스 라이브러리의 구성별 목록입니다."
	},
	"LINK_INTERFACE_MULTIPLICITY": {
		"name": "LINK_INTERFACE_MULTIPLICITY",
		"description": "순환 종속성이 있는 STATIC 라이브러리의 반복 횟수입니다."
	},
	"LINK_INTERFACE_MULTIPLICITY_<CONFIG>": {
		"name": "LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
		"description": "STATIC 라이브러리의 주기에 대한 구성별 반복 횟수입니다."
	},
	"LINK_LIBRARIES": {
		"name": "LINK_LIBRARIES",
		"description": "직접 링크 종속성 목록입니다."
	},
	"LINK_LIBRARIES_ONLY_TARGETS": {
		"name": "LINK_LIBRARIES_ONLY_TARGETS",
		"description": "대상 이름일 수도 있는 링크 항목이 실제로 존재하는 대상이도록 적용합니다."
	},
	"LINK_LIBRARY_OVERRIDE": {
		"name": "LINK_LIBRARY_OVERRIDE",
		"description": "LINK_LIBRARY 생성기 식에서 라이브러리와 연결된 라이브러리 기능을 재정의합니다. 이는 서로 다른 LINK_LIBRARY 생성기 식에서 동일한 라이브러리에 대해 서로 다른 기능을 지정함으로써 발생하는 호환되지 않는 라이브러리 기능을 해결하는 데 사용할 수 있습니다."
	},
	"LINK_LIBRARY_OVERRIDE_<LIBRARY>": {
		"name": "LINK_LIBRARY_OVERRIDE_<LIBRARY>",
		"description": "LINK_LIBRARY 생성기 식에서 <LIBRARY>과(와) 연결된 라이브러리 기능을 재정의합니다. 이것은 다른 LINK_LIBRARY 생성기 식에서 <LIBRARY>에 대해 다른 기능을 지정함으로써 발생하는 호환되지 않는 라이브러리 기능을 해결하는 데 사용할 수 있습니다."
	},
	"LINK_SEARCH_END_STATIC": {
		"name": "LINK_SEARCH_END_STATIC",
		"description": "정적 시스템 라이브러리가 사용되도록 링크 줄을 종료합니다."
	},
	"LINK_SEARCH_START_STATIC": {
		"name": "LINK_SEARCH_START_STATIC",
		"description": "링커가 기본적으로 정적 라이브러리를 검색한다고 가정합니다."
	},
	"LINK_WHAT_YOU_USE": {
		"name": "LINK_WHAT_YOU_USE",
		"description": "TRUE로 설정하면 연결된 후 대상에서 변수 CMAKE_LINK_WHAT_YOU_USE_CHECK의 내용을 자동으로 실행하는 부울 옵션입니다. 또한 CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG 변수로 지정된 링커 플래그는 링크 명령으로 대상에 전달되므로 명령줄에 지정된 모든 라이브러리가 대상에 연결됩니다. 그러면 링크가 이 대상에서 사용하는 기호를 제공하지 않지만 링크되는 라이브러리 목록을 생성합니다."
	},
	"LOCATION_<CONFIG>": {
		"name": "LOCATION_<CONFIG>",
		"description": "디스크에서 대상 위치를 제공하는 읽기 전용 속성입니다."
	},
	"MACHO_COMPATIBILITY_VERSION": {
		"name": "MACHO_COMPATIBILITY_VERSION",
		"description": "Mach-O 이진 파일에 대한 이 대상의 호환성 버전 번호입니다."
	},
	"MACHO_CURRENT_VERSION": {
		"name": "MACHO_CURRENT_VERSION",
		"description": "Mach-O 이진 파일에 대한 이 대상의 현재 버전 번호입니다."
	},
	"MACOSX_BUNDLE": {
		"name": "MACOSX_BUNDLE",
		"description": "macOS 또는 iOS에서 실행 파일을 애플리케이션 번들로 빌드합니다."
	},
	"MACOSX_BUNDLE_INFO_PLIST": {
		"name": "MACOSX_BUNDLE_INFO_PLIST",
		"description": "macOS 및 iOS 애플리케이션 번들의 사용자 지정 Info.plist 템플릿을 지정합니다."
	},
	"MACOSX_FRAMEWORK_INFO_PLIST": {
		"name": "MACOSX_FRAMEWORK_INFO_PLIST",
		"description": "macOS 및 iOS 프레임워크의 사용자 지정 Info.plist 템플릿을 지정합니다."
	},
	"MACOSX_RPATH": {
		"name": "MACOSX_RPATH",
		"description": "macOS 또는 iOS의 대상이 런타임에 rpath를 사용하여 배치되는지 여부를 나타냅니다."
	},
	"MANUALLY_ADDED_DEPENDENCIES": {
		"name": "MANUALLY_ADDED_DEPENDENCIES",
		"description": "다른 최상위 대상에 수동으로 추가된 종속성을 가져옵니다."
	},
	"MAP_IMPORTED_CONFIG_<CONFIG>": {
		"name": "MAP_IMPORTED_CONFIG_<CONFIG>",
		"description": "프로젝트 구성에서 가져온 대상 구성으로 매핑합니다."
	},
	"MSVC_DEBUG_INFORMATION_FORMAT": {
		"name": "MSVC_DEBUG_INFORMATION_FORMAT",
		"description": "MSVC ABI를 대상으로 할 때 디버그 정보 형식을 선택하세요."
	},
	"MSVC_RUNTIME_LIBRARY": {
		"name": "MSVC_RUNTIME_LIBRARY",
		"description": "MSVC ABI를 대상으로 하는 컴파일러에서 사용할 MSVC 런타임 라이브러리를 선택합니다."
	},
	"NAME": {
		"name": "NAME",
		"description": "대상의 논리적 이름입니다."
	},
	"NO_SONAME": {
		"name": "NO_SONAME",
		"description": "공유 라이브러리를 연결할 때 soname을 설정할지 여부를 나타냅니다."
	},
	"NO_SYSTEM_FROM_IMPORTED": {
		"name": "NO_SYSTEM_FROM_IMPORTED",
		"description": "사용된 가져온 대상 인터페이스의 포함 디렉터리를 시스템 디렉터리로 처리하지 마세요."
	},
	"OBJCXX_EXTENSIONS": {
		"name": "OBJCXX_EXTENSIONS",
		"description": "컴파일러 관련 확장이 요청되는지 여부를 지정하는 부울입니다."
	},
	"OBJCXX_STANDARD": {
		"name": "OBJCXX_STANDARD",
		"description": "이 대상을 빌드하도록 기능이 요청되는 ObjC++ 표준입니다."
	},
	"OBJCXX_STANDARD_REQUIRED": {
		"name": "OBJCXX_STANDARD_REQUIRED",
		"description": "OBJCXX_STANDARD 값이 요구 사항인지 여부를 설명하는 부울입니다."
	},
	"OBJC_EXTENSIONS": {
		"name": "OBJC_EXTENSIONS",
		"description": "컴파일러 관련 확장이 요청되는지 여부를 지정하는 부울입니다."
	},
	"OBJC_STANDARD": {
		"name": "OBJC_STANDARD",
		"description": "이 대상을 빌드하도록 기능이 요청되는 OBJC 표준입니다."
	},
	"OBJC_STANDARD_REQUIRED": {
		"name": "OBJC_STANDARD_REQUIRED",
		"description": "OBJC_STANDARD 값이 요구 사항인지 여부를 설명하는 부울입니다."
	},
	"OPTIMIZE_DEPENDENCIES": {
		"name": "OPTIMIZE_DEPENDENCIES",
		"description": "정적 및 개체 라이브러리의 종속성 최적화를 활성화합니다."
	},
	"OSX_ARCHITECTURES": {
		"name": "OSX_ARCHITECTURES",
		"description": "macOS의 대상별 아키텍처입니다."
	},
	"OSX_ARCHITECTURES_<CONFIG>": {
		"name": "OSX_ARCHITECTURES_<CONFIG>",
		"description": "대상의 구성별 macOS 및 iOS 이진 아키텍처입니다."
	},
	"OUTPUT_NAME": {
		"name": "OUTPUT_NAME",
		"description": "대상 파일의 출력 이름입니다."
	},
	"OUTPUT_NAME_<CONFIG>": {
		"name": "OUTPUT_NAME_<CONFIG>",
		"description": "구성별 대상 파일 기본 이름입니다."
	},
	"PCH_INSTANTIATE_TEMPLATES": {
		"name": "PCH_INSTANTIATE_TEMPLATES",
		"description": "이 속성을 true로 설정하면 PCH를 생성하는 동안 지원되는 경우 미리 컴파일된 헤더 컴파일러 옵션에 템플릿을 인스턴스화하기 위한 플래그가 포함됩니다. 그러면 컴파일 시간이 크게 향상될 수 있습니다. 버전 11부터 Clang에서 지원됩니다."
	},
	"PCH_WARN_INVALID": {
		"name": "PCH_WARN_INVALID",
		"description": "이 속성을 true로 설정하면 미리 컴파일 헤더 컴파일러 옵션에는 잘못된 미리 컴파일된 헤더에 관해 경고해야 하는 컴파일러 플래그가 포함됩니다(예: GNU 컴파일러의 경우 -Winvalid-pch)."
	},
	"PDB_NAME": {
		"name": "PDB_NAME",
		"description": "실행 파일 및 공유 라이브러리 대상의 링커에서 생성된 MS 디버그 기호 .pdb 파일의 출력 이름입니다."
	},
	"PDB_NAME_<CONFIG>": {
		"name": "PDB_NAME_<CONFIG>",
		"description": "실행 파일 및 공유 라이브러리 대상의 링커에서 생성된 MS 디버그 기호 .pdb 파일의 구성별 출력 이름입니다."
	},
	"PDB_OUTPUT_DIRECTORY": {
		"name": "PDB_OUTPUT_DIRECTORY",
		"description": "실행 파일 또는 공유 라이브러리 대상의 링커에서 생성된 MS 디버그 기호 .pdb 파일의 출력 디렉터리입니다."
	},
	"PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "실행 파일 또는 공유 라이브러리 대상의 링커에서 생성된 MS 디버그 기호 .pdb 파일의 구성별 출력 디렉터리입니다."
	},
	"POSITION_INDEPENDENT_CODE": {
		"name": "POSITION_INDEPENDENT_CODE",
		"description": "위치와 관계없는 대상을 만들지 여부를 나타냅니다."
	},
	"POST_INSTALL_SCRIPT": {
		"name": "POST_INSTALL_SCRIPT",
		"description": "사용되지 않는 설치 지원입니다."
	},
	"PRECOMPILE_HEADERS": {
		"name": "PRECOMPILE_HEADERS",
		"description": "미리 컴파일할 헤더 파일의 목록입니다."
	},
	"PRECOMPILE_HEADERS_REUSE_FROM": {
		"name": "PRECOMPILE_HEADERS_REUSE_FROM",
		"description": "미리 컴파일된 헤더 빌드 아티팩트를 재사용할 대상입니다."
	},
	"PREFIX": {
		"name": "PREFIX",
		"description": "라이브러리 이름 앞에 오는 항목입니다."
	},
	"PRE_INSTALL_SCRIPT": {
		"name": "PRE_INSTALL_SCRIPT",
		"description": "사용되지 않는 설치 지원입니다."
	},
	"PRIVATE_HEADER": {
		"name": "PRIVATE_HEADER",
		"description": "FRAMEWORK 공유 라이브러리 대상에서 프라이빗 헤더 파일을 지정합니다."
	},
	"PROJECT_LABEL": {
		"name": "PROJECT_LABEL",
		"description": "IDE에서 대상 이름을 변경합니다."
	},
	"PUBLIC_HEADER": {
		"name": "PUBLIC_HEADER",
		"description": "FRAMEWORK 공유 라이브러리 대상에서 공용 헤더 파일을 지정합니다."
	},
	"RESOURCE": {
		"name": "RESOURCE",
		"description": "FRAMEWORK 또는 BUNDLE에서 리소스 파일을 지정합니다."
	},
	"RUNTIME_OUTPUT_DIRECTORY": {
		"name": "RUNTIME_OUTPUT_DIRECTORY",
		"description": "XXX 대상 파일을 빌드할 출력 디렉터리입니다."
	},
	"RUNTIME_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "RUNTIME 대상 파일의 구성별 출력 디렉터리입니다."
	},
	"RUNTIME_OUTPUT_NAME": {
		"name": "RUNTIME_OUTPUT_NAME",
		"description": "XXX 대상 파일의 출력 이름입니다."
	},
	"RUNTIME_OUTPUT_NAME_<CONFIG>": {
		"name": "RUNTIME_OUTPUT_NAME_<CONFIG>",
		"description": "RUNTIME 대상 파일의 구성별 출력 이름입니다."
	},
	"SKIP_BUILD_RPATH": {
		"name": "SKIP_BUILD_RPATH",
		"description": "빌드 트리에 rpath를 사용해야 하는지 여부를 나타냅니다."
	},
	"SOURCES": {
		"name": "SOURCES",
		"description": "대상의 원본 파일 경로 목록을 지정합니다. 다음 명령은 모두 SOURCES 대상 속성에 대한 설정이나 추가를 수행하며, SOURCES 대상 속성을 조작하는 일반적인 방법입니다."
	},
	"SOVERSION": {
		"name": "SOVERSION",
		"description": "공유 라이브러리 대상의 ABI 버전 번호입니다."
	},
	"STATIC_LIBRARY_FLAGS": {
		"name": "STATIC_LIBRARY_FLAGS",
		"description": "정적 라이브러리 대상의 아카이버(또는 MSVC 라이브러리 관리자) 플래그입니다. 공유 라이브러리, 모듈 또는 실행 파일인 대상은 LINK_OPTIONS 또는 LINK_FLAGS 대상 속성을 사용해야 합니다."
	},
	"STATIC_LIBRARY_FLAGS_<CONFIG>": {
		"name": "STATIC_LIBRARY_FLAGS_<CONFIG>",
		"description": "정적 라이브러리 대상의 구성별 아카이버(또는 MSVC 라이브러리 관리자) 플래그입니다."
	},
	"STATIC_LIBRARY_OPTIONS": {
		"name": "STATIC_LIBRARY_OPTIONS",
		"description": "정적 라이브러리 대상의 아카이버(또는 MSVC 라이브러리 관리자) 플래그입니다. 공유 라이브러리, 모듈 또는 실행 파일인 대상은 LINK_OPTIONS 대상 속성을 사용해야 합니다."
	},
	"SUFFIX": {
		"name": "SUFFIX",
		"description": "대상 이름 뒤에 오는 항목입니다."
	},
	"Swift_COMPILATION_MODE": {
		"name": "Swift_COMPILATION_MODE",
		"description": "Swift가 대상을 컴파일하는 방법을 지정합니다."
	},
	"Swift_LANGUAGE_VERSION": {
		"name": "Swift_LANGUAGE_VERSION",
		"description": "이 속성은 대상에서 Swift 소스의 언어 버전을 설정합니다. 지정하지 않으면 기본적으로 CMAKE_Swift_LANGUAGE_VERSION(으)로 설정되고, 지정하면 컴파일러에서 지원하는 최신 버전입니다."
	},
	"Swift_MODULE_DIRECTORY": {
		"name": "Swift_MODULE_DIRECTORY",
		"description": "대상에서 제공된 Swift 모듈의 출력 디렉터리를 지정합니다."
	},
	"Swift_MODULE_NAME": {
		"name": "Swift_MODULE_NAME",
		"description": "이 속성은 Swift 모듈의 이름을 지정합니다. 기본적으로 대상 이름으로 설정됩니다."
	},
	"TEST_LAUNCHER": {
		"name": "TEST_LAUNCHER",
		"description": "지정된 시작 관리자를 사용하여 실행 파일을 실행합니다. 이 명령은 빌드 대상 시스템 실행 파일에 대한 add_test 명령의 접두사로 추가되며 호스트 컴퓨터에서 실행됩니다."
	},
	"TRANSITIVE_COMPILE_PROPERTIES": {
		"name": "TRANSITIVE_COMPILE_PROPERTIES",
		"description": "대상과 그 종속 요소에 대해 TARGET_PROPERTY 생성기 표현식이 링크 종속성의 전이적 폐쇄에서 수집된 값의 조합으로 평가하는 속성(LINK_ONLY로 보호되는 항목 제외)입니다."
	},
	"TRANSITIVE_LINK_PROPERTIES": {
		"name": "TRANSITIVE_LINK_PROPERTIES",
		"description": "대상과 그 종속 요소에 대해 TARGET_PROPERTY 생성기 표현식이 링크 종속성의 전이적 폐쇄에서 수집된 값의 조합으로 평가하는 속성(LINK_ONLY로 보호되는 항목 포함)입니다."
	},
	"UNITY_BUILD": {
		"name": "UNITY_BUILD",
		"description": "이 속성을 true로 설정하면 더 빠른 컴파일을 위해 대상 소스 파일이 일괄 처리로 결합됩니다. 이 작업을 수행하려면 원래 소스를 #include하는 unity 소스(세트)를 만든 다음, 원래 소스 대신 해당 unity 소스를 컴파일합니다. 이를 Unity 또는 Jumbo 빌드라고 합니다."
	},
	"UNITY_BUILD_BATCH_SIZE": {
		"name": "UNITY_BUILD_BATCH_SIZE",
		"description": "UNITY_BUILD 대상 속성으로 unity 빌드를 사용하도록 설정한 경우 하나의 unity 소스 파일로 결합할 수 있는 최대 소스 파일 수를 지정합니다. 원래 소스 파일은 이 제한을 적용하는 데 필요한 만큼 unity 소스 파일에 분산됩니다."
	},
	"UNITY_BUILD_CODE_AFTER_INCLUDE": {
		"name": "UNITY_BUILD_CODE_AFTER_INCLUDE",
		"description": "생성된 Unity 소스 파일의 모든 #include 문 바로 뒤에 UNITY_BUILD 기능을 통해 포함된 축자 문자열인 코드 조각입니다. 예:"
	},
	"UNITY_BUILD_CODE_BEFORE_INCLUDE": {
		"name": "UNITY_BUILD_CODE_BEFORE_INCLUDE",
		"description": "생성된 Unity 소스 파일의 모든 #include 문 바로 앞에 UNITY_BUILD 기능을 통해 포함된 축자 문자열인 코드 조각입니다. 예:"
	},
	"UNITY_BUILD_MODE": {
		"name": "UNITY_BUILD_MODE",
		"description": "CMake는 버킷으로 함께 그룹화되는 소스를 선택하는 다양한 알고리즘을 제공합니다. 다음 허용 가능한 값이 포함된 속성으로 선택이 결정됩니다."
	},
	"UNITY_BUILD_UNIQUE_ID": {
		"name": "UNITY_BUILD_UNIQUE_ID",
		"description": "Unity 빌드 중에 고유한 파일별 값으로 설정되는 유효한 C 식별자의 이름입니다."
	},
	"VERIFY_INTERFACE_HEADER_SETS": {
		"name": "VERIFY_INTERFACE_HEADER_SETS",
		"description": "대상의 PUBLIC 및 INTERFACE 헤더 세트에 있는 모든 헤더가 자체적으로 포함될 수 있는지 확인하는 데 사용됩니다."
	},
	"VERSION": {
		"name": "VERSION",
		"description": "공유 라이브러리 대상의 버전 번호입니다."
	},
	"VISIBILITY_INLINES_HIDDEN": {
		"name": "VISIBILITY_INLINES_HIDDEN",
		"description": "컴파일 플래그를 추가하여 인라인 함수의 기호를 숨길지 여부를 나타냅니다."
	},
	"VS_CONFIGURATION_TYPE": {
		"name": "VS_CONFIGURATION_TYPE",
		"description": "Visual Studio 프로젝트 구성 형식입니다."
	},
	"VS_DEBUGGER_COMMAND": {
		"name": "VS_DEBUGGER_COMMAND",
		"description": "Visual Studio C++ 대상에 대한 로컬 디버거 명령을 설정합니다. 속성 값은 생성기 식 <cmake-generator-expressions(7)>을 사용할 수 있습니다. 이는 Visual Studio 프로젝트 파일의 <LocalDebuggerCommand> 정의됩니다. 이 속성은 대상을 만들 때 설정된 경우 변수 CMAKE_VS_DEBUGGER_COMMAND 값에 의해 초기화됩니다."
	},
	"VS_DEBUGGER_COMMAND_ARGUMENTS": {
		"name": "VS_DEBUGGER_COMMAND_ARGUMENTS",
		"description": "Visual Studio C++ 대상에 대한 로컬 디버거 명령줄 인수를 설정합니다. 속성 값은 생성기 식 <cmake-generator-expressions(7)>을 사용할 수 있습니다. 이는 Visual Studio 프로젝트 파일의 <LocalDebuggerCommandArguments>에 정의되어 있습니다. 이 속성은 대상을 만들 때 설정된 경우 변수 CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS 값에 의해 초기화됩니다."
	},
	"VS_DEBUGGER_ENVIRONMENT": {
		"name": "VS_DEBUGGER_ENVIRONMENT",
		"description": "Visual Studio C++ 대상에 대한 로컬 디버거 환경을 설정합니다. 속성 값은 생성기 식 <cmake-generator-expressions(7)>을 사용할 수 있습니다. 이는 Visual Studio 프로젝트 파일의 <LocalDebuggerEnvironment>에 정의되어 있습니다. 이 속성은 대상을 만들 때 설정된 경우 변수 CMAKE_VS_DEBUGGER_ENVIRONMENT 값에 의해 초기화됩니다."
	},
	"VS_DEBUGGER_WORKING_DIRECTORY": {
		"name": "VS_DEBUGGER_WORKING_DIRECTORY",
		"description": "Visual Studio C++ 대상에 대한 로컬 디버거 작업 디렉터리를 설정합니다. 속성 값은 생성기 식 <cmake-generator-expressions(7)>을 사용할 수 있습니다. Visual Studio 프로젝트 파일의 <LocalDebuggerWorkingDirectory> 정의됩니다. 이 속성은 대상을 만들 때 설정된 경우 변수 CMAKE_VS_DEBUGGER_WORKING_DIRECTORY 값에 의해 초기화됩니다."
	},
	"VS_DESKTOP_EXTENSIONS_VERSION": {
		"name": "VS_DESKTOP_EXTENSIONS_VERSION",
		"description": "Visual Studio Windows 10 Desktop 확장 버전"
	},
	"VS_DOTNET_DOCUMENTATION_FILE": {
		"name": "VS_DOTNET_DOCUMENTATION_FILE",
		"description": "Visual Studio 관리형 프로젝트 .NET 설명서 출력"
	},
	"VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>": {
		"name": "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>",
		"description": ".NET 참조 <refname>의 XML 속성 <tagname>을 정의합니다."
	},
	"VS_DOTNET_REFERENCES": {
		"name": "VS_DOTNET_REFERENCES",
		"description": "Visual Studio 관리형 프로젝트 .NET 참조"
	},
	"VS_DOTNET_REFERENCES_COPY_LOCAL": {
		"name": "VS_DOTNET_REFERENCES_COPY_LOCAL",
		"description": "대상에서 모든 .NET 힌트 참조의 Copy Local 속성을 설정합니다."
	},
	"VS_DOTNET_REFERENCE_<refname>": {
		"name": "VS_DOTNET_REFERENCE_<refname>",
		"description": "이름 <refname> 및 힌트 경로를 사용하는 Visual Studio 관리형 프로젝트 .NET 참조입니다."
	},
	"VS_DOTNET_STARTUP_OBJECT": {
		"name": "VS_DOTNET_STARTUP_OBJECT",
		"description": "Visual Studio .NET 대상에서 시작 개체 속성을 설정합니다. 속성 값은 정규화된 클래스 이름(패키지 이름 포함)을 정의합니다(예: MyCompany.Package.MyStarterClass)."
	},
	"VS_DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "VS_DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": ".NET 대상 프레임워크 버전을 지정합니다."
	},
	"VS_DPI_AWARE": {
		"name": "VS_DPI_AWARE",
		"description": "Visual Studio 대상 프로젝트 속성에서 매니페스트 도구 -> 입력 및 출력 -> DPI 인식을 설정합니다."
	},
	"VS_FILTER_PROPS": {
		"name": "VS_FILTER_PROPS",
		"description": "visual studio C++ 프로젝트 필터 파일에 포함할 필터 props 파일을 설정합니다."
	},
	"VS_GLOBAL_KEYWORD": {
		"name": "VS_GLOBAL_KEYWORD",
		"description": "Visual Studio 프로젝트 키워드입니다."
	},
	"VS_GLOBAL_PROJECT_TYPES": {
		"name": "VS_GLOBAL_PROJECT_TYPES",
		"description": "Visual Studio 프로젝트 형식입니다."
	},
	"VS_GLOBAL_ROOTNAMESPACE": {
		"name": "VS_GLOBAL_ROOTNAMESPACE",
		"description": "Visual Studio 프로젝트 루트 네임스페이스입니다."
	},
	"VS_GLOBAL_<variable>": {
		"name": "VS_GLOBAL_<variable>",
		"description": "Visual Studio 프로젝트별 전역 변수입니다."
	},
	"VS_IOT_EXTENSIONS_VERSION": {
		"name": "VS_IOT_EXTENSIONS_VERSION",
		"description": "Visual Studio Windows 10 IoT 확장 버전"
	},
	"VS_IOT_STARTUP_TASK": {
		"name": "VS_IOT_STARTUP_TASK",
		"description": "Visual Studio Windows 10 IoT 연속 백그라운드 작업"
	},
	"VS_JUST_MY_CODE_DEBUGGING": {
		"name": "VS_JUST_MY_CODE_DEBUGGING",
		"description": "Visual Studio 디버거를 사용하여 내 코드만을 사용하도록 설정합니다."
	},
	"VS_KEYWORD": {
		"name": "VS_KEYWORD",
		"description": "제거됨 Visual Studio 9 2008 생성기 및 이전 버전의 Visual Studio 프로젝트 키워드를 지정했지만 이러한 생성기는 모두 제거되었습니다."
	},
	"VS_MOBILE_EXTENSIONS_VERSION": {
		"name": "VS_MOBILE_EXTENSIONS_VERSION",
		"description": "Visual Studio Windows 10 Mobile 확장 버전"
	},
	"VS_NO_COMPILE_BATCHING": {
		"name": "VS_NO_COMPILE_BATCHING",
		"description": "대상에 대한 컴파일 일괄 처리를 끕니다. 일반적으로 MSBuild는 여러 c/cpp 파일을 사용하여 컴파일러를 호출하고 컴파일러는 빌드를 병렬로 만들기 위해 각 파일에 대한 하위 프로세스를 시작합니다. 한 번에 하나의 파일로 컴파일러를 호출하려면 VS_NO_COMPILE_BATCHING을 ON으로 설정하세요. 이 플래그가 설정되면 MSBuild는 한 번에 하나의 c/cpp 파일을 사용하여 컴파일러를 호출합니다. 일부 빌드 캐싱 도구와 같이 컴파일러를 대체하는 도구를 사용하려는 경우에 유용합니다."
	},
	"VS_NO_SOLUTION_DEPLOY": {
		"name": "VS_NO_SOLUTION_DEPLOY",
		"description": "대상을 생성된 Visual Studio 솔루션의 Windows CE 또는 Windows Phone 디바이스에 대한 배포용으로 표시하지 않도록 지정합니다."
	},
	"VS_PACKAGE_REFERENCES": {
		"name": "VS_PACKAGE_REFERENCES",
		"description": "Nuget의 Visual Studio 패키지 참조입니다."
	},
	"VS_PLATFORM_TOOLSET": {
		"name": "VS_PLATFORM_TOOLSET",
		"description": "대상을 빌드하는 데 사용되는 플랫폼 도구 세트를 재정의합니다."
	},
	"VS_PROJECT_IMPORT": {
		"name": "VS_PROJECT_IMPORT",
		"description": "Visual Studio 관리형 프로젝트 가져오기"
	},
	"VS_SCC_AUXPATH": {
		"name": "VS_SCC_AUXPATH",
		"description": "Visual Studio 소스 코드 제어 보조 경로입니다."
	},
	"VS_SCC_LOCALPATH": {
		"name": "VS_SCC_LOCALPATH",
		"description": "Visual Studio 소스 코드 제어 로컬 경로입니다."
	},
	"VS_SCC_PROJECTNAME": {
		"name": "VS_SCC_PROJECTNAME",
		"description": "Visual Studio 소스 코드 제어 프로젝트입니다."
	},
	"VS_SCC_PROVIDER": {
		"name": "VS_SCC_PROVIDER",
		"description": "Visual Studio 소스 코드 제어 공급자입니다."
	},
	"VS_SDK_REFERENCES": {
		"name": "VS_SDK_REFERENCES",
		"description": "Visual Studio 프로젝트 SDK 참조입니다. 생성된 Visual Studio 프로젝트(예: Microsoft.AdMediatorWindows81, Version=1.0)에 추가할 SDK 참조의 세미콜론으로 구분된 목록을 지정합니다."
	},
	"VS_SOLUTION_DEPLOY": {
		"name": "VS_SOLUTION_DEPLOY",
		"description": "Windows CE, Windows Phone 또는 Windows 스토어 애플리케이션을 대상으로 지정하지 않는 경우 대상을 배포용으로 표시하도록 지정합니다."
	},
	"VS_SOURCE_SETTINGS_<tool>": {
		"name": "VS_SOURCE_SETTINGS_<tool>",
		"description": "<tool>을(를) 사용하는 빌드되지 않은 모든 파일에서 항목 메타데이터를 설정합니다."
	},
	"VS_USER_PROPS": {
		"name": "VS_USER_PROPS",
		"description": "Visual Studio C++ 프로젝트 파일에 포함할 사용자 props 파일을 설정합니다. 표준 경로는 $(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props로, 대부분의 경우 %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.Win32.user.props 또는 %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props와 동일합니다."
	},
	"VS_USE_DEBUG_LIBRARIES": {
		"name": "VS_USE_DEBUG_LIBRARIES",
		"description": "Visual Studio 생성기에 어떤 구성을 디버그 구성으로 간주할지 지정합니다. .vcxproj 파일의 각 구성에서 UseDebugLibraries 설정을 제어합니다."
	},
	"VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": {
		"name": "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION",
		"description": "Visual Studio Windows 대상 플랫폼 최소 버전"
	},
	"VS_WINRT_COMPONENT": {
		"name": "VS_WINRT_COMPONENT",
		"description": "대상을 Visual Studio 생성기의 Windows 런타임 구성 요소로 표시합니다. Windows 런타임의 C++/CX 언어 확장을 사용하여 대상을 컴파일합니다. SHARED 및 MODULE 라이브러리의 경우 이를 통해 _WINRT_DLL 전처리기 매크로를 정의합니다."
	},
	"VS_WINRT_EXTENSIONS": {
		"name": "VS_WINRT_EXTENSIONS",
		"description": "사용되지 않는 명령어입니다. VS_WINRT_COMPONENT를 대신 사용하세요. 이 속성은 해당 항목의 실험적인 부분 구현입니다."
	},
	"VS_WINRT_REFERENCES": {
		"name": "VS_WINRT_REFERENCES",
		"description": "Visual Studio 프로젝트 Windows 런타임 메타데이터 참조"
	},
	"WATCOM_RUNTIME_LIBRARY": {
		"name": "WATCOM_RUNTIME_LIBRARY",
		"description": "Watcom ABI를 대상으로 하는 컴파일러에서 사용할 Watcom 런타임 라이브러리를 선택합니다."
	},
	"WIN32_EXECUTABLE": {
		"name": "WIN32_EXECUTABLE",
		"description": "Windows에서 WinMain 진입점을 사용하여 실행 파일을 빌드합니다."
	},
	"WINDOWS_EXPORT_ALL_SYMBOLS": {
		"name": "WINDOWS_EXPORT_ALL_SYMBOLS",
		"description": "이 속성은 Windows의 MS 호환 도구용으로만 구현됩니다."
	},
	"XCODE_ATTRIBUTE_<an-attribute>": {
		"name": "XCODE_ATTRIBUTE_<an-attribute>",
		"description": "Xcode 대상 특성을 직접 설정합니다."
	},
	"XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY": {
		"name": "XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY",
		"description": "Xcode 생성기에 XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> 속성을 사용하여 포함되는 모든 프레임워크와 라이브러리에 대해 코드 서명을 수행하도록 알립니다."
	},
	"XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY": {
		"name": "XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY",
		"description": "Xcode 생성기에 XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> 속성을 사용하여 포함되는 모든 프레임워크에서 헤더를 제거하도록 알립니다."
	},
	"XCODE_EMBED_<type>": {
		"name": "XCODE_EMBED_<type>",
		"description": "Xcode 생성기에 지정된 항목 목록을 대상 번들에 포함하도록 지시합니다. <type>은 사용할 포함된 빌드 단계를 지정합니다. 각 <type>의 기본 위치는 Xcode 문서를 참조하세요."
	},
	"XCODE_EMBED_<type>_CODE_SIGN_ON_COPY": {
		"name": "XCODE_EMBED_<type>_CODE_SIGN_ON_COPY",
		"description": "Xcode 생성기에서만 사용되는 부울 속성입니다. XCODE_EMBED_ 속성을 사용하여 포함된 항목에 대해 코드 서명을 수행할지 여부를 지정합니다."
	},
	"XCODE_EMBED_<type>_PATH": {
		"name": "XCODE_EMBED_<type>_PATH",
		"description": "이 속성은 Xcode 생성기에서만 사용됩니다. 정의되면 XCODE_EMBED_에 지정된 항목을 포함할 때 사용할 상대 경로를 지정합니다. 경로는 <type>과 관련된 Embed XXX 빌드 단계의 기본 위치를 기준으로 합니다. 각 <type>의 기본 위치는 Xcode 문서를 참조하세요."
	},
	"XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY": {
		"name": "XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY",
		"description": "Xcode 생성기에서만 사용되는 부울 속성입니다. XCODE_EMBED_ 속성을 사용하여 포함된 모든 프레임워크에서 헤더를 제거할지 여부를 지정합니다."
	},
	"XCODE_GENERATE_SCHEME": {
		"name": "XCODE_GENERATE_SCHEME",
		"description": "사용되는 경우 Xcode 생성기는 스키마 파일을 생성합니다. 해당 스키마 파일은 명령줄에서 작업을 분석, 보관, 테스트용 빌드 및 테스트하는 데 유용합니다."
	},
	"XCODE_LINK_BUILD_PHASE_MODE": {
		"name": "XCODE_LINK_BUILD_PHASE_MODE",
		"description": "Xcode 생성기를 사용하는 경우 연결할 라이브러리는 \"이진과 라이브러리 연결\" 빌드 단계를 사용하거나 링커 플래그로 직접 Xcode 프로젝트 파일에 지정됩니다. 전자는 Xcode가 빌드 경로를 관리하도록 허용합니다. 이는 일반 빌드에 다른 빌드 경로를 사용할 수 있으므로 Xcode 보관 파일을 만들 때 필요할 수 있습니다."
	},
	"XCODE_PRODUCT_TYPE": {
		"name": "XCODE_PRODUCT_TYPE",
		"description": "대상에 대한 참조에서 Xcode productType 특성을 설정합니다. CMake는 대상 유형에 따라 기본값을 계산하지만 이 속성을 사용하여 명시적으로 지시될 수 있습니다."
	},
	"XCODE_SCHEME_ADDRESS_SANITIZER": {
		"name": "XCODE_SCHEME_ADDRESS_SANITIZER",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 주소 삭제기를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": {
		"name": "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Detect use of stack after return을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_ARGUMENTS": {
		"name": "XCODE_SCHEME_ARGUMENTS",
		"description": "생성된 Xcode 구성표의 Arguments 섹션에 추가해야 하는 명령줄 인수를 지정합니다."
	},
	"XCODE_SCHEME_DEBUG_AS_ROOT": {
		"name": "XCODE_SCHEME_DEBUG_AS_ROOT",
		"description": "대상을 '루트'로 디버그할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": {
		"name": "XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
		"description": "생성된 Xcode 체계의 옵션 섹션에서 문서 버전 브라우저를 사용할 때 디버깅 허용을 사용할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": {
		"name": "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
		"description": "생성된 Xcode 구성표의 Diagnostics 섹션에서 Main Thread Checker를 사용하지 않도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": {
		"name": "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 동적 라이브러리 로드를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": {
		"name": "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 동적 링커 API 사용을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": {
		"name": "XCODE_SCHEME_ENABLE_GPU_API_VALIDATION",
		"description": "Metal에 대한 속성 값: 생성된 Xcode 체계의 옵션 섹션에 있는 API 유효성 검사입니다."
	},
	"XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": {
		"name": "XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE",
		"description": "생성된 Xcode 구성표의 옵션 섹션에 있는 GPU 프레임 캡처의 속성 값입니다. 예제 값은 Metal 및 Disabled입니다."
	},
	"XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": {
		"name": "XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION",
		"description": "생성된 Xcode 구성표의 옵션 섹션에 있는 Metal: Shader Validation의 속성 값입니다."
	},
	"XCODE_SCHEME_ENVIRONMENT": {
		"name": "XCODE_SCHEME_ENVIRONMENT",
		"description": "생성된 Xcode 구성표의 Arguments 섹션에 추가해야 하는 환경 변수를 지정합니다."
	},
	"XCODE_SCHEME_EXECUTABLE": {
		"name": "XCODE_SCHEME_EXECUTABLE",
		"description": "생성된 Xcode 구성표의 Info 섹션에서 실행 파일의 경로를 지정합니다. 이 속성을 설정하지 않으면 스키마 생성기가 현재 대상이 실제로 실행 파일인 경우 이 대상을 선택합니다."
	},
	"XCODE_SCHEME_GUARD_MALLOC": {
		"name": "XCODE_SCHEME_GUARD_MALLOC",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Guard Malloc을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_LAUNCH_CONFIGURATION": {
		"name": "XCODE_SCHEME_LAUNCH_CONFIGURATION",
		"description": "대상을 실행하도록 빌드 구성을 설정합니다."
	},
	"XCODE_SCHEME_LAUNCH_MODE": {
		"name": "XCODE_SCHEME_LAUNCH_MODE",
		"description": "생성된 Xcode 체계의 정보 섹션에 있는 시작에 대한 속성 값입니다."
	},
	"XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": {
		"name": "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
		"description": "생성된 Xcode 구성표의 Diagnostics 섹션에서 Main Thread Checker 옵션인 문제 발생 시 Pause를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_MALLOC_GUARD_EDGES": {
		"name": "XCODE_SCHEME_MALLOC_GUARD_EDGES",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Malloc Guard Edges를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_MALLOC_SCRIBBLE": {
		"name": "XCODE_SCHEME_MALLOC_SCRIBBLE",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Malloc Scribble을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_MALLOC_STACK": {
		"name": "XCODE_SCHEME_MALLOC_STACK",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 Malloc 스택을 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_THREAD_SANITIZER": {
		"name": "XCODE_SCHEME_THREAD_SANITIZER",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 스레드 삭제기를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_THREAD_SANITIZER_STOP": {
		"name": "XCODE_SCHEME_THREAD_SANITIZER_STOP",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 스레드 삭제기 - 문제 발생 시 일시 중지를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": {
		"name": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 정의되지 않은 동작 삭제기를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": {
		"name": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 정의되지 않은 동작 삭제기 옵션인 문제 발생 시 일시 중지를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_SCHEME_WORKING_DIRECTORY": {
		"name": "XCODE_SCHEME_WORKING_DIRECTORY",
		"description": "생성된 Xcode 체계에서 실행 및 프로필 작업의 작업 디렉터리를 지정합니다. 값에 생성기 식이 포함된 경우 해당 항목이 평가됩니다."
	},
	"XCODE_SCHEME_ZOMBIE_OBJECTS": {
		"name": "XCODE_SCHEME_ZOMBIE_OBJECTS",
		"description": "생성된 Xcode 구성표의 진단 섹션에서 좀비 개체를 사용하도록 설정할지 여부를 나타냅니다."
	},
	"XCODE_XCCONFIG": {
		"name": "XCODE_XCCONFIG",
		"description": "설정된 경우 Xcode 생성기는 지정된 파일을 대상 수준 XCConfig 파일로 등록합니다. 전역 XCConfig 파일의 경우 CMAKE_XCODE_XCCONFIG 변수를 참조하세요."
	},
	"XCTEST": {
		"name": "XCTEST",
		"description": "이 대상은 Mac의 XCTest CFBundle입니다."
	}
}