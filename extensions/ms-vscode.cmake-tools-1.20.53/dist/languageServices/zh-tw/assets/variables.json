{
	"ANDROID": {
		"name": "ANDROID",
		"description": "當目標系統 (CMAKE_SYSTEM_NAME) 為 Android 時，請設為 1。"
	},
	"APPLE": {
		"name": "APPLE",
		"description": "當目標系統為 Apple 平台 (macOS、iOS、tvOS、visionOS 或 watchOS) 時，設為 True。"
	},
	"BORLAND": {
		"name": "BORLAND",
		"description": "如果使用的是 Borland 編譯器，則為 true。"
	},
	"BSD": {
		"name": "BSD",
		"description": "當目標系統為 BSD 時，設為字串值。這個值可以是下列其中的值: DragonFlyBSD、FreeBSD、OpenBSD 或 NetBSD。"
	},
	"BUILD_SHARED_LIBS": {
		"name": "BUILD_SHARED_LIBS",
		"description": "在沒有明確程式庫類型的情況下呼叫時，告知 add_library 預設使用 SHARED 程式庫，而非 STATIC 程式庫。"
	},
	"CACHE": {
		"name": "CACHE",
		"description": "用以讀取快取變數的運算子。"
	},
	"CMAKE_ABSOLUTE_DESTINATION_FILES": {
		"name": "CMAKE_ABSOLUTE_DESTINATION_FILES",
		"description": "已使用 ABSOLUTE DESTINATION 路徑安裝的檔案清單。"
	},
	"CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY": {
		"name": "CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY",
		"description": "是否要在 add_custom_command 中預設啟用 DEPENDS_EXPLICIT_ONLY 選項。"
	},
	"CMAKE_ADSP_ROOT": {
		"name": "CMAKE_ADSP_ROOT",
		"description": "當 :ref:`Cross Compiling for ADSP SHARC/Blackfin` 時，此變數會保留最新 CCES 或 VDSP++ 安裝的絕對路徑。目錄應該包含 cc21k.exe 和 ccblkfn.exe 編譯器。如果可以找到 CCES 或 VDSP++ 的預設安裝，則會自動設定此設定。"
	},
	"CMAKE_AIX_EXPORT_ALL_SYMBOLS": {
		"name": "CMAKE_AIX_EXPORT_ALL_SYMBOLS",
		"description": "AIX_EXPORT_ALL_SYMBOLS 目標屬性的預設值。在建立每個目標時，會使用此變數初始化其屬性。"
	},
	"CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": {
		"name": "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS",
		"description": "ANDROID_ANT_ADDITIONAL_OPTIONS 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_API": {
		"name": "CMAKE_ANDROID_API",
		"description": "在使用 NVIDIA Nsight Tegra Visual Studio Edition 進行 Android 跨平台編譯時，可以設定這個變數，以指定 ANDROID_API 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_API_MIN": {
		"name": "CMAKE_ANDROID_API_MIN",
		"description": "ANDROID_API_MIN 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_ARCH": {
		"name": "CMAKE_ANDROID_ARCH",
		"description": "在使用 NVIDIA Nsight Tegra Visual Studio Edition 進行 Android 跨平台編譯時，可以設定這個變數，以指定 ANDROID_ARCH 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_ARCH_ABI": {
		"name": "CMAKE_ANDROID_ARCH_ABI",
		"description": "在進行 Android 跨平台編譯時，這個變數會指定要使用的目標架構與 ABI。有效的值為:"
	},
	"CMAKE_ANDROID_ARM_MODE": {
		"name": "CMAKE_ANDROID_ARM_MODE",
		"description": "在進行 Android 跨平台編譯，且 CMAKE_ANDROID_ARCH_ABI 設為其中一個 armeabi 架構時，將 CMAKE_ANDROID_ARM_MODE 設為 ON 即以 32 位元 ARM 處理器 (-marm) 為目標。否則，預設是以 16 位元 Thumb 處理器 (-mthumb) 為目標。"
	},
	"CMAKE_ANDROID_ARM_NEON": {
		"name": "CMAKE_ANDROID_ARM_NEON",
		"description": "在進行 Android 跨平台編譯，且 CMAKE_ANDROID_ARCH_ABI 設為 armeabi-v7a 時，將 CMAKE_ANDROID_ARM_NEON 設為 ON 即以 ARM NEON 裝置為目標。"
	},
	"CMAKE_ANDROID_ASSETS_DIRECTORIES": {
		"name": "CMAKE_ANDROID_ASSETS_DIRECTORIES",
		"description": "ANDROID_ASSETS_DIRECTORIES 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_EXCEPTIONS": {
		"name": "CMAKE_ANDROID_EXCEPTIONS",
		"description": "在使用 NDK 進行 Android 跨平台編譯時，可以設定這個變數，以指定是否要允許例外。"
	},
	"CMAKE_ANDROID_GUI": {
		"name": "CMAKE_ANDROID_GUI",
		"description": "可執行檔之 ANDROID_GUI 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_JAR_DEPENDENCIES": {
		"name": "CMAKE_ANDROID_JAR_DEPENDENCIES",
		"description": "ANDROID_JAR_DEPENDENCIES 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_JAR_DIRECTORIES": {
		"name": "CMAKE_ANDROID_JAR_DIRECTORIES",
		"description": "ANDROID_JAR_DIRECTORIES 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_JAVA_SOURCE_DIR": {
		"name": "CMAKE_ANDROID_JAVA_SOURCE_DIR",
		"description": "ANDROID_JAVA_SOURCE_DIR 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": {
		"name": "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES",
		"description": "ANDROID_NATIVE_LIB_DEPENDENCIES 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": {
		"name": "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES",
		"description": "ANDROID_NATIVE_LIB_DIRECTORIES 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_NDK": {
		"name": "CMAKE_ANDROID_NDK",
		"description": "在使用 NDK 進行 Android 跨平台編譯時，這個變數會含有 NDK 根目錄的絕對路徑。目錄必須包含具有 android-<api> 目錄的 platforms 子目錄。"
	},
	"CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": {
		"name": "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS",
		"description": "在使用 NDK 進行 Android 跨平台編譯時，可以設定這個變數，以指定是否要使用已淘汰的各 API 層級標頭來取代統一標頭。"
	},
	"CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": {
		"name": "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG",
		"description": "在使用 NDK 進行 Android 跨平台編譯時，這個變數會提供 NDK「主機標記」，用來建構在主機上執行的預建工具鏈路徑。"
	},
	"CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": {
		"name": "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION",
		"description": "在使用 NDK 進行 Android 跨平台編譯時，可以設定這個變數，指定用作為編譯器的工具鏈版本。"
	},
	"CMAKE_ANDROID_NDK_VERSION": {
		"name": "CMAKE_ANDROID_NDK_VERSION",
		"description": "在使用 NDK 進行 Android 跨平台編譯，並使用 Android NDK 11 版以上的版本時，CMake 會提供此變數以回報 NDK 版本號碼。"
	},
	"CMAKE_ANDROID_PROCESS_MAX": {
		"name": "CMAKE_ANDROID_PROCESS_MAX",
		"description": "ANDROID_PROCESS_MAX 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_PROGUARD": {
		"name": "CMAKE_ANDROID_PROGUARD",
		"description": "ANDROID_PROGUARD 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_PROGUARD_CONFIG_PATH": {
		"name": "CMAKE_ANDROID_PROGUARD_CONFIG_PATH",
		"description": "ANDROID_PROGUARD_CONFIG_PATH 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_RTTI": {
		"name": "CMAKE_ANDROID_RTTI",
		"description": "在使用 NDK 進行 Android 跨平台編譯時，可以設定這個變數，以指定是否要啟用 RTTI。"
	},
	"CMAKE_ANDROID_SECURE_PROPS_PATH": {
		"name": "CMAKE_ANDROID_SECURE_PROPS_PATH",
		"description": "ANDROID_SECURE_PROPS_PATH 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_SKIP_ANT_STEP": {
		"name": "CMAKE_ANDROID_SKIP_ANT_STEP",
		"description": "ANDROID_SKIP_ANT_STEP 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_ANDROID_STANDALONE_TOOLCHAIN": {
		"name": "CMAKE_ANDROID_STANDALONE_TOOLCHAIN",
		"description": "在使用獨立工具鏈進行 Android 跨平台編譯時，這個變數會含有工具鏈根目錄的絕對路徑。指定的目錄必須包含 sysroot 子目錄。"
	},
	"CMAKE_ANDROID_STL_TYPE": {
		"name": "CMAKE_ANDROID_STL_TYPE",
		"description": "在使用 NVIDIA Nsight Tegra Visual Studio Edition 進行 Android 跨平台編譯時，可以設定這個變數，以指定 ANDROID_STL_TYPE 目標屬性的預設值。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_APPBUNDLE_PATH": {
		"name": "CMAKE_APPBUNDLE_PATH",
		"description": "分號分隔的目錄清單，指定 find_program 及 find_package 命令所使用的 macOS 應用程式套件組合搜尋路徑。"
	},
	"CMAKE_APPLE_SILICON_PROCESSOR": {
		"name": "CMAKE_APPLE_SILICON_PROCESSOR",
		"description": "在執行 macOS 的 Apple Silicon 主機上，設定此變數以告知 CMake 要用於 CMAKE_HOST_SYSTEM_PROCESSOR 的架構。值必須是 arm64 或 x86_64。"
	},
	"CMAKE_AR": {
		"name": "CMAKE_AR",
		"description": "靜態程式庫封存工具的名稱。"
	},
	"CMAKE_ARCHIVE_OUTPUT_DIRECTORY": {
		"name": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY",
		"description": "在建置時，用於放置所有 ARCHIVE 目標檔案的位置。"
	},
	"CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "在為特定組態建置時，用於放置所有 ARCHIVE 目標檔案的位置。"
	},
	"CMAKE_ARGC": {
		"name": "CMAKE_ARGC",
		"description": "在指令碼模式中傳遞給 CMake 的命令列引數數目。"
	},
	"CMAKE_ARGV0": {
		"name": "CMAKE_ARGV0",
		"description": "在指令碼模式中傳遞給 CMake 的命令列引數。"
	},
	"CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": {
		"name": "CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG",
		"description": "此變數用來在建立所有目標時於其上初始化 AUTOGEN_BETTER_GRAPH_MULTI_CONFIG 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX": {
		"name": "CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX",
		"description": "用於會觸發在 Windows 上使用回應檔案，而不是將所有引數傳遞至命令列的 autogen 目標 (即 moc 或 uic) 的命令列長度限制。"
	},
	"CMAKE_AUTOGEN_ORIGIN_DEPENDS": {
		"name": "CMAKE_AUTOGEN_ORIGIN_DEPENDS",
		"description": "用於將來源目標相依性轉送至對應的 <ORIGIN>_autogen 目標的參數。"
	},
	"CMAKE_AUTOGEN_PARALLEL": {
		"name": "CMAKE_AUTOGEN_PARALLEL",
		"description": "使用 AUTOMOC 和 AUTOUIC 時要啟動的平行 moc 或 uic 處理序數目。"
	},
	"CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE": {
		"name": "CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE",
		"description": "此變數用來在建立所有目標時於其上初始化 AUTOGEN_USE_SYSTEM_INCLUDE 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_AUTOGEN_VERBOSE": {
		"name": "CMAKE_AUTOGEN_VERBOSE",
		"description": "設定 AUTOMOC、AUTOUIC 和 AUTORCC 的詳細程度。正整數值或布林值可讓 AUTO* 產生器輸出額外的處理資訊。"
	},
	"CMAKE_AUTOMOC": {
		"name": "CMAKE_AUTOMOC",
		"description": "是否自動為 Qt 目標處理 moc。"
	},
	"CMAKE_AUTOMOC_COMPILER_PREDEFINES": {
		"name": "CMAKE_AUTOMOC_COMPILER_PREDEFINES",
		"description": "此變數會用來在所有目標上將 AUTOMOC_COMPILER_PREDEFINES 屬性初始化。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_AUTOMOC_DEPEND_FILTERS": {
		"name": "CMAKE_AUTOMOC_DEPEND_FILTERS",
		"description": "CMAKE_AUTOMOC 所使用的篩選定義，用來從原始程式碼擷取檔案名稱作為 moc 檔的其他相依性。"
	},
	"CMAKE_AUTOMOC_EXECUTABLE": {
		"name": "CMAKE_AUTOMOC_EXECUTABLE",
		"description": "此變數用來在所有目標上初始化 AUTOMOC_EXECUTABLE 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_AUTOMOC_MACRO_NAMES": {
		"name": "CMAKE_AUTOMOC_MACRO_NAMES",
		"description": "CMAKE_AUTOMOC 所使用之巨集名稱的清單 (以分號分隔)，用以決定 MOC 是否需要處理 C++ 檔案。"
	},
	"CMAKE_AUTOMOC_MOC_OPTIONS": {
		"name": "CMAKE_AUTOMOC_MOC_OPTIONS",
		"description": "使用 CMAKE_AUTOMOC 時 moc 的其他選項。"
	},
	"CMAKE_AUTOMOC_PATH_PREFIX": {
		"name": "CMAKE_AUTOMOC_PATH_PREFIX",
		"description": "是否要在啟用 AUTOMOC 的 Qt 目標上，為 moc 產生 -p 路徑前置詞選項。"
	},
	"CMAKE_AUTOMOC_RELAXED_MODE": {
		"name": "CMAKE_AUTOMOC_RELAXED_MODE",
		"description": "在嚴格與寬鬆的 automoc 模式之間切換。"
	},
	"CMAKE_AUTORCC": {
		"name": "CMAKE_AUTORCC",
		"description": "是否自動為 Qt 目標處理 rcc。"
	},
	"CMAKE_AUTORCC_EXECUTABLE": {
		"name": "CMAKE_AUTORCC_EXECUTABLE",
		"description": "此變數用來在所有目標上初始化 AUTORCC_EXECUTABLE 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_AUTORCC_OPTIONS": {
		"name": "CMAKE_AUTORCC_OPTIONS",
		"description": "使用 CMAKE_AUTORCC 時 rcc 的其他選項。"
	},
	"CMAKE_AUTOUIC": {
		"name": "CMAKE_AUTOUIC",
		"description": "是否自動為 Qt 目標處理 uic。"
	},
	"CMAKE_AUTOUIC_EXECUTABLE": {
		"name": "CMAKE_AUTOUIC_EXECUTABLE",
		"description": "此變數用來在所有目標上初始化 AUTOUIC_EXECUTABLE 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_AUTOUIC_OPTIONS": {
		"name": "CMAKE_AUTOUIC_OPTIONS",
		"description": "使用 CMAKE_AUTOUIC 時 uic 的其他選項。"
	},
	"CMAKE_AUTOUIC_SEARCH_PATHS": {
		"name": "CMAKE_AUTOUIC_SEARCH_PATHS",
		"description": "CMAKE_AUTOUIC 用來尋找內含之 .ui 檔案的搜尋路徑清單。"
	},
	"CMAKE_BACKWARDS_COMPATIBILITY": {
		"name": "CMAKE_BACKWARDS_COMPATIBILITY",
		"description": "已淘汰。請參閱 CMake 原則 CMP0001 文件。"
	},
	"CMAKE_BINARY_DIR": {
		"name": "CMAKE_BINARY_DIR",
		"description": "組建樹狀結構的最上層路徑。"
	},
	"CMAKE_BUILD_RPATH": {
		"name": "CMAKE_BUILD_RPATH",
		"description": "以分號分隔的清單，其指定要新增至組建樹狀結構 (針對支援的平台) 中，連結的二進位檔執行階段路徑 (RPATH) 項目。這些項目不會用於安裝樹狀結構中的二進位檔。另請參閱 CMAKE_INSTALL_RPATH 變數。"
	},
	"CMAKE_BUILD_RPATH_USE_ORIGIN": {
		"name": "CMAKE_BUILD_RPATH_USE_ORIGIN",
		"description": "是否要為組建 RPATH 使用相對路徑。"
	},
	"CMAKE_BUILD_TOOL": {
		"name": "CMAKE_BUILD_TOOL",
		"description": "此變數僅為回溯相容性存在。其包含與 CMAKE_MAKE_PROGRAM 相同的值。請改用該變數。"
	},
	"CMAKE_BUILD_TYPE": {
		"name": "CMAKE_BUILD_TYPE",
		"description": "指定單一設定產生器上的組建類型，(例如 Makefile Generators 或 Ninja)。一般值包括 Debug、Release、RelWithDebInfo 和 MinSizeRel，但也可以定義自訂組建類型。"
	},
	"CMAKE_BUILD_WITH_INSTALL_NAME_DIR": {
		"name": "CMAKE_BUILD_WITH_INSTALL_NAME_DIR",
		"description": "是否要在組建樹狀結構中的目標上使用 INSTALL_NAME_DIR。"
	},
	"CMAKE_BUILD_WITH_INSTALL_RPATH": {
		"name": "CMAKE_BUILD_WITH_INSTALL_RPATH",
		"description": "使用 RPATH 的安裝路徑。"
	},
	"CMAKE_CACHEFILE_DIR": {
		"name": "CMAKE_CACHEFILE_DIR",
		"description": "此變數由 CMake 內部使用，且在第一個組建樹狀結構設定期間可能未設定。設定時，它的值與 CMAKE_BINARY_DIR 相同。請改用該變數。"
	},
	"CMAKE_CACHE_MAJOR_VERSION": {
		"name": "CMAKE_CACHE_MAJOR_VERSION",
		"description": "用來建立 CMakeCache.txt 檔案的 CMake 主要版本"
	},
	"CMAKE_CACHE_MINOR_VERSION": {
		"name": "CMAKE_CACHE_MINOR_VERSION",
		"description": "用來建立 CMakeCache.txt 檔案的 CMake 次要版本"
	},
	"CMAKE_CACHE_PATCH_VERSION": {
		"name": "CMAKE_CACHE_PATCH_VERSION",
		"description": "用來建立 CMakeCache.txt 檔案的 CMake 修補程式版本"
	},
	"CMAKE_CFG_INTDIR": {
		"name": "CMAKE_CFG_INTDIR",
		"description": "每個組態輸出子目錄的建置時間參考。"
	},
	"CMAKE_CLANG_VFS_OVERLAY": {
		"name": "CMAKE_CLANG_VFS_OVERLAY",
		"description": "在使用 clang-cl 進行 Windows 跨平台編譯時，此變數可以是指向 clang 虛擬檔案系統 yaml 檔案的絕對路徑，讓 clang-cl 可在區分大小寫的檔案系統上解析 Windows 標頭名稱。"
	},
	"CMAKE_CL_64": {
		"name": "CMAKE_CL_64",
		"description": "不建議使用。請改用 CMAKE_SIZEOF_VOID_P。"
	},
	"CMAKE_CODEBLOCKS_COMPILER_ID": {
		"name": "CMAKE_CODEBLOCKS_COMPILER_ID",
		"description": "變更已產生 CodeBlocks 專案檔中的編譯器識別碼。"
	},
	"CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": {
		"name": "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES",
		"description": "變更 CodeBlocks 產生器建立專案檔的方式。"
	},
	"CMAKE_CODELITE_USE_TARGETS": {
		"name": "CMAKE_CODELITE_USE_TARGETS",
		"description": "變更 CodeLite 產生器建立專案檔的方式。"
	},
	"CMAKE_COLOR_DIAGNOSTICS": {
		"name": "CMAKE_COLOR_DIAGNOSTICS",
		"description": "啟用所有色彩診斷。"
	},
	"CMAKE_COLOR_MAKEFILE": {
		"name": "CMAKE_COLOR_MAKEFILE",
		"description": "在使用 Makefile 產生器時啟用色彩輸出。"
	},
	"CMAKE_COMMAND": {
		"name": "CMAKE_COMMAND",
		"description": "Cmake 可執行檔的完整路徑。"
	},
	"CMAKE_COMPILER_2005": {
		"name": "CMAKE_COMPILER_2005",
		"description": "使用來自 Microsoft 的 Visual Studio 2005 編譯器"
	},
	"CMAKE_COMPILER_IS_GNUCC": {
		"name": "CMAKE_COMPILER_IS_GNUCC",
		"description": "如果 C 編譯器是 GNU，則為 True。"
	},
	"CMAKE_COMPILER_IS_GNUCXX": {
		"name": "CMAKE_COMPILER_IS_GNUCXX",
		"description": "如果 C++ (CXX) 編譯器是 GNU，則為 True。"
	},
	"CMAKE_COMPILER_IS_GNUG77": {
		"name": "CMAKE_COMPILER_IS_GNUG77",
		"description": "如果 Fortran 編譯器是 GNU，則為 True。"
	},
	"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": {
		"name": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY",
		"description": "建置來源檔案時編譯器產生之 MS 偵錯符號 .pdb 檔案的輸出目錄。"
	},
	"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "建置來源檔案時編譯器產生之 MS 偵錯符號 .pdb 檔案的每個組態輸出目錄。"
	},
	"CMAKE_COMPILE_WARNING_AS_ERROR": {
		"name": "CMAKE_COMPILE_WARNING_AS_ERROR",
		"description": "指定是否將編譯時的警告視為錯誤。"
	},
	"CMAKE_CONFIGURATION_TYPES": {
		"name": "CMAKE_CONFIGURATION_TYPES",
		"description": "分號分隔的清單指定在多重設定產生器上可用的組建類型 (設定) (例如 Visual Studio、Xcode 或 Ninja Multi-Config)。一般項目包括 Debug、Release、RelWithDebInfo 和 MinSizeRel，但也可以定義自訂組建類型。"
	},
	"CMAKE_<CONFIG>_POSTFIX": {
		"name": "CMAKE_<CONFIG>_POSTFIX",
		"description": "組態 <CONFIG> 下程式庫的預設檔名後置。"
	},
	"CMAKE_CPACK_COMMAND": {
		"name": "CMAKE_CPACK_COMMAND",
		"description": "與 CMake 安裝在一起之 cpack 命令的完整路徑。"
	},
	"CMAKE_CROSSCOMPILING": {
		"name": "CMAKE_CROSSCOMPILING",
		"description": "此變數是由 CMake 設定，以指出它是否跨編譯，但請注意以下討論的限制。"
	},
	"CMAKE_CROSSCOMPILING_EMULATOR": {
		"name": "CMAKE_CROSSCOMPILING_EMULATOR",
		"description": "只有在 CMAKE_CROSSCOMPILING 開啟時，才會使用此變數。其應指向主機系統上的命令，該命令可以執行為目標系統而建置的可執行檔。"
	},
	"CMAKE_CROSS_CONFIGS": {
		"name": "CMAKE_CROSS_CONFIGS",
		"description": "指定 Ninja 多重組態產生器中所有 build-<Config>.ninja 檔案可用的組態清單 (以分號分隔)。此變數會啟用跨組態模式。此變數所指定每個組態中的目標，都可以從任一 build-<Config>.ninja 檔案建立。自訂命令會使用 build-<Config>.ninja 的原生組態。若設定為 all，則來自 CMAKE_CONFIGURATION_TYPES 的所有組態，都會是跨組態。若未指定或為空白，則每個 build-<Config>.ninja 檔案只會包含其本身組態的建置規則。"
	},
	"CMAKE_CTEST_ARGUMENTS": {
		"name": "CMAKE_CTEST_ARGUMENTS",
		"description": "將此設定為命令列引數的清單 (以分號分隔)，在透過所產生之建置系統的測試 (或 RUN_TESTS) 目標，執行測試時傳遞給 ctest。"
	},
	"CMAKE_CTEST_COMMAND": {
		"name": "CMAKE_CTEST_COMMAND",
		"description": "與 CMake 安裝在一起之 ctest 命令的完整路徑。"
	},
	"CMAKE_CUDA_ARCHITECTURES": {
		"name": "CMAKE_CUDA_ARCHITECTURES",
		"description": "目標的 CUDA_ARCHITECTURES 屬性預設值。"
	},
	"CMAKE_CUDA_COMPILE_FEATURES": {
		"name": "CMAKE_CUDA_COMPILE_FEATURES",
		"description": "CUDA 編譯器的已知功能清單"
	},
	"CMAKE_CUDA_EXTENSIONS": {
		"name": "CMAKE_CUDA_EXTENSIONS",
		"description": "若在建立目標時設定，則為 CUDA_EXTENSIONS 目標屬性的預設值。"
	},
	"CMAKE_CUDA_HOST_COMPILER": {
		"name": "CMAKE_CUDA_HOST_COMPILER",
		"description": "這是較一般的 CMAKE_<LANG>_HOST_COMPILER 變數的原始 CUDA 特定名稱。請參閱後者以取得詳細資料。"
	},
	"CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS": {
		"name": "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS",
		"description": "定義 CUDA_RESOLVE_DEVICE_SYMBOLS 目標屬性時的預設值。此變數預設未定義。"
	},
	"CMAKE_CUDA_RUNTIME_LIBRARY": {
		"name": "CMAKE_CUDA_RUNTIME_LIBRARY",
		"description": "選取要在編譯和連結 CUDA 時，所使用的 CUDA 執行階段程式庫。此變數可在建立所有目標時，用於初始化其 CUDA_RUNTIME_LIBRARY 屬性。"
	},
	"CMAKE_CUDA_SEPARABLE_COMPILATION": {
		"name": "CMAKE_CUDA_SEPARABLE_COMPILATION",
		"description": "CUDA_SEPARABLE_COMPILATION 目標屬性的預設值。此變數用來在每個目標建立時將其屬性初始化。"
	},
	"CMAKE_CUDA_STANDARD": {
		"name": "CMAKE_CUDA_STANDARD",
		"description": "若在建立目標時設定，則為 CUDA_STANDARD 目標屬性的預設值。"
	},
	"CMAKE_CUDA_STANDARD_REQUIRED": {
		"name": "CMAKE_CUDA_STANDARD_REQUIRED",
		"description": "若在建立目標時設定，則為 CUDA_STANDARD_REQUIRED 目標屬性的預設值。"
	},
	"CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES",
		"description": "啟用 CUDA 語言之後，這會為 CUDA 工具組所提供的 include 目錄，提供以分號分隔的清單。此值可供 C++ 來源檔案用以包含 CUDA 標頭。"
	},
	"CMAKE_CURRENT_BINARY_DIR": {
		"name": "CMAKE_CURRENT_BINARY_DIR",
		"description": "目前處理的二進位目錄路徑。"
	},
	"CMAKE_CURRENT_FUNCTION": {
		"name": "CMAKE_CURRENT_FUNCTION",
		"description": "在函式內執行程式碼時，此變數包含目前函式的名稱。可用於診斷或偵錯訊息。"
	},
	"CMAKE_CURRENT_FUNCTION_LIST_DIR": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_DIR",
		"description": "在函式內執行程式碼時，此變數包含定義目前函式之 listfile 的完整目錄。"
	},
	"CMAKE_CURRENT_FUNCTION_LIST_FILE": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_FILE",
		"description": "在函式內執行程式碼時，此變數包含定義目前函式之 listfile 的完整路徑。"
	},
	"CMAKE_CURRENT_FUNCTION_LIST_LINE": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_LINE",
		"description": "在函式內執行程式碼時，此變數包含定義目前函式之 listfile 中的行號。"
	},
	"CMAKE_CURRENT_LIST_DIR": {
		"name": "CMAKE_CURRENT_LIST_DIR",
		"description": "目前正在處理之 listfile 的完整目錄。"
	},
	"CMAKE_CURRENT_LIST_FILE": {
		"name": "CMAKE_CURRENT_LIST_FILE",
		"description": "目前正在處理之 listfile 的完整路徑。"
	},
	"CMAKE_CURRENT_LIST_LINE": {
		"name": "CMAKE_CURRENT_LIST_LINE",
		"description": "目前處理的檔案行號。"
	},
	"CMAKE_CURRENT_SOURCE_DIR": {
		"name": "CMAKE_CURRENT_SOURCE_DIR",
		"description": "目前處理的來源目錄路徑。"
	},
	"CMAKE_CXX_COMPILER_IMPORT_STD": {
		"name": "CMAKE_CXX_COMPILER_IMPORT_STD",
		"description": "目前 C++ 工具鏈存在匯入 std 支援的 C++ 標準層級清單。使用 <NN> IN_LIST CMAKE_CXX_COMPILER_IMPORT_STD 述詞搭配 if 命令時，可能會偵測到對 C++<NN> 的支援。"
	},
	"CMAKE_CXX_COMPILE_FEATURES": {
		"name": "CMAKE_CXX_COMPILE_FEATURES",
		"description": "C++ 編譯器已知功能的清單"
	},
	"CMAKE_CXX_EXTENSIONS": {
		"name": "CMAKE_CXX_EXTENSIONS",
		"description": "若在建立目標時設定，則為 CXX_EXTENSIONS 目標屬性的預設值。"
	},
	"CMAKE_CXX_MODULE_STD": {
		"name": "CMAKE_CXX_MODULE_STD",
		"description": "是否要將公用程式目標新增為至 少cxx_std_23 的目標相依性。"
	},
	"CMAKE_CXX_SCAN_FOR_MODULES": {
		"name": "CMAKE_CXX_SCAN_FOR_MODULES",
		"description": "是否要掃描 C++ 來源檔案是否有模組相依性。"
	},
	"CMAKE_CXX_STANDARD": {
		"name": "CMAKE_CXX_STANDARD",
		"description": "若在建立目標時設定，則為 CXX_STANDARD 目標屬性的預設值。"
	},
	"CMAKE_CXX_STANDARD_REQUIRED": {
		"name": "CMAKE_CXX_STANDARD_REQUIRED",
		"description": "若在建立目標時設定，則為 CXX_STANDARD_REQUIRED 目標屬性的預設值。"
	},
	"CMAKE_C_COMPILE_FEATURES": {
		"name": "CMAKE_C_COMPILE_FEATURES",
		"description": "C 編譯器已知功能的清單"
	},
	"CMAKE_C_EXTENSIONS": {
		"name": "CMAKE_C_EXTENSIONS",
		"description": "若在建立目標時設定，則為 C_EXTENSIONS 目標屬性的預設值。"
	},
	"CMAKE_C_STANDARD": {
		"name": "CMAKE_C_STANDARD",
		"description": "若在建立目標時設定，則為 C_STANDARD 目標屬性的預設值。"
	},
	"CMAKE_C_STANDARD_REQUIRED": {
		"name": "CMAKE_C_STANDARD_REQUIRED",
		"description": "若在建立目標時設定，則為 C_STANDARD_REQUIRED 目標屬性的預設值。"
	},
	"CMAKE_DEBUG_POSTFIX": {
		"name": "CMAKE_DEBUG_POSTFIX",
		"description": "請參閱變數 CMAKE_<CONFIG>_POSTFIX。"
	},
	"CMAKE_DEBUG_TARGET_PROPERTIES": {
		"name": "CMAKE_DEBUG_TARGET_PROPERTIES",
		"description": "啟用目標屬性的追蹤輸出。"
	},
	"CMAKE_DEFAULT_BUILD_TYPE": {
		"name": "CMAKE_DEFAULT_BUILD_TYPE",
		"description": "指定在 Ninja 多重組態產生器的 build.ninja 檔案中，預設要使用的組態。若指定了此變數，build.ninja 預設會使用 build-<Config>.ninja 的建置規則。所有自訂命令都會使用此組態來執行。若未指定變數，則會改用 CMAKE_CONFIGURATION_TYPES 中的第一個項目。"
	},
	"CMAKE_DEFAULT_CONFIGS": {
		"name": "CMAKE_DEFAULT_CONFIGS",
		"description": "指定未在 Ninja 多重組態產生器中指定 :<Config> 後置詞時，要為 build.ninja 中目標建立的組態清單 (以分號分隔)。若設定為 all，則會使用 CMAKE_CROSS_CONFIGS 中的所有組態。若未指定，則預設為 CMAKE_DEFAULT_BUILD_TYPE。"
	},
	"CMAKE_DEPENDS_IN_PROJECT_ONLY": {
		"name": "CMAKE_DEPENDS_IN_PROJECT_ONLY",
		"description": "在目錄中設為 TRUE 時，Makefile 產生器所製造的建置系統會設定成只考慮出現在來源或二進位目錄中的來源檔案相依性。對這些目錄外的來源檔案進行變更，並不會引發重建。"
	},
	"CMAKE_DEPENDS_USE_COMPILER": {
		"name": "CMAKE_DEPENDS_USE_COMPILER",
		"description": "對於 Makefile 產生器，選取的編譯器現在會自行產生來源相依性。以 FALSE 值定義此變數，就可以還原舊版行為 (亦即使用 CMake 進行相依性探索)。"
	},
	"CMAKE_DIRECTORY_LABELS": {
		"name": "CMAKE_DIRECTORY_LABELS",
		"description": "指定目前目錄的標籤。"
	},
	"CMAKE_DISABLE_FIND_PACKAGE_<PackageName>": {
		"name": "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>",
		"description": "用於停用 find_package 呼叫的變數。"
	},
	"CMAKE_DISABLE_PRECOMPILE_HEADERS": {
		"name": "CMAKE_DISABLE_PRECOMPILE_HEADERS",
		"description": "目標的 DISABLE_PRECOMPILE_HEADERS 預設值。"
	},
	"CMAKE_DLL_NAME_WITH_SOVERSION": {
		"name": "CMAKE_DLL_NAME_WITH_SOVERSION",
		"description": "此變數可用於初始化 Windows 平台的共用程式庫目標上的 DLL_NAME_WITH_SOVERSION 屬性，其會在設定 WIN32 變數時選取。"
	},
	"CMAKE_DL_LIBS": {
		"name": "CMAKE_DL_LIBS",
		"description": "包含 dlopen 和 dlclose 之程式庫的名稱。"
	},
	"CMAKE_DOTNET_SDK": {
		"name": "CMAKE_DOTNET_SDK",
		"description": "目標的 DOTNET_SDK 屬性預設值。"
	},
	"CMAKE_DOTNET_TARGET_FRAMEWORK": {
		"name": "CMAKE_DOTNET_TARGET_FRAMEWORK",
		"description": "目標的 DOTNET_TARGET_FRAMEWORK 屬性預設值。"
	},
	"CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": "目標的 DOTNET_TARGET_FRAMEWORK_VERSION 屬性預設值。"
	},
	"CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": {
		"name": "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES",
		"description": "此快取變數由 Eclipse 專案產生器所使用。請參閱 cmake-generators。"
	},
	"CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": {
		"name": "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT",
		"description": "此快取變數由 Eclipse 專案產生器所使用。請參閱 cmake-generators。"
	},
	"CMAKE_ECLIPSE_MAKE_ARGUMENTS": {
		"name": "CMAKE_ECLIPSE_MAKE_ARGUMENTS",
		"description": "此快取變數由 Eclipse 專案產生器所使用。請參閱 cmake-generators。"
	},
	"CMAKE_ECLIPSE_RESOURCE_ENCODING": {
		"name": "CMAKE_ECLIPSE_RESOURCE_ENCODING",
		"description": "此快取變數會指示 Eclipse CDT4 專案產生器，將資源編碼設定為所產生專案檔中的指定值。若未指定任何值，則不會設定編碼。"
	},
	"CMAKE_ECLIPSE_VERSION": {
		"name": "CMAKE_ECLIPSE_VERSION",
		"description": "此快取變數由 Eclipse 專案產生器所使用。請參閱 cmake-generators。"
	},
	"CMAKE_EDIT_COMMAND": {
		"name": "CMAKE_EDIT_COMMAND",
		"description": "cmake-gui 或 ccmake 的完整路徑。僅在未使用任何 Extra 產生器時，針對 Makefile 產生器和 Ninja 產生器定義。"
	},
	"CMAKE_ENABLE_EXPORTS": {
		"name": "CMAKE_ENABLE_EXPORTS",
		"description": "指定可執行檔是否匯出可載入模組的符號。"
	},
	"CMAKE_ERROR_DEPRECATED": {
		"name": "CMAKE_ERROR_DEPRECATED",
		"description": "是否要對已淘汰的功能引發錯誤。"
	},
	"CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "遇到具有絕對 INSTALL DESTINATION 的檔案時，立即要求 cmake_install.cmake 指令碼回報錯誤。"
	},
	"CMAKE_EXECUTABLE_ENABLE_EXPORTS": {
		"name": "CMAKE_EXECUTABLE_ENABLE_EXPORTS",
		"description": "指定可執行檔是否匯出可載入模組的符號。"
	},
	"CMAKE_EXECUTABLE_SUFFIX": {
		"name": "CMAKE_EXECUTABLE_SUFFIX",
		"description": "此平台上的可執行檔尾碼。"
	},
	"CMAKE_EXECUTABLE_SUFFIX_<LANG>": {
		"name": "CMAKE_EXECUTABLE_SUFFIX_<LANG>",
		"description": "用於 <LANG> 編譯器目標結構之可執行檔名稱結尾的尾碼 (如果有的話)。"
	},
	"CMAKE_EXECUTE_PROCESS_COMMAND_ECHO": {
		"name": "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO",
		"description": "若此變數設定為 STDERR、STDOUT 或 NONE，則 execute_process 呼叫中的命令將會列印到 STDERR 或 STDOUT，或是完全不列印。"
	},
	"CMAKE_EXE_LINKER_FLAGS": {
		"name": "CMAKE_EXE_LINKER_FLAGS",
		"description": "要用來建立可執行檔的連結器旗標。"
	},
	"CMAKE_EXE_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>",
		"description": "連結可執行檔時要使用的旗標。"
	},
	"CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_EXE_LINKER_FLAGS_ 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_EXE_LINKER_FLAGS_INIT": {
		"name": "CMAKE_EXE_LINKER_FLAGS_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_EXE_LINKER_FLAGS 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_EXPORT_COMPILE_COMMANDS": {
		"name": "CMAKE_EXPORT_COMPILE_COMMANDS",
		"description": "啟用/停用產生期間編譯命令的輸出。"
	},
	"CMAKE_EXPORT_FIND_PACKAGE_NAME": {
		"name": "CMAKE_EXPORT_FIND_PACKAGE_NAME",
		"description": "初始化 EXPORT_FIND_PACKAGE_NAME 的值。"
	},
	"CMAKE_EXPORT_NO_PACKAGE_REGISTRY": {
		"name": "CMAKE_EXPORT_NO_PACKAGE_REGISTRY",
		"description": "當 CMP0090 未設定為 NEW 時，停用匯出命令。"
	},
	"CMAKE_EXPORT_PACKAGE_REGISTRY": {
		"name": "CMAKE_EXPORT_PACKAGE_REGISTRY",
		"description": "當 CMP0090 設定為 NEW 時，啟用匯出命令。"
	},
	"CMAKE_EXTRA_GENERATOR": {
		"name": "CMAKE_EXTRA_GENERATOR",
		"description": "用來建置專案的額外產生器。請參閱 cmake-generators。"
	},
	"CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": {
		"name": "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES",
		"description": "共用程式庫的其他後置詞。"
	},
	"CMAKE_FIND_APPBUNDLE": {
		"name": "CMAKE_FIND_APPBUNDLE",
		"description": "這個變數會影響 find_* 命令選擇 macOS 應用程式套件組合或 unix 樣式套件元件的方式。"
	},
	"CMAKE_FIND_DEBUG_MODE": {
		"name": "CMAKE_FIND_DEBUG_MODE",
		"description": "將下列命令的額外尋找呼叫資訊，列印到標準錯誤:"
	},
	"CMAKE_FIND_FRAMEWORK": {
		"name": "CMAKE_FIND_FRAMEWORK",
		"description": "這個變數會影響 find_* 命令選擇 macOS 架構或 unix 樣式套件元件的方式。"
	},
	"CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": {
		"name": "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX",
		"description": "指定 <suffix>，以告知 find_library 命令在通常會搜尋的各個程式庫目錄之前，先在程式庫 <suffix> 目錄中搜尋。"
	},
	"CMAKE_FIND_LIBRARY_PREFIXES": {
		"name": "CMAKE_FIND_LIBRARY_PREFIXES",
		"description": "尋找程式庫時要附加的前置詞。"
	},
	"CMAKE_FIND_LIBRARY_SUFFIXES": {
		"name": "CMAKE_FIND_LIBRARY_SUFFIXES",
		"description": "在尋找程式庫時，要附加的尾碼。"
	},
	"CMAKE_FIND_NO_INSTALL_PREFIX": {
		"name": "CMAKE_FIND_NO_INSTALL_PREFIX",
		"description": "從 CMAKE_SYSTEM_PREFIX_PATH 排除 CMAKE_INSTALL_PREFIX 和 CMAKE_STAGING_PREFIX 變數的值。根據預設，CMake 會將這些專案目的地前置詞新增到 CMAKE_SYSTEM_PREFIX_PATH，以支援建置一系列相依套件，並將它們安裝到共同的前置詞。請將 CMAKE_FIND_NO_INSTALL_PREFIX 設定為 TRUE，以隱藏此行為。"
	},
	"CMAKE_FIND_PACKAGE_NAME": {
		"name": "CMAKE_FIND_PACKAGE_NAME",
		"description": "載入尋找模組以記錄呼叫者指定的套件名稱時，由 find_package 命令定義。如需詳細資料，請參閱命令文件。"
	},
	"CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY",
		"description": "預設不會設定此變數。若 CMAKE_FIND_USE_PACKAGE_REGISTRY 和 CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY 皆未設定，則除非提供了 NO_CMAKE_PACKAGE_REGISTRY 選項，否則 find_package() 會使用使用者套件登錄。"
	},
	"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY",
		"description": "預設不會設定此變數。若 CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY 和 CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY 皆未設定，則除非提供了 NO_CMAKE_SYSTEM_PACKAGE_REGISTRY 選項，否則 find_package() 會使用系統套件登錄。"
	},
	"CMAKE_FIND_PACKAGE_PREFER_CONFIG": {
		"name": "CMAKE_FIND_PACKAGE_PREFER_CONFIG",
		"description": "若未指定模式，則指示 find_package 先嘗試「組態」模式，再嘗試「模組」模式。"
	},
	"CMAKE_FIND_PACKAGE_REDIRECTS_DIR": {
		"name": "CMAKE_FIND_PACKAGE_REDIRECTS_DIR",
		"description": "此唯讀變數指定目錄，find_package 命令會先檢查目錄，然後再搜尋其他位置的模組或組態封裝檔案。此目錄中的組態封裝檔案一律會以喜好設定方式找到，以尋找其他任何模組檔案或組態封裝檔案。"
	},
	"CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS": {
		"name": "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS",
		"description": "設定為 TRUE，可指示 find_package 呼叫來解析 <PackageName>_ROOT 值中的符號連結。"
	},
	"CMAKE_FIND_PACKAGE_SORT_DIRECTION": {
		"name": "CMAKE_FIND_PACKAGE_SORT_DIRECTION",
		"description": "CMAKE_FIND_PACKAGE_SORT_ORDER 所使用的排序方向。其可以假設下列其中一個值:"
	},
	"CMAKE_FIND_PACKAGE_SORT_ORDER": {
		"name": "CMAKE_FIND_PACKAGE_SORT_ORDER",
		"description": "為使用 find_package 所找到的套件排序的預設順序。其可以假設下列其中一個值:"
	},
	"CMAKE_FIND_PACKAGE_TARGETS_GLOBAL": {
		"name": "CMAKE_FIND_PACKAGE_TARGETS_GLOBAL",
		"description": "設定為 TRUE 會將 find_package 探索到的所有匯入目標升級為全域範圍。"
	},
	"CMAKE_FIND_PACKAGE_WARN_NO_MODULE": {
		"name": "CMAKE_FIND_PACKAGE_WARN_NO_MODULE",
		"description": "告知 find_package 在沒有明確模式下呼叫時，發出警告。"
	},
	"CMAKE_FIND_ROOT_PATH": {
		"name": "CMAKE_FIND_ROOT_PATH",
		"description": "要在檔案系統上搜尋的根路徑分號分隔清單。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE",
		"description": "此變數控制 FIND_XXX 是否使用 CMAKE_FIND_ROOT_PATH 和 CMAKE_SYSROOT。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY",
		"description": "此變數控制 FIND_XXX 是否使用 CMAKE_FIND_ROOT_PATH 和 CMAKE_SYSROOT。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE",
		"description": "此變數控制 FIND_XXX 是否使用 CMAKE_FIND_ROOT_PATH 和 CMAKE_SYSROOT。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM",
		"description": "此變數控制 FIND_XXX 是否使用 CMAKE_FIND_ROOT_PATH 和 CMAKE_SYSROOT。"
	},
	"CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH",
		"description": "控制下列命令的預設行為是否要搜尋 CMake 專屬環境變數所提供的路徑:"
	},
	"CMAKE_FIND_USE_CMAKE_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_PATH",
		"description": "控制下列命令的預設行為是否要搜尋 CMake 專屬快取變數所提供的路徑:"
	},
	"CMAKE_FIND_USE_CMAKE_SYSTEM_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH",
		"description": "控制下列命令的預設行為是否要搜尋平台專屬 CMake 變數所提供的路徑:"
	},
	"CMAKE_FIND_USE_INSTALL_PREFIX": {
		"name": "CMAKE_FIND_USE_INSTALL_PREFIX",
		"description": "控制下列命令的預設行為，以決定是否要搜尋 CMAKE_INSTALL_PREFIX 和CMAKE_STAGING_PREFIX 變數中的位置。"
	},
	"CMAKE_FIND_USE_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_USE_PACKAGE_REGISTRY",
		"description": "控制 find_package 命令的預設行為是否會搜尋使用者套件登錄所提供的路徑。"
	},
	"CMAKE_FIND_USE_PACKAGE_ROOT_PATH": {
		"name": "CMAKE_FIND_USE_PACKAGE_ROOT_PATH",
		"description": "控制下列命令的預設行為是否要搜尋 <PackageName>_ROOT 變數所提供的路徑:"
	},
	"CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH": {
		"name": "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH",
		"description": "控制下列命令的預設行為是否要搜尋標準系統環境變數所提供的路徑:"
	},
	"CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY",
		"description": "利用 find_package 命令控制系統套件登錄的搜尋。"
	},
	"CMAKE_FOLDER": {
		"name": "CMAKE_FOLDER",
		"description": "設定資料夾名稱。用來組織 IDE 中的目標。"
	},
	"CMAKE_Fortran_FORMAT": {
		"name": "CMAKE_Fortran_FORMAT",
		"description": "設定為 [FIXED] 或 [FREE] 以指出 Fortran 來源配置。"
	},
	"CMAKE_Fortran_MODDIR_DEFAULT": {
		"name": "CMAKE_Fortran_MODDIR_DEFAULT",
		"description": "Fortran 預設模組輸出目錄。"
	},
	"CMAKE_Fortran_MODDIR_FLAG": {
		"name": "CMAKE_Fortran_MODDIR_FLAG",
		"description": "用於模組輸出目錄的 Fortran 旗標。"
	},
	"CMAKE_Fortran_MODOUT_FLAG": {
		"name": "CMAKE_Fortran_MODOUT_FLAG",
		"description": "用來啟用模組輸出的 Fortran 旗標。"
	},
	"CMAKE_Fortran_MODULE_DIRECTORY": {
		"name": "CMAKE_Fortran_MODULE_DIRECTORY",
		"description": "Fortran 模組輸出目錄。"
	},
	"CMAKE_Fortran_PREPROCESS": {
		"name": "CMAKE_Fortran_PREPROCESS",
		"description": "目標的 Fortran_PREPROCESS 預設值。"
	},
	"CMAKE_FRAMEWORK": {
		"name": "CMAKE_FRAMEWORK",
		"description": "目標的 FRAMEWORK 預設值。"
	},
	"CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>": {
		"name": "CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
		"description": "使用多重組態產生器時，組態 <CONFIG> 下的預設架構檔案名稱後置詞。"
	},
	"CMAKE_FRAMEWORK_PATH": {
		"name": "CMAKE_FRAMEWORK_PATH",
		"description": "分號分隔的目錄清單，指定 find_library、find_package、find_path 及 find_file 命令所使用的 macOS 架構搜尋路徑。"
	},
	"CMAKE_GENERATOR": {
		"name": "CMAKE_GENERATOR",
		"description": "用來建置專案的產生器。請參閱 cmake-generators。"
	},
	"CMAKE_GENERATOR_INSTANCE": {
		"name": "CMAKE_GENERATOR_INSTANCE",
		"description": "使用者提供的產生器專用執行個體規格。"
	},
	"CMAKE_GENERATOR_PLATFORM": {
		"name": "CMAKE_GENERATOR_PLATFORM",
		"description": "使用者提供的產生器專用目標平台規格。"
	},
	"CMAKE_GENERATOR_TOOLSET": {
		"name": "CMAKE_GENERATOR_TOOLSET",
		"description": "使用者提供的原生建置系統工具組規格。"
	},
	"CMAKE_GHS_NO_SOURCE_GROUP_FILE": {
		"name": "CMAKE_GHS_NO_SOURCE_GROUP_FILE",
		"description": "ON/OFF 布林值，其控制目標的專案檔應為單一一個檔案或是多個檔案。如需詳細資料，請參閱 GHS_NO_SOURCE_GROUP_FILE。"
	},
	"CMAKE_GLOBAL_AUTOGEN_TARGET": {
		"name": "CMAKE_GLOBAL_AUTOGEN_TARGET",
		"description": "用以產生全域 autogen 目標的參數。"
	},
	"CMAKE_GLOBAL_AUTOGEN_TARGET_NAME": {
		"name": "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME",
		"description": "變更全域 autogen 目標的名稱。"
	},
	"CMAKE_GLOBAL_AUTORCC_TARGET": {
		"name": "CMAKE_GLOBAL_AUTORCC_TARGET",
		"description": "用以產生全域 autorcc 目標的參數。"
	},
	"CMAKE_GLOBAL_AUTORCC_TARGET_NAME": {
		"name": "CMAKE_GLOBAL_AUTORCC_TARGET_NAME",
		"description": "變更全域 autorcc 目標的名稱。"
	},
	"CMAKE_GNUtoMS": {
		"name": "CMAKE_GNUtoMS",
		"description": "將 GNU 匯入程式庫 (.dll.a) 轉換為 MS 格式 (.lib)。"
	},
	"CMAKE_HIP_ARCHITECTURES": {
		"name": "CMAKE_HIP_ARCHITECTURES",
		"description": "要為其產生裝置代碼的 GPU 結構清單。結構名稱會根據 CMAKE_HIP_PLATFORM 解譯。"
	},
	"CMAKE_HIP_COMPILE_FEATURES": {
		"name": "CMAKE_HIP_COMPILE_FEATURES",
		"description": "HIP 編譯器已知功能的清單"
	},
	"CMAKE_HIP_EXTENSIONS": {
		"name": "CMAKE_HIP_EXTENSIONS",
		"description": "若在建立目標時設定，則為 HIP_EXTENSIONS 目標屬性的預設值。"
	},
	"CMAKE_HIP_PLATFORM": {
		"name": "CMAKE_HIP_PLATFORM",
		"description": "要為其編譯 HIP 語言來源的 GPU 平台。"
	},
	"CMAKE_HIP_STANDARD": {
		"name": "CMAKE_HIP_STANDARD",
		"description": "若在建立目標時設定，則為 HIP_STANDARD 目標屬性的預設值。"
	},
	"CMAKE_HIP_STANDARD_REQUIRED": {
		"name": "CMAKE_HIP_STANDARD_REQUIRED",
		"description": "若在建立目標時設定，則為 HIP_STANDARD_REQUIRED 目標屬性的預設值。"
	},
	"CMAKE_HOME_DIRECTORY": {
		"name": "CMAKE_HOME_DIRECTORY",
		"description": "來源樹狀結構頂端的路徑。與 CMAKE_SOURCE_DIR 相同。"
	},
	"CMAKE_HOST_APPLE": {
		"name": "CMAKE_HOST_APPLE",
		"description": "若是 Apple macOS 作業系統，則為 true。"
	},
	"CMAKE_HOST_BSD": {
		"name": "CMAKE_HOST_BSD",
		"description": "當主機系統為 BSD 時，設為字串值。這個值可以是下列其中的值: DragonFlyBSD、FreeBSD、OpenBSD 或 NetBSD。"
	},
	"CMAKE_HOST_LINUX": {
		"name": "CMAKE_HOST_LINUX",
		"description": "當主機系統為 Linux 時，請設定為 true。"
	},
	"CMAKE_HOST_SOLARIS": {
		"name": "CMAKE_HOST_SOLARIS",
		"description": "若是 Oracle Solaris 作業系統，則為 true。"
	},
	"CMAKE_HOST_SYSTEM": {
		"name": "CMAKE_HOST_SYSTEM",
		"description": "目前用來執行 CMake 的 OS 複合名稱。"
	},
	"CMAKE_HOST_SYSTEM_NAME": {
		"name": "CMAKE_HOST_SYSTEM_NAME",
		"description": "CMake 執行所在的 OS 名稱。"
	},
	"CMAKE_HOST_SYSTEM_PROCESSOR": {
		"name": "CMAKE_HOST_SYSTEM_PROCESSOR",
		"description": "CMake 用來執行的 CPU 名稱。"
	},
	"CMAKE_HOST_SYSTEM_VERSION": {
		"name": "CMAKE_HOST_SYSTEM_VERSION",
		"description": "CMake 用來執行的 OS 版本。"
	},
	"CMAKE_HOST_UNIX": {
		"name": "CMAKE_HOST_UNIX",
		"description": "若是 UNIX 和類似 UNIX 的作業系統，則為 true。"
	},
	"CMAKE_HOST_WIN32": {
		"name": "CMAKE_HOST_WIN32",
		"description": "如果主機系統執行的是 Windows (包括 Windows 64 位元和 MSYS)，則為 true。"
	},
	"CMAKE_IGNORE_PATH": {
		"name": "CMAKE_IGNORE_PATH",
		"description": "各種 find...() 命令要忽略的目錄清單 (以分號分隔)。"
	},
	"CMAKE_IGNORE_PREFIX_PATH": {
		"name": "CMAKE_IGNORE_PREFIX_PATH",
		"description": "find_program、find_library、find_file 及 find_path 命令要忽略的搜尋首碼清單 (以分號分隔)。find_package 命令的 Config 模式也會忽略首碼 (模組模式不受影響)。若要改為忽略特定目錄，請參閱 CMAKE_IGNORE_NONPREFIX_VAR。"
	},
	"CMAKE_IMPORT_LIBRARY_PREFIX": {
		"name": "CMAKE_IMPORT_LIBRARY_PREFIX",
		"description": "您連結的匯入程式庫前置詞。"
	},
	"CMAKE_IMPORT_LIBRARY_SUFFIX": {
		"name": "CMAKE_IMPORT_LIBRARY_SUFFIX",
		"description": "您連結的匯入程式庫尾碼。"
	},
	"CMAKE_INCLUDE_CURRENT_DIR": {
		"name": "CMAKE_INCLUDE_CURRENT_DIR",
		"description": "自動將目前的來源和組建目錄新增到 include 路徑。"
	},
	"CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": {
		"name": "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE",
		"description": "自動將目前的來源和組建目錄新增到 INTERFACE_INCLUDE_DIRECTORIES 目標屬性。"
	},
	"CMAKE_INCLUDE_DIRECTORIES_BEFORE": {
		"name": "CMAKE_INCLUDE_DIRECTORIES_BEFORE",
		"description": "在 include_directories 中，是否要根據預設，在前方或後方加上目錄。"
	},
	"CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": {
		"name": "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE",
		"description": "是否要強制在前面加上專案 include 目錄。"
	},
	"CMAKE_INCLUDE_PATH": {
		"name": "CMAKE_INCLUDE_PATH",
		"description": "以分號分隔的目錄清單，指定 find_file 與 find_path 命令的搜尋路徑。預設為空的，應由專案設定。"
	},
	"CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": {
		"name": "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME",
		"description": "install 命令中使用的預設元件。"
	},
	"CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": {
		"name": "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
		"description": "安裝檔案期間透過 install 和 file 隱含建立之目錄的預設權限。"
	},
	"CMAKE_INSTALL_MESSAGE": {
		"name": "CMAKE_INSTALL_MESSAGE",
		"description": "指定 install 命令所產生的安裝指令碼詳細程度 (使用 file 命令)。若是剛安裝或更新的路徑，安裝可能會列印這樣的程式碼:"
	},
	"CMAKE_INSTALL_NAME_DIR": {
		"name": "CMAKE_INSTALL_NAME_DIR",
		"description": "Apple 平臺上已安裝之目標的目錄名稱。"
	},
	"CMAKE_INSTALL_PREFIX": {
		"name": "CMAKE_INSTALL_PREFIX",
		"description": "install 使用的安裝目錄。"
	},
	"CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": {
		"name": "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT",
		"description": "當 CMAKE_INSTALL_PREFIX 剛初始化為其預設值時，CMake 會將此變數設定為 TRUE 值，通常是在新建置樹狀結構內第一次執行 CMake，且第一次執行 CMake 未設定 CMAKE_INSTALL_PREFIX 環境變數時。這可供專案程式碼用來變更預設值，而不會覆寫使用者提供的值:"
	},
	"CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH": {
		"name": "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH",
		"description": "設定預設值，指出是否應在安裝期間移除工具鏈定義的 rpaths。"
	},
	"CMAKE_INSTALL_RPATH": {
		"name": "CMAKE_INSTALL_RPATH",
		"description": "要用於已安裝目標的 rpath。"
	},
	"CMAKE_INSTALL_RPATH_USE_LINK_PATH": {
		"name": "CMAKE_INSTALL_RPATH_USE_LINK_PATH",
		"description": "將路徑新增至連結器搜尋及已安裝的 rpath。"
	},
	"CMAKE_INTERNAL_PLATFORM_ABI": {
		"name": "CMAKE_INTERNAL_PLATFORM_ABI",
		"description": "可能會變更的內部變數。"
	},
	"CMAKE_INTERPROCEDURAL_OPTIMIZATION": {
		"name": "CMAKE_INTERPROCEDURAL_OPTIMIZATION",
		"description": "目標的 INTERPROCEDURAL_OPTIMIZATION 預設值。"
	},
	"CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>": {
		"name": "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
		"description": "目標的 INTERPROCEDURAL_OPTIMIZATION_ 預設值。"
	},
	"CMAKE_IOS_INSTALL_COMBINED": {
		"name": "CMAKE_IOS_INSTALL_COMBINED",
		"description": "目標的 IOS_INSTALL_COMBINED 預設值。"
	},
	"CMAKE_ISPC_HEADER_DIRECTORY": {
		"name": "CMAKE_ISPC_HEADER_DIRECTORY",
		"description": "ISPC 產生的標頭輸出目錄。"
	},
	"CMAKE_ISPC_HEADER_SUFFIX": {
		"name": "CMAKE_ISPC_HEADER_SUFFIX",
		"description": "要用於 ISPC 產生之標頭的輸出尾碼。"
	},
	"CMAKE_ISPC_INSTRUCTION_SETS": {
		"name": "CMAKE_ISPC_INSTRUCTION_SETS",
		"description": "目標的 ISPC_INSTRUCTION_SETS 屬性預設值。"
	},
	"CMAKE_JOB_POOLS": {
		"name": "CMAKE_JOB_POOLS",
		"description": "如果未設定 JOB_POOLS 全域屬性，則會在此變數的所在位置中使用其值。如需其他資訊，請參閱 JOB_POOLS。"
	},
	"CMAKE_JOB_POOL_COMPILE": {
		"name": "CMAKE_JOB_POOL_COMPILE",
		"description": "此變數會用來在所有目標上將 JOB_POOL_COMPILE 屬性初始化。如需詳細資訊，請參閱 JOB_POOL_COMPILE。"
	},
	"CMAKE_JOB_POOL_LINK": {
		"name": "CMAKE_JOB_POOL_LINK",
		"description": "此變數會用來在所有目標上將 JOB_POOL_LINK 屬性初始化。如需詳細資訊，請參閱 JOB_POOL_LINK。"
	},
	"CMAKE_JOB_POOL_PRECOMPILE_HEADER": {
		"name": "CMAKE_JOB_POOL_PRECOMPILE_HEADER",
		"description": "此變數可用以初始化所有目標上的 JOB_POOL_PRECOMPILE_HEADER 屬性。如需其他資訊，請參閱 JOB_POOL_PRECOMPILE_HEADER。"
	},
	"CMAKE_KATE_FILES_MODE": {
		"name": "CMAKE_KATE_FILES_MODE",
		"description": "此快取變數會由 Kate 專案產生器使用，並控制專案檔案中的檔案項目將設定的模式。請參閱 cmake-generators。"
	},
	"CMAKE_KATE_MAKE_ARGUMENTS": {
		"name": "CMAKE_KATE_MAKE_ARGUMENTS",
		"description": "此快取變數由 Kate 專案產生器所使用。請參閱 cmake-generators。"
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE",
		"description": "在進行 Android 跨平台編譯時，這個變數會包含工具鏈 binutils 電腦名稱 (例如 gcc -dumpmachine)。Binutils 的名稱通常會有 <machine>- 前置詞。"
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX",
		"description": "在進行 Android 跨平台編譯時，這個變數會包含加在工具鏈 GNU 編譯器及其 binutils 前面的絕對路徑。"
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX",
		"description": "在進行 Android 跨平台編譯時，這個變數會包含工具鏈 GNU 編譯器及其 binutils 的主機平台尾碼。"
	},
	"CMAKE_<LANG>_ARCHIVE_APPEND": {
		"name": "CMAKE_<LANG>_ARCHIVE_APPEND",
		"description": "用來附加到靜態封存的規則變數。"
	},
	"CMAKE_<LANG>_ARCHIVE_CREATE": {
		"name": "CMAKE_<LANG>_ARCHIVE_CREATE",
		"description": "用來建立新靜態封存的規則變數。"
	},
	"CMAKE_<LANG>_ARCHIVE_FINISH": {
		"name": "CMAKE_<LANG>_ARCHIVE_FINISH",
		"description": "用來完成現有靜態封存的規則變數。"
	},
	"CMAKE_<LANG>_BYTE_ORDER": {
		"name": "CMAKE_<LANG>_BYTE_ORDER",
		"description": "<LANG> 編譯器目標架構的位元組順序 (如果已知)。若已定義且非空白，則值為下列其中之一:"
	},
	"CMAKE_<LANG>_CLANG_TIDY": {
		"name": "CMAKE_<LANG>_CLANG_TIDY",
		"description": "當 <LANG> 為 C、CXX、OBJC 或 OBJCXX 時，<LANG>_CLANG_TIDY 目標屬性的預設值。"
	},
	"CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR": {
		"name": "CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR",
		"description": "當 <LANG> 為 C、CXX、OBJC 或 OBJCXX 時，<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR 目標屬性的預設值。"
	},
	"CMAKE_<LANG>_COMPILER": {
		"name": "CMAKE_<LANG>_COMPILER",
		"description": "LANG 編譯器的完整路徑。"
	},
	"CMAKE_<LANG>_COMPILER_ABI": {
		"name": "CMAKE_<LANG>_COMPILER_ABI",
		"description": "可能會變更的內部變數。"
	},
	"CMAKE_<LANG>_COMPILER_AR": {
		"name": "CMAKE_<LANG>_COMPILER_AR",
		"description": "ar 的包裝函式，新增適用於編譯器的 ---plugin 選項。"
	},
	"CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID": {
		"name": "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID",
		"description": "可能會變更的內部變數。"
	},
	"CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN": {
		"name": "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN",
		"description": "用於跨平台編譯的外部工具鏈 (若支援)。"
	},
	"CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT": {
		"name": "CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT",
		"description": "編譯器前端變數的識別字串。"
	},
	"CMAKE_<LANG>_COMPILER_ID": {
		"name": "CMAKE_<LANG>_COMPILER_ID",
		"description": "編譯器識別碼字串。"
	},
	"CMAKE_<LANG>_COMPILER_LAUNCHER": {
		"name": "CMAKE_<LANG>_COMPILER_LAUNCHER",
		"description": "<LANG>_COMPILER_LAUNCHER 目標屬性的預設值。在建立各個目標時，此變數可用來將其屬性初始化。只有在 <LANG> 為 C、CXX、Fortran、ISPC、OBJC、OBJCXX 或 CUDA 時，才會執行此作業。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER",
		"description": "LANG 連結器的完整路徑。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT",
		"description": "編譯器前端變數的識別字串。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER_ID": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_ID",
		"description": "連結器識別字串。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER_VERSION": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_VERSION",
		"description": "連結器版本字串。"
	},
	"CMAKE_<LANG>_COMPILER_LOADED": {
		"name": "CMAKE_<LANG>_COMPILER_LOADED",
		"description": "若已啟用語言，則定義為 true。"
	},
	"CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND": {
		"name": "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND",
		"description": "輸出編譯器預先定義的命令。"
	},
	"CMAKE_<LANG>_COMPILER_RANLIB": {
		"name": "CMAKE_<LANG>_COMPILER_RANLIB",
		"description": "ranlib 的包裝函式，新增適用於編譯器的 --plugin 選項。"
	},
	"CMAKE_<LANG>_COMPILER_TARGET": {
		"name": "CMAKE_<LANG>_COMPILER_TARGET",
		"description": "用於跨平台編譯的目標 (若支援)。"
	},
	"CMAKE_<LANG>_COMPILER_VERSION": {
		"name": "CMAKE_<LANG>_COMPILER_VERSION",
		"description": "編譯器版本字串。"
	},
	"CMAKE_<LANG>_COMPILER_VERSION_INTERNAL": {
		"name": "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL",
		"description": "可能會變更的內部變數。"
	},
	"CMAKE_<LANG>_COMPILE_OBJECT": {
		"name": "CMAKE_<LANG>_COMPILE_OBJECT",
		"description": "用來編譯單一物件檔案的規則變數。"
	},
	"CMAKE_<LANG>_CPPCHECK": {
		"name": "CMAKE_<LANG>_CPPCHECK",
		"description": "<LANG>_CPPCHECK 目標屬性的預設值。此變數用來在每個目標建立時將其屬性初始化。只有在 <LANG> 為 C 或 CXX 時，才會完成此作業。"
	},
	"CMAKE_<LANG>_CPPLINT": {
		"name": "CMAKE_<LANG>_CPPLINT",
		"description": "<LANG>_CPPLINT 目標屬性的預設值。此變數用來在每個目標建立時將其屬性初始化。只有在 <LANG> 為 C 或 CXX 時，才會完成此作業。"
	},
	"CMAKE_<LANG>_CREATE_SHARED_LIBRARY": {
		"name": "CMAKE_<LANG>_CREATE_SHARED_LIBRARY",
		"description": "用來建立共用程式庫的規則變數。"
	},
	"CMAKE_<LANG>_CREATE_SHARED_MODULE": {
		"name": "CMAKE_<LANG>_CREATE_SHARED_MODULE",
		"description": "用來建立共用模組的規則變數。"
	},
	"CMAKE_<LANG>_CREATE_STATIC_LIBRARY": {
		"name": "CMAKE_<LANG>_CREATE_STATIC_LIBRARY",
		"description": "用來建立靜態程式庫的規則變數。"
	},
	"CMAKE_<LANG>_EXTENSIONS": {
		"name": "CMAKE_<LANG>_EXTENSIONS",
		"description": "變數為:"
	},
	"CMAKE_<LANG>_EXTENSIONS_DEFAULT": {
		"name": "CMAKE_<LANG>_EXTENSIONS_DEFAULT",
		"description": "編譯器的預設延伸模組模式。未設定 CMAKE_<LANG>_EXTENSIONS 時，作為<LANG>_EXTENSIONS 目標屬性的預設 (請參閱 CMP0128)。"
	},
	"CMAKE_<LANG>_FLAGS": {
		"name": "CMAKE_<LANG>_FLAGS",
		"description": "針對所有設定建置時，語言 <LANG> 使用的全語言旗標。這些旗標將會傳遞至編譯器的所有叫用。這包括驅動編譯的叫用，以及驅動連結的叫用。"
	},
	"CMAKE_<LANG>_FLAGS_<CONFIG>": {
		"name": "CMAKE_<LANG>_FLAGS_<CONFIG>",
		"description": "建置 <CONFIG> 設定時所使用的語言 <LANG> 的語言範圍旗標。這些旗標會傳遞至對應設定中編譯器的所有叫用。這包括驅動編譯的叫用，以及驅動連結的叫用。"
	},
	"CMAKE_<LANG>_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_<CONFIG>_INIT",
		"description": "在初次為語言 <LANG> 設定組建樹狀結構時，用來將 CMAKE_<LANG>_FLAGS_ 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_<LANG>_FLAGS_DEBUG": {
		"name": "CMAKE_<LANG>_FLAGS_DEBUG",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_ 變數的 Debug 變體。"
	},
	"CMAKE_<LANG>_FLAGS_DEBUG_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_DEBUG_INIT",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 變數的 Debug 變體。"
	},
	"CMAKE_<LANG>_FLAGS_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_INIT",
		"description": "在初次為語言 <LANG> 設定組建樹狀結構時，用來將 CMAKE_<LANG>_FLAGS 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。視環境和目標平台之不同，CMake 可能會在值的前後附加內容。例如，xxxFLAGS 環境變數的內容會加到前面，其中的 xxx 因語言而異，但不一定與 <LANG> 相同 (例如，CXXFLAGS 用於 CXX、FFLAGS 用於 Fortran 等等)。這個值是命令列字串片段。因此，選項之間應該以空格分隔，有空格的選項也應該加上引號。"
	},
	"CMAKE_<LANG>_FLAGS_MINSIZEREL": {
		"name": "CMAKE_<LANG>_FLAGS_MINSIZEREL",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_ 變數的 MinSizeRel 變體。"
	},
	"CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 變數的 MinSizeRel 變體。"
	},
	"CMAKE_<LANG>_FLAGS_RELEASE": {
		"name": "CMAKE_<LANG>_FLAGS_RELEASE",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_ 變數的 Release 變體。"
	},
	"CMAKE_<LANG>_FLAGS_RELEASE_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_RELEASE_INIT",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 變數的 Release 變體。"
	},
	"CMAKE_<LANG>_FLAGS_RELWITHDEBINFO": {
		"name": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_ 的 RelWithDebInfo 變體。"
	},
	"CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT",
		"description": "此變數是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 的 RelWithDebInfo 變體。"
	},
	"CMAKE_<LANG>_HOST_COMPILER": {
		"name": "CMAKE_<LANG>_HOST_COMPILER",
		"description": "當 <LANG> 為 CUDA 或 HIP 時，可以使用此變數。"
	},
	"CMAKE_<LANG>_IGNORE_EXTENSIONS": {
		"name": "CMAKE_<LANG>_IGNORE_EXTENSIONS",
		"description": "組建應忽略的副檔名。"
	},
	"CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES",
		"description": "編譯器針對標頭檔隱含搜尋的目錄。"
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES",
		"description": "針對語言 <LANG> 偵測到的隱含連結器搜尋路徑。"
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES",
		"description": "針對語言 <LANG> 偵測到的隱含連結器架構搜尋路徑。"
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES",
		"description": "針對語言 <LANG> 偵測到的隱含連結程式庫和旗標。"
	},
	"CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE": {
		"name": "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE",
		"description": "<LANG>_INCLUDE_WHAT_YOU_USE 目標屬性的預設值。此變數用來在每個目標建立時將其屬性初始化。只有 <LANG> 為 C 或 CXX 時，才會完成此作業。"
	},
	"CMAKE_<LANG>_LIBRARY_ARCHITECTURE": {
		"name": "CMAKE_<LANG>_LIBRARY_ARCHITECTURE",
		"description": "偵測到 <LANG> 的目標架構程式庫目錄名稱。"
	},
	"CMAKE_<LANG>_LINKER_LAUNCHER": {
		"name": "CMAKE_<LANG>_LINKER_LAUNCHER",
		"description": "<LANG>_COMPILER_LAUNCHER 目標屬性的預設值。建立每個目標，此變數用來將其屬性初始化。只有在 <LANG> 為 C、CXX、Fortran 或 CUDA 時，才會完成此作業。"
	},
	"CMAKE_<LANG>_LINKER_PREFERENCE": {
		"name": "CMAKE_<LANG>_LINKER_PREFERENCE",
		"description": "可能會變更的內部變數。"
	},
	"CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES": {
		"name": "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES",
		"description": "可能會變更的內部變數。"
	},
	"CMAKE_<LANG>_LINKER_WRAPPER_FLAG": {
		"name": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG",
		"description": "定義編譯器驅動程式選項的語法，以將選項傳遞至連結器工具。其將用來轉譯連結器: 連結選項中的前置詞 (請參閱 add_link_options 和 target_link_options)。"
	},
	"CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP": {
		"name": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP",
		"description": "此變數會搭配 CMAKE_<LANG>_LINKER_WRAPPER_FLAG 變數使用，以設定連結選項中 LINKER: 前置詞的格式 (請參閱 add_link_options 和 target_link_options)。"
	},
	"CMAKE_<LANG>_LINK_EXECUTABLE": {
		"name": "CMAKE_<LANG>_LINK_EXECUTABLE",
		"description": "用來連結可執行檔的規則變數。"
	},
	"CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>": {
		"name": "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>",
		"description": "此變數會定義使用 LINK_GROUP 產生器運算式且目標的連結語言為 <LANG> 時，如何連結指定 <FEATURE> 的程式庫群組。若要讓此變數有任何效果，關聯的 CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED 變數必須設定為 True。"
	},
	"CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED",
		"description": "此變數匯指定連結語言 <LANG> 是否支援 <FEATURE>。如果此變數為 True，則 <FEATURE> 必須由 CMAKE_<LANG>_LINK_GROUP_USING_ 定義，而且不會使用較一般的 CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED 和 CMAKE_LINK_GROUP_USING_ 變數。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_<FEATURE>_ATTRIBUTES": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_<FEATURE>_ATTRIBUTES",
		"description": "此變數定義與連結語言 <LANG> 連結時，所指定連結庫 <FEATURE> 的語意。如果也為相同的 <FEATURE> 定義了該變數，則它會優先於 CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES，但具有類似的效果。如需詳細資料，請參閱 CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG",
		"description": "用於連結其檔案路徑所指定程式庫的語言專屬旗標。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_FLAG": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_FLAG",
		"description": "要用於將程式庫連結到共用程式庫或可執行檔的旗標。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_SUFFIX": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_SUFFIX",
		"description": "您連結的程式庫之語言專屬的後置詞。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>",
		"description": "此變數會定義使用 LINK_LIBRARY 產生器運算式且目標的連結語言為 <LANG> 時，如何連結指定 <FEATURE> 的程式庫或架構。若要讓此變數有任何效果，關聯的 CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED 變數必須設定為 True。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED",
		"description": "如果連結器語言 <LANG> 支援變數 CMAKE_<LANG>_LINK_LIBRARY_USING_ 所定義的 <FEATURE>，則設定為 TRUE。"
	},
	"CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG": {
		"name": "CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG",
		"description": "用來設定連結器的連結器旗標，讓命令列上所有指定的程式庫都會連結到目標。"
	},
	"CMAKE_<LANG>_OUTPUT_EXTENSION": {
		"name": "CMAKE_<LANG>_OUTPUT_EXTENSION",
		"description": "單一檔案的編譯輸出副檔名。"
	},
	"CMAKE_<LANG>_PLATFORM_ID": {
		"name": "CMAKE_<LANG>_PLATFORM_ID",
		"description": "可能會變更的內部變數。"
	},
	"CMAKE_<LANG>_SIMULATE_ID": {
		"name": "CMAKE_<LANG>_SIMULATE_ID",
		"description": "「已模擬」編譯器的識別字串。"
	},
	"CMAKE_<LANG>_SIMULATE_VERSION": {
		"name": "CMAKE_<LANG>_SIMULATE_VERSION",
		"description": "「模擬」編譯器的版本字串。"
	},
	"CMAKE_<LANG>_SIZEOF_DATA_PTR": {
		"name": "CMAKE_<LANG>_SIZEOF_DATA_PTR",
		"description": "語言 <LANG> 的指標對資料類型大小。"
	},
	"CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS": {
		"name": "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS",
		"description": "指定語言的來源檔案副檔名。"
	},
	"CMAKE_<LANG>_STANDARD": {
		"name": "CMAKE_<LANG>_STANDARD",
		"description": "變數為:"
	},
	"CMAKE_<LANG>_STANDARD_DEFAULT": {
		"name": "CMAKE_<LANG>_STANDARD_DEFAULT",
		"description": "編譯器的語言 <LANG> 預設標準。如果編譯器沒有標準層級的概念，則為空白。"
	},
	"CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES",
		"description": "要用於使用 <LANG> 編譯器編譯之每個來源檔案的 include 目錄。這用於指定目前平台之語言所需的系統 include 目錄。該目錄永遠會出現在傳遞到編譯器之 include 路徑的結尾。"
	},
	"CMAKE_<LANG>_STANDARD_LATEST": {
		"name": "CMAKE_<LANG>_STANDARD_LATEST",
		"description": "此變數代表目前編譯器支援的語言 <LANG> 的標準最新版本與 CMake 支援的最新版本之間的最小值。其值將設定為對應 <LANG>_STANDARD 目標屬性的其中一個支援值; 如需支援的語言清單，請參閱該屬性的文件。"
	},
	"CMAKE_<LANG>_STANDARD_LIBRARIES": {
		"name": "CMAKE_<LANG>_STANDARD_LIBRARIES",
		"description": "連結至針對語言 <LANG> 連結之每個可執行檔和共用程式庫的連結。這用於指定目前平台之語言所需的系統程式庫。"
	},
	"CMAKE_<LANG>_STANDARD_REQUIRED": {
		"name": "CMAKE_<LANG>_STANDARD_REQUIRED",
		"description": "變數為:"
	},
	"CMAKE_<LANG>_USING_LINKER_MODE": {
		"name": "CMAKE_<LANG>_USING_LINKER_MODE",
		"description": "這會控制應如何解譯 CMAKE_<LANG>_USING_LINKER_ 變數的值。支援的連結器模式值為："
	},
	"CMAKE_<LANG>_USING_LINKER_<TYPE>": {
		"name": "CMAKE_<LANG>_USING_LINKER_<TYPE>",
		"description": "此變數會定義如何指定連結步驟的 <TYPE> 連結器，由 CMAKE_LINKER_TYPE 變數或 LINKER_TYPE 目標屬性控制。根據 CMAKE_<LANG>_USING_LINKER_MODE 變數的值，CMAKE_<LANG>_USING_LINKER_<TYPE> 可以保留連結步驟的編譯器旗標，或要直接提供給連結器工具的旗標。"
	},
	"CMAKE_<LANG>_VISIBILITY_PRESET": {
		"name": "CMAKE_<LANG>_VISIBILITY_PRESET",
		"description": "當建立目標時，<LANG>_VISIBILITY_PRESET 目標屬性的預設值。"
	},
	"CMAKE_LIBRARY_ARCHITECTURE": {
		"name": "CMAKE_LIBRARY_ARCHITECTURE",
		"description": "目標架構程式庫目錄名稱 (如有偵測到)。"
	},
	"CMAKE_LIBRARY_ARCHITECTURE_REGEX": {
		"name": "CMAKE_LIBRARY_ARCHITECTURE_REGEX",
		"description": "比對可能之目標架構程式庫目錄名稱的 Regex。"
	},
	"CMAKE_LIBRARY_OUTPUT_DIRECTORY": {
		"name": "CMAKE_LIBRARY_OUTPUT_DIRECTORY",
		"description": "在建置時，用來放置所有 LIBRARY 目標檔案的位置。"
	},
	"CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "在為特定組態建置時，用來放置所有 LIBRARY 目標檔案的位置。"
	},
	"CMAKE_LIBRARY_PATH": {
		"name": "CMAKE_LIBRARY_PATH",
		"description": "以分號分隔的目錄清單，指定 find_library 命令的搜尋路徑。預設為空的，應由專案設定。"
	},
	"CMAKE_LIBRARY_PATH_FLAG": {
		"name": "CMAKE_LIBRARY_PATH_FLAG",
		"description": "要用來新增編譯器程式庫搜尋路徑的旗標。"
	},
	"CMAKE_LINKER_TYPE": {
		"name": "CMAKE_LINKER_TYPE",
		"description": "指定將用於連結步驟的連結器。"
	},
	"CMAKE_LINK_DEF_FILE_FLAG": {
		"name": "CMAKE_LINK_DEF_FILE_FLAG",
		"description": "要用來為 dll 建立指定 .def 檔的連結器旗標。"
	},
	"CMAKE_LINK_DEPENDS_NO_SHARED": {
		"name": "CMAKE_LINK_DEPENDS_NO_SHARED",
		"description": "是否要跳過共用程式庫檔案上的連結相依性。"
	},
	"CMAKE_LINK_DEPENDS_USE_LINKER": {
		"name": "CMAKE_LINK_DEPENDS_USE_LINKER",
		"description": "針對 Makefile 和 Ninja 產生器，連結相依性現在會由連結器本身針對一系列連結器產生。使用值 FALSE 定義此變數，您可以停用此功能。"
	},
	"CMAKE_LINK_DIRECTORIES_BEFORE": {
		"name": "CMAKE_LINK_DIRECTORIES_BEFORE",
		"description": "在 link_directories 中，是否要根據預設，在前方或後方加上目錄。"
	},
	"CMAKE_LINK_GROUP_USING_<FEATURE>": {
		"name": "CMAKE_LINK_GROUP_USING_<FEATURE>",
		"description": "此變數定義當使用 LINK_GROUP 產生器運算式時，如何連結指定 <FEATURE> 的程式庫群組。必須符合下列兩個條件，此變數才會有任何效果:"
	},
	"CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED",
		"description": "此變數指定不論連結語言為何，是否支援 <FEATURE>。如果此變數為 True，則 <FEATURE> 必須由 CMAKE_LINK_GROUP_USING_ 定義。"
	},
	"CMAKE_LINK_INTERFACE_LIBRARIES": {
		"name": "CMAKE_LINK_INTERFACE_LIBRARIES",
		"description": "目標的 LINK_INTERFACE_LIBRARIES 預設值。"
	},
	"CMAKE_LINK_LIBRARIES_ONLY_TARGETS": {
		"name": "CMAKE_LINK_LIBRARIES_ONLY_TARGETS",
		"description": "設定此變數，以在建立非匯入目標時初始化它們的 LINK_LIBRARIES_ONLY_TARGETS 屬性。將其設定為 true 可以額外檢查所有由 target_link_libraries 命名的可以是目標名稱的項目實際上是現有目標的名稱。如需詳細資料，請參閱目標屬性文件。"
	},
	"CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES": {
		"name": "CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES",
		"description": "此變數定義指定連結庫 <FEATURE> 的行為。它指定 <FEATURE> 如何與其他功能互動、何時套用 <FEATURE>，以及當 CMake 組合最終連結器命令列 (例如 de-duplication) 時，如何處理 <FEATURE>。"
	},
	"CMAKE_LINK_LIBRARY_FILE_FLAG": {
		"name": "CMAKE_LINK_LIBRARY_FILE_FLAG",
		"description": "要用來連結其檔案路徑所指定之程式庫的旗標。"
	},
	"CMAKE_LINK_LIBRARY_FLAG": {
		"name": "CMAKE_LINK_LIBRARY_FLAG",
		"description": "要用來將程式庫連結到可執行檔的旗標。"
	},
	"CMAKE_LINK_LIBRARY_SUFFIX": {
		"name": "CMAKE_LINK_LIBRARY_SUFFIX",
		"description": "您連結的程式庫尾碼。"
	},
	"CMAKE_LINK_LIBRARY_USING_<FEATURE>": {
		"name": "CMAKE_LINK_LIBRARY_USING_<FEATURE>",
		"description": "此變數定義當使用 LINK_LIBRARY 產生器運算式時，如何連結指定 <FEATURE> 的程式庫或架構。必須符合下列兩個條件，此變數才會有任何效果:"
	},
	"CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED",
		"description": "若不論連結器語言為何，都支援變數 CMAKE_LINK_LIBRARY_USING_ 所定義的 <FEATURE>，則設為 TRUE。"
	},
	"CMAKE_LINK_SEARCH_END_STATIC": {
		"name": "CMAKE_LINK_SEARCH_END_STATIC",
		"description": "結束連結線，如此便會使用靜態系統程式庫。"
	},
	"CMAKE_LINK_SEARCH_START_STATIC": {
		"name": "CMAKE_LINK_SEARCH_START_STATIC",
		"description": "假設連結器根據預設會尋找靜態程式庫。"
	},
	"CMAKE_LINK_WHAT_YOU_USE": {
		"name": "CMAKE_LINK_WHAT_YOU_USE",
		"description": "LINK_WHAT_YOU_USE 目標屬性的預設值。此變數用來在每個目標建立時將其屬性初始化。"
	},
	"CMAKE_LINK_WHAT_YOU_USE_CHECK": {
		"name": "CMAKE_LINK_WHAT_YOU_USE_CHECK",
		"description": "定義在連結步驟之後執行的命令，以檢查程式庫的使用方式。此檢查目前只定義在值 ldd -u -r 的 ELF 平台上。"
	},
	"CMAKE_MACOSX_BUNDLE": {
		"name": "CMAKE_MACOSX_BUNDLE",
		"description": "目標的 MACOSX_BUNDLE 預設值。"
	},
	"CMAKE_MACOSX_RPATH": {
		"name": "CMAKE_MACOSX_RPATH",
		"description": "是否要在 macOS 和 iOS 上使用 rpaths。"
	},
	"CMAKE_MAJOR_VERSION": {
		"name": "CMAKE_MAJOR_VERSION",
		"description": "CMAKE_VERSION 變數的第一個版本號碼元件。"
	},
	"CMAKE_MAKE_PROGRAM": {
		"name": "CMAKE_MAKE_PROGRAM",
		"description": "可以啟動原生建置系統的工具。值可能是可執行檔的完整路徑，若應位於 PATH 中，則可能只有工具名稱。"
	},
	"CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>": {
		"name": "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>",
		"description": "目標的 MAP_IMPORTED_CONFIG_ 預設值。"
	},
	"CMAKE_MATCH_COUNT": {
		"name": "CMAKE_MATCH_COUNT",
		"description": "最後一個規則運算式的相符數目。"
	},
	"CMAKE_MATCH_<n>": {
		"name": "CMAKE_MATCH_<n>",
		"description": "擷取上一個規則運算式比對的群組 <n>，從群組 0 到 9。群組 0 是整個比對。群組 1 到 9 是 () 語法擷取的子運算式。"
	},
	"CMAKE_MAXIMUM_RECURSION_DEPTH": {
		"name": "CMAKE_MAXIMUM_RECURSION_DEPTH",
		"description": "CMake 指令碼的遞迴深度上限。必須使用 -DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>，在命令列上設定，或由需要大型遞迴深度的專案在 CMakeLists.txt 內設定。設定此變數的專案，應為使用者提供覆寫的方式。例如:"
	},
	"CMAKE_MESSAGE_CONTEXT": {
		"name": "CMAKE_MESSAGE_CONTEXT",
		"description": "以 Cmake --log-context 命令列選項或 CMAKE_MESSAGE_CONTEXT_SHOW 變數啟用時，message 命令會將 CMAKE_MESSAGE_CONTEXT 清單轉換成以點分隔的字串，並用方括號括住，然後將其加到 NOTICE (含) 以下記錄層級的每一行訊息前面。"
	},
	"CMAKE_MESSAGE_CONTEXT_SHOW": {
		"name": "CMAKE_MESSAGE_CONTEXT_SHOW",
		"description": "將此變數設定為 true，即可顯示訊息命令所記錄的每一行內容 (如需了解如何指定內容本身，請參閱 CMAKE_MESSAGE_CONTEXT)。"
	},
	"CMAKE_MESSAGE_INDENT": {
		"name": "CMAKE_MESSAGE_INDENT",
		"description": "message 命令會聯結此清單中的字串，並針對 NOTICE (含) 以下的記錄層級，在每一行訊息前面加上產生的字串。"
	},
	"CMAKE_MESSAGE_LOG_LEVEL": {
		"name": "CMAKE_MESSAGE_LOG_LEVEL",
		"description": "如有設定，此變數會指定 message 命令所使用的記錄層級。有效值與 Cmake 程式的 --log-level <cmake --log-level> 命令列選項相同。若已設定此變數並指定了 --log-level <cmake --log-level> 命令列選項，則會優先使用命令列選項。"
	},
	"CMAKE_MFC_FLAG": {
		"name": "CMAKE_MFC_FLAG",
		"description": "為可執行檔或 dll 使用 MFC 程式庫。"
	},
	"CMAKE_MINIMUM_REQUIRED_VERSION": {
		"name": "CMAKE_MINIMUM_REQUIRED_VERSION",
		"description": "目前變數範圍或任何父變數範圍內，指定給 cmake_minimum_required 命令最近呼叫的 CMake <min> 版本。"
	},
	"CMAKE_MINOR_VERSION": {
		"name": "CMAKE_MINOR_VERSION",
		"description": "CMAKE_VERSION 變數的版本號碼第二部份。"
	},
	"CMAKE_MODULE_LINKER_FLAGS": {
		"name": "CMAKE_MODULE_LINKER_FLAGS",
		"description": "要用來建立模組的連結器旗標。"
	},
	"CMAKE_MODULE_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>",
		"description": "連結模組時要使用的旗標。"
	},
	"CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_MODULE_LINKER_FLAGS_ 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_MODULE_LINKER_FLAGS_INIT": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_MODULE_LINKER_FLAGS 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_MODULE_PATH": {
		"name": "CMAKE_MODULE_PATH",
		"description": "使用正斜線表示的分號分隔目錄清單，指定在檢查 CMake 隨附的預設模組之前，include 或 find_package 要載入的 CMake 模組搜尋路徑。根據預設會是空的，應由專案加以設定。"
	},
	"CMAKE_MSVCIDE_RUN_PATH": {
		"name": "CMAKE_MSVCIDE_RUN_PATH",
		"description": "使用 Visual Studio 12 2013 (或更高版本) 產生器時，在執行 add_custom_command 或 add_custom_target 時應使用的額外 PATH 位置。這可供執行命令，並使用 IDE 環境不知道的 dll 命令。"
	},
	"CMAKE_MSVC_DEBUG_INFORMATION_FORMAT": {
		"name": "CMAKE_MSVC_DEBUG_INFORMATION_FORMAT",
		"description": "選取以 Visual C++ ABI 為目標的 Visual C++ 偵錯資訊格式。此變數可在建立所有目標時，用來初始化其 MSVC_DEBUG_INFORMATION_FORMAT 屬性。也可透過呼叫 try_compile 命令，將其傳播到測試專案中。"
	},
	"CMAKE_MSVC_RUNTIME_LIBRARY": {
		"name": "CMAKE_MSVC_RUNTIME_LIBRARY",
		"description": "選取以 MSVC ABI 為目標的編譯器所使用的 MSVC 執行階段程式庫。此變數可在建立所有目標時，用來初始化其 MSVC_RUNTIME_LIBRARY 屬性。也可透過呼叫 try_compile 命令，將其傳播到測試專案中。"
	},
	"CMAKE_NETRC": {
		"name": "CMAKE_NETRC",
		"description": "此變數會用來將 file 與 file 命令的 NETRC 選項初始化。如需詳細資訊，請參閱這些命令。"
	},
	"CMAKE_NETRC_FILE": {
		"name": "CMAKE_NETRC_FILE",
		"description": "此變數會用來將 file 與 file 命令的 NETRC_FILE 選項初始化。如需詳細資訊，請參閱這些命令。"
	},
	"CMAKE_NINJA_OUTPUT_PATH_PREFIX": {
		"name": "CMAKE_NINJA_OUTPUT_PATH_PREFIX",
		"description": "告知 Ninja 產生器將首碼新增到 build.ninja 中的每個輸出路徑。結尾斜線會附加到首碼 (如果遺漏)。"
	},
	"CMAKE_NOT_USING_CONFIG_FLAGS": {
		"name": "CMAKE_NOT_USING_CONFIG_FLAGS",
		"description": "若為 true，則跳過 _BUILD_TYPE 旗標。"
	},
	"CMAKE_NO_BUILTIN_CHRPATH": {
		"name": "CMAKE_NO_BUILTIN_CHRPATH",
		"description": "請勿在安裝時使用內建二進位編輯器修正執行階段程式庫搜尋路徑。"
	},
	"CMAKE_NO_SYSTEM_FROM_IMPORTED": {
		"name": "CMAKE_NO_SYSTEM_FROM_IMPORTED",
		"description": "目標的 NO_SYSTEM_FROM_IMPORTED 預設值。"
	},
	"CMAKE_OBJCXX_EXTENSIONS": {
		"name": "CMAKE_OBJCXX_EXTENSIONS",
		"description": "若在建立目標時設定，則為 OBJCXX_EXTENSIONS 目標屬性的預設值。"
	},
	"CMAKE_OBJCXX_STANDARD": {
		"name": "CMAKE_OBJCXX_STANDARD",
		"description": "若在建立目標時設定，則為 OBJCXX_STANDARD 目標屬性的預設值。"
	},
	"CMAKE_OBJCXX_STANDARD_REQUIRED": {
		"name": "CMAKE_OBJCXX_STANDARD_REQUIRED",
		"description": "若在建立目標時設定，則為 OBJCXX_STANDARD_REQUIRED 目標屬性的預設值。"
	},
	"CMAKE_OBJC_EXTENSIONS": {
		"name": "CMAKE_OBJC_EXTENSIONS",
		"description": "若在建立目標時設定，則為 OBJC_EXTENSIONS 目標屬性的預設值。"
	},
	"CMAKE_OBJC_STANDARD": {
		"name": "CMAKE_OBJC_STANDARD",
		"description": "若在建立目標時設定，則為 OBJC_STANDARD 目標屬性的預設值。"
	},
	"CMAKE_OBJC_STANDARD_REQUIRED": {
		"name": "CMAKE_OBJC_STANDARD_REQUIRED",
		"description": "若在建立目標時設定，則為 OBJC_STANDARD_REQUIRED 目標屬性的預設值。"
	},
	"CMAKE_OBJECT_PATH_MAX": {
		"name": "CMAKE_OBJECT_PATH_MAX",
		"description": "原生建置工具允許的最大物件檔案完整路徑長度。"
	},
	"CMAKE_OPTIMIZE_DEPENDENCIES": {
		"name": "CMAKE_OPTIMIZE_DEPENDENCIES",
		"description": "將 OPTIMIZE_DEPENDENCIES 的目標屬性初始化。"
	},
	"CMAKE_OSX_ARCHITECTURES": {
		"name": "CMAKE_OSX_ARCHITECTURES",
		"description": "macOS 和 iOS 的目標專屬架構。"
	},
	"CMAKE_OSX_DEPLOYMENT_TARGET": {
		"name": "CMAKE_OSX_DEPLOYMENT_TARGET",
		"description": "指定目標二進位檔要部署的目標平台 (例如 macOS 或 iOS) 最低版本。CMake 會對 -mmacosx-version-min 旗標或其各自的同等目標平台使用此變數值。若是傳遞多個 macOS SDK 的舊版 Xcode，假如未設定 CMAKE_OSX_SYSROOT，此變數也有助於選擇 SDK。"
	},
	"CMAKE_OSX_SYSROOT": {
		"name": "CMAKE_OSX_SYSROOT",
		"description": "指定要使用的 macOS 平台 SDK 位置或名稱。CMake 會使用此值計算 -isysroot 旗標或同等項目的值，並協助 find_* 命令在 SDK 中尋找檔案。"
	},
	"CMAKE_PARENT_LIST_FILE": {
		"name": "CMAKE_PARENT_LIST_FILE",
		"description": "包含目前 CMake 檔案的 CMake 檔案完整路徑。"
	},
	"CMAKE_PATCH_VERSION": {
		"name": "CMAKE_PATCH_VERSION",
		"description": "CMAKE_VERSION 變數的版本號碼第三部份。"
	},
	"CMAKE_PCH_INSTANTIATE_TEMPLATES": {
		"name": "CMAKE_PCH_INSTANTIATE_TEMPLATES",
		"description": "此變數可在建立目標時，用來將其 PCH_INSTANTIATE_TEMPLATES 屬性初始化。"
	},
	"CMAKE_PCH_WARN_INVALID": {
		"name": "CMAKE_PCH_WARN_INVALID",
		"description": "此變數可在建立目標時，用來初始化其 PCH_WARN_INVALID 屬性。"
	},
	"CMAKE_PDB_OUTPUT_DIRECTORY": {
		"name": "CMAKE_PDB_OUTPUT_DIRECTORY",
		"description": "針對可執行檔和共用程式庫目標，連結器產生之 MS 偵錯符號 .pdb 檔案的輸出目錄。"
	},
	"CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "針對可執行檔和共用程式庫目標，連結器產生之 MS 偵錯符號 .pdb 檔案的每個組態輸出目錄。"
	},
	"CMAKE_PLATFORM_NO_VERSIONED_SONAME": {
		"name": "CMAKE_PLATFORM_NO_VERSIONED_SONAME",
		"description": "此變數是用來全域控制是否應將 VERSION 和 SOVERSION 目標屬性用於共用程式庫。設定為 true 時，會停用將版本資訊新增至每個共用程式庫目標的功能。"
	},
	"CMAKE_POLICY_DEFAULT_CMP<NNNN>": {
		"name": "CMAKE_POLICY_DEFAULT_CMP<NNNN>",
		"description": "當 CMake 原則 CMP<NNNN> 保留取消設定。"
	},
	"CMAKE_POLICY_WARNING_CMP<NNNN>": {
		"name": "CMAKE_POLICY_WARNING_CMP<NNNN>",
		"description": "當 CMake 原則 CMP<NNNN> 未由 cmake_policy 明確設定或由 cmake_minimum_required 隱含設定時，明確啟用或停用警告。這只對預設不警告的原則有意義:"
	},
	"CMAKE_POSITION_INDEPENDENT_CODE": {
		"name": "CMAKE_POSITION_INDEPENDENT_CODE",
		"description": "目標的 POSITION_INDEPENDENT_CODE 預設值。"
	},
	"CMAKE_PREFIX_PATH": {
		"name": "CMAKE_PREFIX_PATH",
		"description": "分號分隔目錄清單，指定要依 find_package、find_program、find_library、find_file 和 find_path 命令搜尋的安裝前置詞。每個命令將會依其文件的規定，新增適當的子目錄 (如 bin、lib 或 include)。"
	},
	"CMAKE_PROGRAM_PATH": {
		"name": "CMAKE_PROGRAM_PATH",
		"description": "以分號分隔的目錄清單，指定 find_program 命令的搜尋路徑。預設為空的，應由專案設定。"
	},
	"CMAKE_PROJECT_DESCRIPTION": {
		"name": "CMAKE_PROJECT_DESCRIPTION",
		"description": "最上層專案的描述。"
	},
	"CMAKE_PROJECT_HOMEPAGE_URL": {
		"name": "CMAKE_PROJECT_HOMEPAGE_URL",
		"description": "最上層專案的首頁 URL。"
	},
	"CMAKE_PROJECT_INCLUDE": {
		"name": "CMAKE_PROJECT_INCLUDE",
		"description": "要包含作為所有專案命令呼叫中最後一個步驟的 CMake 語言檔案。其目的為將自訂程式碼插入專案組建，但不修改其來源。如需在專案呼叫期間可能包含檔案的進一步討論，請參閱程式碼插入。"
	},
	"CMAKE_PROJECT_INCLUDE_BEFORE": {
		"name": "CMAKE_PROJECT_INCLUDE_BEFORE",
		"description": "要包含作為所有專案命令呼叫中第一個步驟的 CMake 語言檔案。其目的為將自訂程式碼插入專案組建，但不修改其來源。如需在專案呼叫期間可能包含檔案的進一步討論，請參閱程式碼插入。"
	},
	"CMAKE_PROJECT_NAME": {
		"name": "CMAKE_PROJECT_NAME",
		"description": "最上層專案的名稱。"
	},
	"CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE": {
		"name": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE",
		"description": "要包含作為指定 <PROJECT-NAME> 作為專案名稱的所有任何專案命令呼叫中最後一個步驟的 CMake 語言檔案。其目的為將自訂程式碼插入專案組建，但不修改其來源。如需在專案呼叫期間可能包含檔案的進一步討論，請參閱程式碼插入。"
	},
	"CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE": {
		"name": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE",
		"description": "要包含作為指定 <PROJECT-NAME> 作為專案名稱的所有任何專案命令呼叫中第一個步驟的 CMake 語言檔案。其目的為將自訂程式碼插入專案組建，但不修改其來源。如需在專案呼叫期間可能包含檔案的進一步討論，請參閱程式碼插入。"
	},
	"CMAKE_PROJECT_TOP_LEVEL_INCLUDES": {
		"name": "CMAKE_PROJECT_TOP_LEVEL_INCLUDES",
		"description": "以分號分隔的 CMake 語言檔案清單，包含在第一個專案呼叫時。如果指已讀取工具鏈檔案之後 (如果已指定一個)，而且已設定平台變數，但尚未啟用任何語言之前，則這些檔案會立即包含在內。因此，可能不會設定語言特定變數，包括 CMAKE_<LANG>_COMPILER 等項目。如需專案呼叫期間可能包含檔案的更詳細討論，請參閱程式碼導入。"
	},
	"CMAKE_PROJECT_VERSION": {
		"name": "CMAKE_PROJECT_VERSION",
		"description": "最上層專案的版本。"
	},
	"CMAKE_PROJECT_VERSION_MAJOR": {
		"name": "CMAKE_PROJECT_VERSION_MAJOR",
		"description": "最上層專案的主要版本。"
	},
	"CMAKE_PROJECT_VERSION_MINOR": {
		"name": "CMAKE_PROJECT_VERSION_MINOR",
		"description": "最上層專案的次要版本。"
	},
	"CMAKE_PROJECT_VERSION_PATCH": {
		"name": "CMAKE_PROJECT_VERSION_PATCH",
		"description": "最上層專案的修補版本。"
	},
	"CMAKE_PROJECT_VERSION_TWEAK": {
		"name": "CMAKE_PROJECT_VERSION_TWEAK",
		"description": "最上層專案的調校版本。"
	},
	"CMAKE_RANLIB": {
		"name": "CMAKE_RANLIB",
		"description": "靜態程式庫隨機化工具的名稱。"
	},
	"CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>": {
		"name": "CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>",
		"description": "讓 find_package 呼叫成為必要變數。"
	},
	"CMAKE_ROOT": {
		"name": "CMAKE_ROOT",
		"description": "為正在執行的 cmake 安裝目錄。"
	},
	"CMAKE_RULE_MESSAGES": {
		"name": "CMAKE_RULE_MESSAGES",
		"description": "指定是否要針對每個 make 規則回報訊息。"
	},
	"CMAKE_RUNTIME_OUTPUT_DIRECTORY": {
		"name": "CMAKE_RUNTIME_OUTPUT_DIRECTORY",
		"description": "在建置時，用來放置所有 RUNTIME 目標檔案的位置。"
	},
	"CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "在為特定組態建置時，用來放置所有 RUNTIME 目標檔案的位置。"
	},
	"CMAKE_SCRIPT_MODE_FILE": {
		"name": "CMAKE_SCRIPT_MODE_FILE",
		"description": "目前正在處理之 cmake -P 指令檔的完整路徑。"
	},
	"CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS": {
		"name": "CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS",
		"description": "指定共用程式庫是否產生匯入檔案。"
	},
	"CMAKE_SHARED_LIBRARY_PREFIX": {
		"name": "CMAKE_SHARED_LIBRARY_PREFIX",
		"description": "您連結的共用程式庫前置詞。"
	},
	"CMAKE_SHARED_LIBRARY_SUFFIX": {
		"name": "CMAKE_SHARED_LIBRARY_SUFFIX",
		"description": "您所連結目標共用程式庫的後置詞。"
	},
	"CMAKE_SHARED_LINKER_FLAGS": {
		"name": "CMAKE_SHARED_LINKER_FLAGS",
		"description": "要用來建立共用程式庫的連結器旗標。"
	},
	"CMAKE_SHARED_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>",
		"description": "連結共用程式庫時要使用的旗標。"
	},
	"CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_SHARED_LINKER_FLAGS_ 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_SHARED_LINKER_FLAGS_INIT": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_SHARED_LINKER_FLAGS 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_SHARED_MODULE_PREFIX": {
		"name": "CMAKE_SHARED_MODULE_PREFIX",
		"description": "您連結的可載入模組前置詞。"
	},
	"CMAKE_SHARED_MODULE_SUFFIX": {
		"name": "CMAKE_SHARED_MODULE_SUFFIX",
		"description": "您所連結目標共用程式庫的後置詞。"
	},
	"CMAKE_SIZEOF_VOID_P": {
		"name": "CMAKE_SIZEOF_VOID_P",
		"description": "Void 指標的大小。"
	},
	"CMAKE_SKIP_BUILD_RPATH": {
		"name": "CMAKE_SKIP_BUILD_RPATH",
		"description": "不要在建置樹狀結構中包含 RPATH。"
	},
	"CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": {
		"name": "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY",
		"description": "不要讓安裝目標相依於所有目標。"
	},
	"CMAKE_SKIP_INSTALL_RPATH": {
		"name": "CMAKE_SKIP_INSTALL_RPATH",
		"description": "不要在安裝樹狀結構中包含 RPATH。"
	},
	"CMAKE_SKIP_INSTALL_RULES": {
		"name": "CMAKE_SKIP_INSTALL_RULES",
		"description": "是否要停用產生安裝規則。"
	},
	"CMAKE_SKIP_RPATH": {
		"name": "CMAKE_SKIP_RPATH",
		"description": "如果為 true，不要新增執行階段路徑資訊。"
	},
	"CMAKE_SKIP_TEST_ALL_DEPENDENCY": {
		"name": "CMAKE_SKIP_TEST_ALL_DEPENDENCY",
		"description": "控制測試目標是否取決於所有目標。"
	},
	"CMAKE_SOURCE_DIR": {
		"name": "CMAKE_SOURCE_DIR",
		"description": "來源樹狀結構最上層路徑。"
	},
	"CMAKE_STAGING_PREFIX": {
		"name": "CMAKE_STAGING_PREFIX",
		"description": "這個變數可以設定在跨平台編譯時，要安裝的目標路徑。如果 CMAKE_SYSROOT 中的路徑是唯讀的，這會很好用，否則應保持初始狀態。"
	},
	"CMAKE_STATIC_LIBRARY_PREFIX": {
		"name": "CMAKE_STATIC_LIBRARY_PREFIX",
		"description": "您連結的靜態程式庫前置詞。"
	},
	"CMAKE_STATIC_LIBRARY_SUFFIX": {
		"name": "CMAKE_STATIC_LIBRARY_SUFFIX",
		"description": "您連結的靜態程式庫尾碼。"
	},
	"CMAKE_STATIC_LINKER_FLAGS": {
		"name": "CMAKE_STATIC_LINKER_FLAGS",
		"description": "用於建立靜態程式庫的旗標。建立靜態程式庫時，會將這些旗標傳遞到封存工具。"
	},
	"CMAKE_STATIC_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>",
		"description": "用於建立靜態程式庫的旗標。在 <CONFIG> 組態中建立靜態程式庫時，會將這些旗標傳遞到封存工具。"
	},
	"CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_STATIC_LINKER_FLAGS_ 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_STATIC_LINKER_FLAGS_INIT": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_INIT",
		"description": "在初次設定組建樹狀結構時，用來將 CMAKE_STATIC_LINKER_FLAGS 快取項目初始化的值。這個變數應由工具鏈檔案加以設定。CMake 可能會依據環境及目標平台，在值的前方或後方加上內容。"
	},
	"CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": {
		"name": "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS",
		"description": "此變數包含環境變數清單，作為使用 var=value 語法的語彙基元清單。"
	},
	"CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": {
		"name": "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE",
		"description": "如果在最上層 CMakeLists.txt 檔案的結尾，此變數評估結果為 ON，Sublime Text 2 額外產生器會從 .sublime-project 排除建置樹狀結構 (若其在來源樹狀結構內)。"
	},
	"CMAKE_SUPPRESS_REGENERATION": {
		"name": "CMAKE_SUPPRESS_REGENERATION",
		"description": "如果 CMAKE_SUPPRESS_REGENERATION 是 OFF (這是預設)，則 CMake 會新增所有其他目標相依的特殊目標，來檢查建置系統，並選擇性地重新執行 CMake，以在目標規格來源變更時，重新產生建置系統。"
	},
	"CMAKE_Swift_COMPILATION_MODE": {
		"name": "CMAKE_Swift_COMPILATION_MODE",
		"description": "指定 Swift 如何編譯目標。此變數用來在建立時於目標上初始化 Swift_COMPILATION_MODE 屬性。"
	},
	"CMAKE_Swift_LANGUAGE_VERSION": {
		"name": "CMAKE_Swift_LANGUAGE_VERSION",
		"description": "設定為 Swift 語言版本號碼。若未設定，則會假設為主機 Xcode 版本中已知可用的最舊版本:"
	},
	"CMAKE_Swift_MODULE_DIRECTORY": {
		"name": "CMAKE_Swift_MODULE_DIRECTORY",
		"description": "Swift 模組輸出目錄。"
	},
	"CMAKE_Swift_NUM_THREADS": {
		"name": "CMAKE_Swift_NUM_THREADS",
		"description": "用於平行編譯 Swift 目標的執行緒數目。"
	},
	"CMAKE_SYSROOT": {
		"name": "CMAKE_SYSROOT",
		"description": "要傳遞至 --sysroot 旗標中之編譯器的路徑。"
	},
	"CMAKE_SYSROOT_COMPILE": {
		"name": "CMAKE_SYSROOT_COMPILE",
		"description": "編譯來源檔案時，要傳遞至 --sysroot 旗標中編譯器的路徑。這與 CMAKE_SYSROOT 相同，但僅用於編譯而不會連結來源檔案。"
	},
	"CMAKE_SYSROOT_LINK": {
		"name": "CMAKE_SYSROOT_LINK",
		"description": "連結時，要傳遞至 --sysroot 旗標中編譯器的路徑。這與 CMAKE_SYSROOT 相同，但僅用於連結而不會編譯來源檔案。"
	},
	"CMAKE_SYSTEM": {
		"name": "CMAKE_SYSTEM",
		"description": "CMake 編譯之目標作業系統的複合名稱。"
	},
	"CMAKE_SYSTEM_APPBUNDLE_PATH": {
		"name": "CMAKE_SYSTEM_APPBUNDLE_PATH",
		"description": "Find_program 和 find_package 命令所使用的 macOS 應用程式套件組合搜尋路徑。根據預設，其包含目前系統的標準目錄。其不應由專案修改，請對此使用 CMAKE_APPBUNDLE_PATH。"
	},
	"CMAKE_SYSTEM_FRAMEWORK_PATH": {
		"name": "CMAKE_SYSTEM_FRAMEWORK_PATH",
		"description": "find_library、find_package、find_path 和 find_file 命令所使用的 macOS 架構搜尋路徑。根據預設，其包含目前系統的標準目錄。其不應由專案修改，請對此使用 CMAKE_FRAMEWORK_PATH。"
	},
	"CMAKE_SYSTEM_IGNORE_PATH": {
		"name": "CMAKE_SYSTEM_IGNORE_PATH",
		"description": "各種 find...() 命令要忽略的目錄清單 (以分號分隔)。"
	},
	"CMAKE_SYSTEM_IGNORE_PREFIX_PATH": {
		"name": "CMAKE_SYSTEM_IGNORE_PREFIX_PATH",
		"description": "find_program、find_library、find_file 及 find_path 命令要忽略的搜尋首碼清單 (以分號分隔)。find_package 命令的 Config 模式也會忽略首碼 (模組模式不受影響)。若要改為忽略特定目錄，請參閱 CMAKE_IGNORE_NONPREFIX_VAR。"
	},
	"CMAKE_SYSTEM_INCLUDE_PATH": {
		"name": "CMAKE_SYSTEM_INCLUDE_PATH",
		"description": "分號分隔的目錄清單，指定 find_file 和 find_path 命令的搜尋路徑。根據預設，這會包含目前系統的標準目錄。其不應由專案修改; 請對此使用 CMAKE_INCLUDE_PATH。另請參閱 CMAKE_SYSTEM_PREFIX_PATH。"
	},
	"CMAKE_SYSTEM_LIBRARY_PATH": {
		"name": "CMAKE_SYSTEM_LIBRARY_PATH",
		"description": "分號分隔的目錄清單，指定 find_library 命令的搜尋路徑。根據預設，這會包含目前系統的標準目錄。其不應由專案修改; 請對此使用 CMAKE_LIBRARY_PATH。另請參閱 CMAKE_SYSTEM_PREFIX_PATH。"
	},
	"CMAKE_SYSTEM_NAME": {
		"name": "CMAKE_SYSTEM_NAME",
		"description": "CMake 要為其建置的作業系統名稱。如需 OS 版本，請參閱 CMAKE_SYSTEM_VERSION 變數。"
	},
	"CMAKE_SYSTEM_PREFIX_PATH": {
		"name": "CMAKE_SYSTEM_PREFIX_PATH",
		"description": "分號分隔目錄清單，指定要依 find_package、find_program、find_library、find_file 和 find_path 命令搜尋的安裝前置詞。每個命令將會依其文件的規定，新增適當的子目錄 (如 bin、lib 或 include)。"
	},
	"CMAKE_SYSTEM_PROCESSOR": {
		"name": "CMAKE_SYSTEM_PROCESSOR",
		"description": "不進行交叉編譯時，此變數的值會與 CMAKE_HOST_SYSTEM_PROCESSOR 變數相同。在許多情況下，這會對應到組建的目標架構，但不保證每次皆是如此。(例如在 Windows 上，即使使用具有 32 位元目標的 MSVC cl 編譯器，主機也可能是 AMD64。)"
	},
	"CMAKE_SYSTEM_PROGRAM_PATH": {
		"name": "CMAKE_SYSTEM_PROGRAM_PATH",
		"description": "分號分隔的目錄清單，指定 find_program 命令的搜尋路徑。根據預設，這會包含目前系統的標準目錄。其不應由專案修改; 請對此使用 CMAKE_PROGRAM_PATH。另請參閱 CMAKE_SYSTEM_PREFIX_PATH。"
	},
	"CMAKE_SYSTEM_VERSION": {
		"name": "CMAKE_SYSTEM_VERSION",
		"description": "CMake 要為其建置的作業系統版本。如需 OS 名稱，請參閱 CMAKE_SYSTEM_NAME 變數。"
	},
	"CMAKE_TASKING_TOOLSET": {
		"name": "CMAKE_TASKING_TOOLSET",
		"description": "選取有提供編譯器的 Tasking 工具組"
	},
	"CMAKE_TEST_LAUNCHER": {
		"name": "CMAKE_TEST_LAUNCHER",
		"description": "此變數用來在建立可執行目標時初始化其 TEST_LAUNCHER 目標屬性。它用來指定執行可執行檔目標的執行中測試的啟動器 (由 add_test 命令新增)。"
	},
	"CMAKE_TLS_CAINFO": {
		"name": "CMAKE_TLS_CAINFO",
		"description": "指定檔案和檔案命令T LS_CAINFO 選項的預設值。預設會取消設定。"
	},
	"CMAKE_TLS_VERIFY": {
		"name": "CMAKE_TLS_VERIFY",
		"description": "指定檔案和檔案命令 TLS_VERIFY 選項的預設值。如果未設定此變數，命令會檢查 CMAKE_TLS_VERIFY 環境變數。如果都未設定，則預設值為關閉。"
	},
	"CMAKE_TLS_VERSION": {
		"name": "CMAKE_TLS_VERSION",
		"description": "指定檔案和檔案命令 TLS_VERSION 選項的預設值。如果未設定此變數，命令會檢查 CMAKE_TLS_VERSION 環境變數。"
	},
	"CMAKE_TOOLCHAIN_FILE": {
		"name": "CMAKE_TOOLCHAIN_FILE",
		"description": "提供給 cmake 之工具鏈檔案的路徑。"
	},
	"CMAKE_TRY_COMPILE_CONFIGURATION": {
		"name": "CMAKE_TRY_COMPILE_CONFIGURATION",
		"description": "用於 try_compile 和 try_run 專案的組建組態。"
	},
	"CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES": {
		"name": "CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES",
		"description": "設定為 True 值，以告知 try_compile 命令不要將任何平台變數散佈到測試專案。"
	},
	"CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": {
		"name": "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES",
		"description": "變數清單，try_compile 命令來源檔案簽章必須散佈到測試專案，才能以與主機專案相同的平台作為目標。"
	},
	"CMAKE_TRY_COMPILE_TARGET_TYPE": {
		"name": "CMAKE_TRY_COMPILE_TARGET_TYPE",
		"description": "使用來源檔案特徵標記為 try_compile 呼叫所產生的目標類型。有效值為:"
	},
	"CMAKE_TWEAK_VERSION": {
		"name": "CMAKE_TWEAK_VERSION",
		"description": "定義為 0，可與針對可能已定義較高值之較舊 CMake 版本撰寫的程式碼相容。"
	},
	"CMAKE_UNITY_BUILD": {
		"name": "CMAKE_UNITY_BUILD",
		"description": "此變數可在建立目標時，用來將初始化其 UNITY_BUILD 屬性。將其設定為 true，可批次編譯每個目標內的多個來源。這項功能稱為 Unity 或 Jumbo 組建。"
	},
	"CMAKE_UNITY_BUILD_BATCH_SIZE": {
		"name": "CMAKE_UNITY_BUILD_BATCH_SIZE",
		"description": "此變數可在建立目標時，用來初始化其 UNITY_BUILD_BATCH_SIZE 屬性。其會指定為目標啟用 unity 組建時，可合併到任何一個 unity 來源檔案中的預設來源檔案數目上限。"
	},
	"CMAKE_UNITY_BUILD_UNIQUE_ID": {
		"name": "CMAKE_UNITY_BUILD_UNIQUE_ID",
		"description": "此變數可在建立目標時，用來將其 UNITY_BUILD_UNIQUE_ID 屬性初始化。其會指定為整合組建中各個檔案產生的唯一識別碼名稱。"
	},
	"CMAKE_USER_MAKE_RULES_OVERRIDE": {
		"name": "CMAKE_USER_MAKE_RULES_OVERRIDE",
		"description": "指定要覆寫平台資訊的 CMake 檔案。"
	},
	"CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>": {
		"name": "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>",
		"description": "指定要覆寫 <LANG> 平台資訊的 CMake 檔案。"
	},
	"CMAKE_USE_RELATIVE_PATHS": {
		"name": "CMAKE_USE_RELATIVE_PATHS",
		"description": "這個變數沒有任何效力。其在舊版中部份實作的效力已在 CMake 3.4 中移除。"
	},
	"CMAKE_VERBOSE_MAKEFILE": {
		"name": "CMAKE_VERBOSE_MAKEFILE",
		"description": "啟用來自 Makefile 組建的詳細資訊輸出。"
	},
	"CMAKE_VERIFY_INTERFACE_HEADER_SETS": {
		"name": "CMAKE_VERIFY_INTERFACE_HEADER_SETS",
		"description": "此變數可用來在目標建立時初始化 VERIFY_INTERFACE_HEADER_SETS 屬性。將其設定為 True 可啟用標頭集驗證。"
	},
	"CMAKE_VERSION": {
		"name": "CMAKE_VERSION",
		"description": "CMake 版本字串，格式是以 . 分隔三個非負整數部份，後面可能會接 - 及其他資訊。前兩個部份代表功能層級，第三個部份代表 Bug 修正層級或開發日期。"
	},
	"CMAKE_VISIBILITY_INLINES_HIDDEN": {
		"name": "CMAKE_VISIBILITY_INLINES_HIDDEN",
		"description": "當建立目標時，VISIBILITY_INLINES_HIDDEN 目標屬性的預設值。"
	},
	"CMAKE_VS_DEBUGGER_COMMAND": {
		"name": "CMAKE_VS_DEBUGGER_COMMAND",
		"description": "此變數用來在建立每個目標時於其上初始化 VS_DEBUGGER_COMMAND 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS": {
		"name": "CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS",
		"description": "此變數用來在建立每個目標時於其上初始化 VS_DEBUGGER_COMMAND_ARGUMENTS 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_VS_DEBUGGER_ENVIRONMENT": {
		"name": "CMAKE_VS_DEBUGGER_ENVIRONMENT",
		"description": "此變數用來在建立每個目標時於其上初始化 VS_DEBUGGER_ENVIRONMENT 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_VS_DEBUGGER_WORKING_DIRECTORY": {
		"name": "CMAKE_VS_DEBUGGER_WORKING_DIRECTORY",
		"description": "此變數用來在建立每個目標時於其上初始化 VS_DEBUGGER_WORKING_DIRECTORY 屬性。如需詳細資訊，請參閱該目標屬性。"
	},
	"CMAKE_VS_DEVENV_COMMAND": {
		"name": "CMAKE_VS_DEVENV_COMMAND",
		"description": "Visual Studio 12 2013 及更新版本的產生器會將此變數設為隨對應 Visual Studio 版本一同安裝的 devenv.com 命令。請注意，此變數在 Visual Studio Express 版可能是空白的，因為這些版本不提供此工具。"
	},
	"CMAKE_VS_GLOBALS": {
		"name": "CMAKE_VS_GLOBALS",
		"description": "要根據目標使用 variable=Key 和值 Value 設定為目標屬性 VS_GLOBAL_ 的 Key=Value 記錄清單。"
	},
	"CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": {
		"name": "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD",
		"description": "將 INSTALL 目標納入預設組建。"
	},
	"CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": {
		"name": "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD",
		"description": "將 PACKAGE 目標納入預設組建。"
	},
	"CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": {
		"name": "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION",
		"description": "當產生的對象為已安裝 Intel Fortran 外掛程式的 Visual Studio 12 2013 或更新版本時，這會指定 .vfproj 專案檔格式版本。這僅供 CMake 內部使用，不應供專案程式碼使用。"
	},
	"CMAKE_VS_JUST_MY_CODE_DEBUGGING": {
		"name": "CMAKE_VS_JUST_MY_CODE_DEBUGGING",
		"description": "為 Visual Studio 偵錯工具啟用 Just My Code。"
	},
	"CMAKE_VS_MSBUILD_COMMAND": {
		"name": "CMAKE_VS_MSBUILD_COMMAND",
		"description": "Visual Studio 12 2013 及更新版本的產生器，會將這個變數設為隨著對應 Visual Studio 版本安裝的 MSBuild.exe 命令。"
	},
	"CMAKE_VS_NO_COMPILE_BATCHING": {
		"name": "CMAKE_VS_NO_COMPILE_BATCHING",
		"description": "使用 Visual Studio 產生器時關閉編譯批次處理。"
	},
	"CMAKE_VS_NsightTegra_VERSION": {
		"name": "CMAKE_VS_NsightTegra_VERSION",
		"description": "在使用 Visual Studio 產生器，並將 CMAKE_SYSTEM_NAME 變數設為 Android 時，這個變數會包含安裝的 NVIDIA Nsight Tegra Visual Studio Edition 版本號碼。"
	},
	"CMAKE_VS_NUGET_PACKAGE_RESTORE": {
		"name": "CMAKE_VS_NUGET_PACKAGE_RESTORE",
		"description": "使用 Visual Studio 產生器時，此快取變數會控制 msbuild 是否應該在建置之前自動嘗試還原 NuGet 封裝。可以使用目標上的 VS_PACKAGE_REFERENCES 屬性來定義 NuGet 封裝。如果未定義任何封裝參考，此設定將不會執行任何動作。"
	},
	"CMAKE_VS_PLATFORM_NAME": {
		"name": "CMAKE_VS_PLATFORM_NAME",
		"description": "目前產生器所使用的 Visual Studio 目標平台名稱。"
	},
	"CMAKE_VS_PLATFORM_NAME_DEFAULT": {
		"name": "CMAKE_VS_PLATFORM_NAME_DEFAULT",
		"description": "在不考慮 CMAKE_GENERATOR_PLATFORM 變數值的情況下，目前產生器的 Visual Studio 目標平台名稱預設值。若是 VS 2017 (含) 以下版本的 Visual Studio 產生器，此值一律為 Win32。若為 VS 2019 (含) 以上版本，則會以主機平台為準。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET",
		"description": "Visual Studio 平台工具組名稱。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_CUDA": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_CUDA",
		"description": "要使用其 Visual Studio 工具組的 NVIDIA CUDA Toolkit 版本。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR",
		"description": "獨立 NVIDIA CUDA 工具組的路徑 (例如，從安裝程式解壓縮)。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_FORTRAN": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_FORTRAN",
		"description": "要由 Visual Studio 專案使用的 Fortran 編譯器。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE",
		"description": "Visual Studio 慣用工具架構。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_VERSION": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_VERSION",
		"description": "Visual Studio 平台工具組版本。"
	},
	"CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES",
		"description": "此變數允許覆寫 Visual Studio 的預設 Exclude Directories。"
	},
	"CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES",
		"description": "此變數允許覆寫 Visual Studio 的預設 Executable Directories。"
	},
	"CMAKE_VS_SDK_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_INCLUDE_DIRECTORIES",
		"description": "此變數允許覆寫 Visual Studio 的預設 Include Directories。"
	},
	"CMAKE_VS_SDK_LIBRARY_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_LIBRARY_DIRECTORIES",
		"description": "此變數允許覆寫 Visual Studio 的預設 Library Directories。"
	},
	"CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES",
		"description": "此變數允許覆寫 Visual Studio 的預設 Library WinRT Directories。"
	},
	"CMAKE_VS_SDK_REFERENCE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_REFERENCE_DIRECTORIES",
		"description": "此變數允許覆寫 Visual Studio 的預設 Reference Directories。"
	},
	"CMAKE_VS_SDK_SOURCE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_SOURCE_DIRECTORIES",
		"description": "此變數允許覆寫 Visual Studio 的預設 Source Directories。"
	},
	"CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER",
		"description": "Visual Studio 目標架構識別碼。"
	},
	"CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION",
		"description": "Visual Studio 目標架構目標版本。"
	},
	"CMAKE_VS_TARGET_FRAMEWORK_VERSION": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_VERSION",
		"description": "Visual Studio 目標架構版本。"
	},
	"CMAKE_VS_USE_DEBUG_LIBRARIES": {
		"name": "CMAKE_VS_USE_DEBUG_LIBRARIES",
		"description": "指示 Visual Studio 產生器會將哪些設定視為偵錯設定。這會控制 .vcxproj 檔案的每個設定中的 UseDebugLibraries 設定。"
	},
	"CMAKE_VS_VERSION_BUILD_NUMBER": {
		"name": "CMAKE_VS_VERSION_BUILD_NUMBER",
		"description": "Visual Studio 版本。"
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION",
		"description": "告知 Visual Studio 產生器使用所提供的 Windows 目標平台最低版本。"
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION",
		"description": "Visual Studio Windows 目標平台版本。"
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM",
		"description": "覆寫 VS 2015 以上版本的 Windows 10 SDK 最高版本。"
	},
	"CMAKE_VS_WINRT_BY_DEFAULT": {
		"name": "CMAKE_VS_WINRT_BY_DEFAULT",
		"description": "通知 VS 2010 (含) 以上版本的 Visual Studio 產生器，目標平台預設會啟用 WinRT 編譯，若省略 /ZW 或 VS_WINRT_COMPONENT，則必須明確加以停用 (相反地，存在任一選項時則予以啟用)"
	},
	"CMAKE_WARN_DEPRECATED": {
		"name": "CMAKE_WARN_DEPRECATED",
		"description": "是否要對已淘汰的功能引發警告。"
	},
	"CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "每次遇到具有絕對 INSTALL DESTINATION 的檔案時，都要求 cmake_install.cmake 指令碼發出警告。"
	},
	"CMAKE_WATCOM_RUNTIME_LIBRARY": {
		"name": "CMAKE_WATCOM_RUNTIME_LIBRARY",
		"description": "選取以 Watcom ABI 為目標的編譯器所使用的 Watcom 執行階段程式庫。此變數可在建立所有目標時，用來初始化其 WATCOM_RUNTIME_LIBRARY 屬性。也可透過呼叫 try_compile 命令，將其傳播到測試專案中。"
	},
	"CMAKE_WIN32_EXECUTABLE": {
		"name": "CMAKE_WIN32_EXECUTABLE",
		"description": "目標的 WIN32_EXECUTABLE 預設值。"
	},
	"CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": {
		"name": "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS",
		"description": "WINDOWS_EXPORT_ALL_SYMBOLS 目標屬性的預設值。此變數用來在每個目標建立時將其屬性初始化。"
	},
	"CMAKE_XCODE_ATTRIBUTE_<an-attribute>": {
		"name": "CMAKE_XCODE_ATTRIBUTE_<an-attribute>",
		"description": "直接設定 Xcode 目標屬性。"
	},
	"CMAKE_XCODE_BUILD_SYSTEM": {
		"name": "CMAKE_XCODE_BUILD_SYSTEM",
		"description": "Xcode 組建系統選取項目。"
	},
	"CMAKE_XCODE_GENERATE_SCHEME": {
		"name": "CMAKE_XCODE_GENERATE_SCHEME",
		"description": "若已啟用，Xcode 產生器將會產生結構描述檔案。這些檔案可用於從命令列叫用 analyze、archive、build-for-testing 和 test 動作。"
	},
	"CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": {
		"name": "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY",
		"description": "如果啟用，Xcode 產生器只會為最上層的 project() 命令產生單一 Xcode 專案檔，而不是各為每個 project() 命令產生一個檔案。"
	},
	"CMAKE_XCODE_LINK_BUILD_PHASE_MODE": {
		"name": "CMAKE_XCODE_LINK_BUILD_PHASE_MODE",
		"description": "此變數可用來將目標上的 XCODE_LINK_BUILD_PHASE_MODE 屬性初始化。其會影響 Xcode 產生器用來連結不同種類程式庫的方法。預設值為 NONE。"
	},
	"CMAKE_XCODE_PLATFORM_TOOLSET": {
		"name": "CMAKE_XCODE_PLATFORM_TOOLSET",
		"description": "Xcode 編譯器選取範圍。"
	},
	"CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Address Sanitizer]。"
	},
	"CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": {
		"name": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Detect use of stack after return]。"
	},
	"CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": {
		"name": "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
		"description": "是否要在所產生的 Xcode 配置 [Options] 區段中，啟用 [Allow debugging when using document Versions Browser]。"
	},
	"CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": {
		"name": "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
		"description": "是否要停用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Main Thread Checker]。"
	},
	"CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": {
		"name": "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Dynamic Library Loads]。"
	},
	"CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": {
		"name": "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Dynamic Linker API usage]。"
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION",
		"description": "產生 Xcode 配置的 [選項] 區段中 Metal: API 驗證的屬性值。"
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE",
		"description": "產生之 Xcode 結構描述的 [選項] 區段中，GPU 框架擷取的屬性值。範例值為 Metal 和 Disabled。"
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION",
		"description": "產生 Xcode 配置的 [選項] 區段中 Metal: 著色器驗證的屬性值。"
	},
	"CMAKE_XCODE_SCHEME_ENVIRONMENT": {
		"name": "CMAKE_XCODE_SCHEME_ENVIRONMENT",
		"description": "請指定應新增到所產生之 Xcode 結構描述 Arguments 區段的環境變數。"
	},
	"CMAKE_XCODE_SCHEME_GUARD_MALLOC": {
		"name": "CMAKE_XCODE_SCHEME_GUARD_MALLOC",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Guard Malloc]。"
	},
	"CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION": {
		"name": "CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION",
		"description": "設定組建組態以執行目標。"
	},
	"CMAKE_XCODE_SCHEME_LAUNCH_MODE": {
		"name": "CMAKE_XCODE_SCHEME_LAUNCH_MODE",
		"description": "產生 Xcode 配置的 [資訊] 區段中 Launch 的屬性值。"
	},
	"CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Main Thread Checker] 選項 [Pause on issues]。"
	},
	"CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Malloc Guard Edges]。"
	},
	"CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Malloc Scribble]。"
	},
	"CMAKE_XCODE_SCHEME_MALLOC_STACK": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_STACK",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Malloc Stack]。"
	},
	"CMAKE_XCODE_SCHEME_THREAD_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Thread Sanitizer]。"
	},
	"CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Thread Sanitizer] - [Pause on issues]。"
	},
	"CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Undefined Behavior Sanitizer]。"
	},
	"CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Undefined Behavior Sanitizer] 選項 [Pause on issues]。"
	},
	"CMAKE_XCODE_SCHEME_WORKING_DIRECTORY": {
		"name": "CMAKE_XCODE_SCHEME_WORKING_DIRECTORY",
		"description": "在產生的 Xcode 配置中，指定執行和分析動作的工作目錄。"
	},
	"CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": {
		"name": "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Zombie Objects]。"
	},
	"CMAKE_XCODE_XCCONFIG": {
		"name": "CMAKE_XCODE_XCCONFIG",
		"description": "如果設定，Xcode 產生器會將指定的檔案登錄為全域 XCConfig 檔案。如需目標層級的 XCConfig 檔案，請參閱 XCODE_XCCONFIG 目標屬性。"
	},
	"CPACK_ABSOLUTE_DESTINATION_FILES": {
		"name": "CPACK_ABSOLUTE_DESTINATION_FILES",
		"description": "已使用 ABSOLUTE DESTINATION 路徑安裝的檔案清單。"
	},
	"CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": {
		"name": "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY",
		"description": "布林值切換，用來包含/排除最上層目錄 (適用於元件)。"
	},
	"CPACK_CUSTOM_INSTALL_VARIABLES": {
		"name": "CPACK_CUSTOM_INSTALL_VARIABLES",
		"description": "CPack 變數 (透過例如 cpack -D, CPackConfig.cmake 或 CPACK_PROJECT_CONFIG_FILE 等腳本)，在安裝腳本中無法直接顯示。相反地，您可以在 CPACK_CUSTOM_INSTALL_VARIABLES 變數中傳遞 varName=value 組的清單。在安裝時，每個清單項目都會產生將指定名稱 (varName) 設定為指定值的變數。如為空值，可省略 =。"
	},
	"CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "遇到具有絕對 INSTALL DESTINATION 的檔案時，立即要求 CPack 發出錯誤。"
	},
	"CPACK_INCLUDE_TOPLEVEL_DIRECTORY": {
		"name": "CPACK_INCLUDE_TOPLEVEL_DIRECTORY",
		"description": "布林值切換，用來包含/排除最上層目錄。"
	},
	"CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": {
		"name": "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
		"description": "封裝期間隱含建立目錄的預設權限。"
	},
	"CPACK_PACKAGING_INSTALL_PREFIX": {
		"name": "CPACK_PACKAGING_INSTALL_PREFIX",
		"description": "建置的套件中使用的前置詞。"
	},
	"CPACK_SET_DESTDIR": {
		"name": "CPACK_SET_DESTDIR",
		"description": "布林值切換，用來讓 CPack 在封裝時，使用 DESTDIR 機制。"
	},
	"CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "每次遇到具有絕對 INSTALL DESTINATION 的檔案時，都要求 CPack 發出警告。"
	},
	"CTEST_BINARY_DIRECTORY": {
		"name": "CTEST_BINARY_DIRECTORY",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest BuildDirectory 設定。"
	},
	"CTEST_BUILD_COMMAND": {
		"name": "CTEST_BUILD_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest MakeCommand 設定。"
	},
	"CTEST_BUILD_NAME": {
		"name": "CTEST_BUILD_NAME",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest BuildName 設定。"
	},
	"CTEST_BZR_COMMAND": {
		"name": "CTEST_BZR_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest BZRCommand 設定。"
	},
	"CTEST_BZR_UPDATE_OPTIONS": {
		"name": "CTEST_BZR_UPDATE_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest BZRUpdateOptions 設定。"
	},
	"CTEST_CHANGE_ID": {
		"name": "CTEST_CHANGE_ID",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest ChangeId 設定。"
	},
	"CTEST_CHECKOUT_COMMAND": {
		"name": "CTEST_CHECKOUT_COMMAND",
		"description": "告知 ctest_start 命令如何簽出 ctest 儀表板用戶端指令碼中的來源目錄或將其初始化。"
	},
	"CTEST_CONFIGURATION_TYPE": {
		"name": "CTEST_CONFIGURATION_TYPE",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest DefaultCTestConfigurationType 設定。"
	},
	"CTEST_CONFIGURE_COMMAND": {
		"name": "CTEST_CONFIGURE_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest ConfigureCommand 設定。"
	},
	"CTEST_COVERAGE_COMMAND": {
		"name": "CTEST_COVERAGE_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest CoverageCommand 設定。"
	},
	"CTEST_COVERAGE_EXTRA_FLAGS": {
		"name": "CTEST_COVERAGE_EXTRA_FLAGS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest CoverageExtraFlags 設定。"
	},
	"CTEST_CURL_OPTIONS": {
		"name": "CTEST_CURL_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest CurlOptions 設定。"
	},
	"CTEST_CUSTOM_COVERAGE_EXCLUDE": {
		"name": "CTEST_CUSTOM_COVERAGE_EXCLUDE",
		"description": "規則運算式清單，要用來從 ctest_coverage 命令的涵蓋範圍輸出，依檔案路徑排除檔案。"
	},
	"CTEST_CUSTOM_ERROR_EXCEPTION": {
		"name": "CTEST_CUSTOM_ERROR_EXCEPTION",
		"description": "在 ctest_build 命令的組建輸出中偵測錯誤訊息時，要用來排除的規則運算式清單。"
	},
	"CTEST_CUSTOM_ERROR_MATCH": {
		"name": "CTEST_CUSTOM_ERROR_MATCH",
		"description": "規則運算式清單，要用來在 ctest_build 命令的組建輸出中偵測錯誤訊息。"
	},
	"CTEST_CUSTOM_ERROR_POST_CONTEXT": {
		"name": "CTEST_CUSTOM_ERROR_POST_CONTEXT",
		"description": "要接在 ctest_build 命令的錯誤訊息後方，以內容形式包含的行數。預設為 10。"
	},
	"CTEST_CUSTOM_ERROR_PRE_CONTEXT": {
		"name": "CTEST_CUSTOM_ERROR_PRE_CONTEXT",
		"description": "要加在 ctest_build 命令的錯誤訊息前方，以內容形式包含的行數。預設為 10。"
	},
	"CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": {
		"name": "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE",
		"description": "在儲存失敗的測試輸出時，這是 ctest_test 命令會收集的最大大小 (位元組)。預設為 307200 (300 KiB)。請參閱 CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION 的可能截斷模式。"
	},
	"CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": {
		"name": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS",
		"description": "在單一建置步驟中會偵測的最大錯誤數目。超過之後，ctest_test 命令會截斷輸出。預設為 50。"
	},
	"CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": {
		"name": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS",
		"description": "在單一建置步驟中會偵測的最大警告數目。超過之後，ctest_test 命令會截斷輸出。預設為 50。"
	},
	"CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": {
		"name": "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE",
		"description": "在儲存通過的測試輸出時，這是 ctest_test 命令會收集的最大大小 (位元組)。預設為 1024 (1 KiB)。請參閱 CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION 的可能截斷模式。"
	},
	"CTEST_CUSTOM_MEMCHECK_IGNORE": {
		"name": "CTEST_CUSTOM_MEMCHECK_IGNORE",
		"description": "規則運算式清單，要用來在 ctest_memcheck 命令期間排除測試。"
	},
	"CTEST_CUSTOM_POST_MEMCHECK": {
		"name": "CTEST_CUSTOM_POST_MEMCHECK",
		"description": "命令清單，要在 ctest_memcheck 命令結束時執行。"
	},
	"CTEST_CUSTOM_POST_TEST": {
		"name": "CTEST_CUSTOM_POST_TEST",
		"description": "命令清單，要在 ctest_test 命令結束時執行。"
	},
	"CTEST_CUSTOM_PRE_MEMCHECK": {
		"name": "CTEST_CUSTOM_PRE_MEMCHECK",
		"description": "命令清單，要在 ctest_memcheck 命令開始時執行。"
	},
	"CTEST_CUSTOM_PRE_TEST": {
		"name": "CTEST_CUSTOM_PRE_TEST",
		"description": "命令清單，要在 ctest_test 命令開始時執行。"
	},
	"CTEST_CUSTOM_TESTS_IGNORE": {
		"name": "CTEST_CUSTOM_TESTS_IGNORE",
		"description": "要從 ctest_test 命令所執行的測試集合中排除的測試名稱清單。"
	},
	"CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION": {
		"name": "CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION",
		"description": "設定測試輸出截斷模式，以防透過 CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE 或 CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 變數設定大小上限。根據預設，輸出的結尾會被截斷。其他可能的值為中間值和標題。"
	},
	"CTEST_CUSTOM_WARNING_EXCEPTION": {
		"name": "CTEST_CUSTOM_WARNING_EXCEPTION",
		"description": "規則運算式清單，其將用於在 ctest_build 命令的組建輸出中偵測到警告訊息時，加以排除。"
	},
	"CTEST_CUSTOM_WARNING_MATCH": {
		"name": "CTEST_CUSTOM_WARNING_MATCH",
		"description": "規則運算式清單，其將用於偵測 ctest_build 命令組建輸出中的警告訊息。"
	},
	"CTEST_CVS_CHECKOUT": {
		"name": "CTEST_CVS_CHECKOUT",
		"description": "已淘汰。請改用 CTEST_CHECKOUT_COMMAND。"
	},
	"CTEST_CVS_COMMAND": {
		"name": "CTEST_CVS_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest CVSCommand 設定。"
	},
	"CTEST_CVS_UPDATE_OPTIONS": {
		"name": "CTEST_CVS_UPDATE_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest CVSUpdateOptions 設定。"
	},
	"CTEST_DROP_LOCATION": {
		"name": "CTEST_DROP_LOCATION",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest DropLocation 設定。"
	},
	"CTEST_DROP_METHOD": {
		"name": "CTEST_DROP_METHOD",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest DropMethod 設定。"
	},
	"CTEST_DROP_SITE": {
		"name": "CTEST_DROP_SITE",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest DropSite 設定。"
	},
	"CTEST_DROP_SITE_CDASH": {
		"name": "CTEST_DROP_SITE_CDASH",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest IsCDash 設定。"
	},
	"CTEST_DROP_SITE_PASSWORD": {
		"name": "CTEST_DROP_SITE_PASSWORD",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest DropSitePassword 設定。"
	},
	"CTEST_DROP_SITE_USER": {
		"name": "CTEST_DROP_SITE_USER",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest DropSiteUser 設定。"
	},
	"CTEST_EXTRA_COVERAGE_GLOB": {
		"name": "CTEST_EXTRA_COVERAGE_GLOB",
		"description": "規則運算式清單，要用來尋找 ctest_coverage 命令應涵蓋的檔案。"
	},
	"CTEST_GIT_COMMAND": {
		"name": "CTEST_GIT_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest GITCommand 設定。"
	},
	"CTEST_GIT_INIT_SUBMODULES": {
		"name": "CTEST_GIT_INIT_SUBMODULES",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest GITInitSubmodules 設定。"
	},
	"CTEST_GIT_UPDATE_CUSTOM": {
		"name": "CTEST_GIT_UPDATE_CUSTOM",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest GITUpdateCustom 設定。"
	},
	"CTEST_GIT_UPDATE_OPTIONS": {
		"name": "CTEST_GIT_UPDATE_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest GITUpdateOptions 設定。"
	},
	"CTEST_HG_COMMAND": {
		"name": "CTEST_HG_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest HGCommand 設定。"
	},
	"CTEST_HG_UPDATE_OPTIONS": {
		"name": "CTEST_HG_UPDATE_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest HGUpdateOptions 設定。"
	},
	"CTEST_LABELS_FOR_SUBPROJECTS": {
		"name": "CTEST_LABELS_FOR_SUBPROJECTS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest LabelsForSubprojects 設定。"
	},
	"CTEST_MEMORYCHECK_COMMAND": {
		"name": "CTEST_MEMORYCHECK_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest MemoryCheckCommand 設定。"
	},
	"CTEST_MEMORYCHECK_COMMAND_OPTIONS": {
		"name": "CTEST_MEMORYCHECK_COMMAND_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest MemoryCheckCommandOptions 設定。"
	},
	"CTEST_MEMORYCHECK_SANITIZER_OPTIONS": {
		"name": "CTEST_MEMORYCHECK_SANITIZER_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest MemoryCheckSanitizerOptions 設定。"
	},
	"CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": {
		"name": "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest MemoryCheckSuppressionFile 設定。"
	},
	"CTEST_MEMORYCHECK_TYPE": {
		"name": "CTEST_MEMORYCHECK_TYPE",
		"description": "在 CTest 儀表板用戶端指令碼中，指定 CTest MemoryCheckType 設定。有效值包括 Valgrind、Purify、BoundsChecker、DrMemory、CudaSanitizer、ThreadSanitizer、AddressSanitizer、LeakSanitizer、MemorySanitizer 及 UndefinedBehaviorSanitizer。"
	},
	"CTEST_NIGHTLY_START_TIME": {
		"name": "CTEST_NIGHTLY_START_TIME",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest NightlyStartTime 設定。"
	},
	"CTEST_P4_CLIENT": {
		"name": "CTEST_P4_CLIENT",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest P4Client 設定。"
	},
	"CTEST_P4_COMMAND": {
		"name": "CTEST_P4_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest P4Command 設定。"
	},
	"CTEST_P4_OPTIONS": {
		"name": "CTEST_P4_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest P4Options 設定。"
	},
	"CTEST_P4_UPDATE_OPTIONS": {
		"name": "CTEST_P4_UPDATE_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest P4UpdateOptions 設定。"
	},
	"CTEST_RESOURCE_SPEC_FILE": {
		"name": "CTEST_RESOURCE_SPEC_FILE",
		"description": "在 ctest 儀表板用戶端指令碼中，指定 CTest ResourceSpecFile 設定。"
	},
	"CTEST_RUN_CURRENT_SCRIPT": {
		"name": "CTEST_RUN_CURRENT_SCRIPT",
		"description": "將此設為 0，會使 ctest 在達到指令碼執行結尾時，無法藉由呼叫 ctest -S 再次執行。"
	},
	"CTEST_SCP_COMMAND": {
		"name": "CTEST_SCP_COMMAND",
		"description": "舊版選項。不使用。"
	},
	"CTEST_SCRIPT_DIRECTORY": {
		"name": "CTEST_SCRIPT_DIRECTORY",
		"description": "包含最上層 CTest 腳本的目錄。此概念與 CMAKE_SOURCE_DIR 類似。"
	},
	"CTEST_SITE": {
		"name": "CTEST_SITE",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest Site 設定。"
	},
	"CTEST_SOURCE_DIRECTORY": {
		"name": "CTEST_SOURCE_DIRECTORY",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest SourceDirectory 設定。"
	},
	"CTEST_SUBMIT_INACTIVITY_TIMEOUT": {
		"name": "CTEST_SUBMIT_INACTIVITY_TIMEOUT",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest SubmitInactivityTimeout 設定。"
	},
	"CTEST_SUBMIT_URL": {
		"name": "CTEST_SUBMIT_URL",
		"description": "在 ctest 儀表板用戶端指令碼中，指定 CTest SubmitURL 設定。"
	},
	"CTEST_SVN_COMMAND": {
		"name": "CTEST_SVN_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest SVNCommand 設定。"
	},
	"CTEST_SVN_OPTIONS": {
		"name": "CTEST_SVN_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest SVNOptions 設定。"
	},
	"CTEST_SVN_UPDATE_OPTIONS": {
		"name": "CTEST_SVN_UPDATE_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest SVNUpdateOptions 設定。"
	},
	"CTEST_TEST_LOAD": {
		"name": "CTEST_TEST_LOAD",
		"description": "請在 ctest 儀表板用戶端指令碼的 CTest 測試步驟中指定 TestLoad 設定。這會設定 ctest_test 命令的 TEST_LOAD 選項預設值。"
	},
	"CTEST_TEST_TIMEOUT": {
		"name": "CTEST_TEST_TIMEOUT",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest TimeOut 設定。"
	},
	"CTEST_TLS_VERIFY": {
		"name": "CTEST_TLS_VERIFY",
		"description": "在包含 CTest 模組之前，請先在 ctest 儀表板用戶端指令碼或專案 CMakeLists.txt 程式碼中指定 CTest TLSVerify 設定。此值是布林值，指出透過 https:// URL 提交至儀表板時，是否要驗證伺服器憑證。"
	},
	"CTEST_TLS_VERSION": {
		"name": "CTEST_TLS_VERSION",
		"description": "在包含 CTest 模組之前，請先在 ctest 儀表板用戶端指令碼或專案 CMakeLists.txt 程式碼中指定 CTest TLSVersion 設定。此值是透過 https:// URL 提交至儀表板時允許的最小 TLS 版本。"
	},
	"CTEST_TRIGGER_SITE": {
		"name": "CTEST_TRIGGER_SITE",
		"description": "舊版選項。不使用。"
	},
	"CTEST_UPDATE_COMMAND": {
		"name": "CTEST_UPDATE_COMMAND",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest UpdateCommand 設定。"
	},
	"CTEST_UPDATE_OPTIONS": {
		"name": "CTEST_UPDATE_OPTIONS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest UpdateOptions 設定。"
	},
	"CTEST_UPDATE_VERSION_ONLY": {
		"name": "CTEST_UPDATE_VERSION_ONLY",
		"description": "在 ctest 儀表板用戶端指令碼中，指定 CTest UpdateVersionOnly 設定。"
	},
	"CTEST_UPDATE_VERSION_OVERRIDE": {
		"name": "CTEST_UPDATE_VERSION_OVERRIDE",
		"description": "在 ctest 儀表板用戶端指令碼中，指定 CTest UpdateVersionOverride 設定。"
	},
	"CTEST_USE_LAUNCHERS": {
		"name": "CTEST_USE_LAUNCHERS",
		"description": "請在 ctest 儀表板用戶端指令碼中指定 CTest UseLaunchers 設定。"
	},
	"CYGWIN": {
		"name": "CYGWIN",
		"description": "若為 Cygwin，則為 True。"
	},
	"ENV": {
		"name": "ENV",
		"description": "用以讀取環境變數的運算子。"
	},
	"EXECUTABLE_OUTPUT_PATH": {
		"name": "EXECUTABLE_OUTPUT_PATH",
		"description": "舊的可執行檔位置變數。"
	},
	"GHSMULTI": {
		"name": "GHSMULTI",
		"description": "使用 Green Hills MULTI 產生器時為 1。"
	},
	"IOS": {
		"name": "IOS",
		"description": "當目標系統 (CMAKE_SYSTEM_NAME) 為 iOS 時，請設定為 1。"
	},
	"LIBRARY_OUTPUT_PATH": {
		"name": "LIBRARY_OUTPUT_PATH",
		"description": "舊版程式庫位置變數。"
	},
	"LINUX": {
		"name": "LINUX",
		"description": "當目標系統為 Linux 時，請設定為 true。"
	},
	"MINGW": {
		"name": "MINGW",
		"description": "當至少有一種語言已啟用，且編譯器以 Windows 上的 GNU ABI 為目標 (MinGW) 時設為 True 值。"
	},
	"MSVC": {
		"name": "MSVC",
		"description": "當編譯器是 Microsoft Visual C++ 的某個版本或另一個模擬 Visual C++ cl 命令列語法的編譯器時，請設為 true。"
	},
	"MSVC10": {
		"name": "MSVC10",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC11": {
		"name": "MSVC11",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC12": {
		"name": "MSVC12",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC14": {
		"name": "MSVC14",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC60": {
		"name": "MSVC60",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC70": {
		"name": "MSVC70",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC71": {
		"name": "MSVC71",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC80": {
		"name": "MSVC80",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC90": {
		"name": "MSVC90",
		"description": "不建議使用。請改用 MSVC_VERSION 變數。"
	},
	"MSVC_IDE": {
		"name": "MSVC_IDE",
		"description": "在使用 Microsoft Visual C++ IDE 時為 true。"
	},
	"MSVC_TOOLSET_VERSION": {
		"name": "MSVC_TOOLSET_VERSION",
		"description": "目前使用的 Microsoft Visual C/C++ 工具組版本 (如果有的話)。如果使用的是 MSVC 類似項，則會依據 MSVC_VERSION 版本所提供的編譯器版本設定這個變數。"
	},
	"MSVC_VERSION": {
		"name": "MSVC_VERSION",
		"description": "目前使用的 Microsoft Visual C/C++ 版本 (如果有的話)。如果使用的是模擬 Visual C++ 的編譯器，則會將這個變數設為模擬的工具組版本，如 _MSC_VER 前置處理器定義所提供。"
	},
	"MSYS": {
		"name": "MSYS",
		"description": "使用 MSYS Makefile 產生器時為 True。"
	},
	"<PackageName>_ROOT": {
		"name": "<PackageName>_ROOT",
		"description": "呼叫 find_package (<PackageName>) 會在 <PackageName>_ROOT CMake 變數指定的前置詞中搜尋，其中 <PackageName> 是指定給 find_package 呼叫的 (保留大小寫) 名稱，而 _ROOT 是常值。例如，find_package(Foo) 會搜尋 Foo_ROOT CMake 變數中指定的前置詞 (若已設定)。請參閱原則 CMP0074。"
	},
	"<PROJECT-NAME>_BINARY_DIR": {
		"name": "<PROJECT-NAME>_BINARY_DIR",
		"description": "具名專案的最上層二進位目錄。"
	},
	"<PROJECT-NAME>_DESCRIPTION": {
		"name": "<PROJECT-NAME>_DESCRIPTION",
		"description": "提供給使用了專案名稱 <PROJECT-NAME> 進行專案命令最近呼叫之 DESCRIPTION 選項的值 (如果有的話)。"
	},
	"<PROJECT-NAME>_HOMEPAGE_URL": {
		"name": "<PROJECT-NAME>_HOMEPAGE_URL",
		"description": "提供給使用了專案名稱 <PROJECT-NAME> 進行專案命令最近呼叫之 HOMEPAGE_URL 選項的值 (如果有的話)。"
	},
	"<PROJECT-NAME>_IS_TOP_LEVEL": {
		"name": "<PROJECT-NAME>_IS_TOP_LEVEL",
		"description": "指出是否在最上層 CMakeLists.txt 檔案中呼叫具名專案的布林變數。"
	},
	"<PROJECT-NAME>_SOURCE_DIR": {
		"name": "<PROJECT-NAME>_SOURCE_DIR",
		"description": "具名專案的最上層來源目錄。"
	},
	"<PROJECT-NAME>_VERSION": {
		"name": "<PROJECT-NAME>_VERSION",
		"description": "提供給使用了專案名稱 <PROJECT-NAME> 進行專案命令最近呼叫之 VERSION 選項的值 (如果有的話)。"
	},
	"<PROJECT-NAME>_VERSION_MAJOR": {
		"name": "<PROJECT-NAME>_VERSION_MAJOR",
		"description": "project 命令所設定 <PROJECT-NAME>_VERSION 變數的第一個版本號碼元件。"
	},
	"<PROJECT-NAME>_VERSION_MINOR": {
		"name": "<PROJECT-NAME>_VERSION_MINOR",
		"description": "<PROJECT-NAME>_VERSION 變數的版本號碼第二部份，如專案命令所設定。"
	},
	"<PROJECT-NAME>_VERSION_PATCH": {
		"name": "<PROJECT-NAME>_VERSION_PATCH",
		"description": "<PROJECT-NAME>_VERSION 變數的版本號碼第三部份，如專案命令所設定。"
	},
	"<PROJECT-NAME>_VERSION_TWEAK": {
		"name": "<PROJECT-NAME>_VERSION_TWEAK",
		"description": "project 命令所設定 <PROJECT-NAME>_VERSION 變數的第四個版本號碼元件。"
	},
	"PROJECT_BINARY_DIR": {
		"name": "PROJECT_BINARY_DIR",
		"description": "專案組建目錄的完整路徑。"
	},
	"PROJECT_DESCRIPTION": {
		"name": "PROJECT_DESCRIPTION",
		"description": "提供給專案命令的簡短專案描述。"
	},
	"PROJECT_HOMEPAGE_URL": {
		"name": "PROJECT_HOMEPAGE_URL",
		"description": "專案的首頁 URL。"
	},
	"PROJECT_IS_TOP_LEVEL": {
		"name": "PROJECT_IS_TOP_LEVEL",
		"description": "指出目前範圍或上方最近呼叫的專案命令是否位於最上層 CMakeLists.txt 檔案中的布林變數。"
	},
	"PROJECT_NAME": {
		"name": "PROJECT_NAME",
		"description": "提供給 project 命令的專案名稱。"
	},
	"PROJECT_SOURCE_DIR": {
		"name": "PROJECT_SOURCE_DIR",
		"description": "這是目前目錄範圍或其中一個父目錄中，上次呼叫 project 命令的來源目錄。請注意，這不會受到子目錄範圍內 (例如，從目前範圍的 add_subdirectory 呼叫內) 所進行 project 呼叫的影響。"
	},
	"PROJECT_VERSION": {
		"name": "PROJECT_VERSION",
		"description": "提供給專案命令最近呼叫之 VERSION 選項的值 (如果有的話)。"
	},
	"PROJECT_VERSION_MAJOR": {
		"name": "PROJECT_VERSION_MAJOR",
		"description": "project 命令所設定 PROJECT_VERSION 變數的第一個版本號碼元件。"
	},
	"PROJECT_VERSION_MINOR": {
		"name": "PROJECT_VERSION_MINOR",
		"description": "PROJECT_VERSION 變數的版本號碼第二部份，如專案命令所設定。"
	},
	"PROJECT_VERSION_PATCH": {
		"name": "PROJECT_VERSION_PATCH",
		"description": "PROJECT_VERSION 變數的版本號碼第三部份，如專案命令所設定。"
	},
	"PROJECT_VERSION_TWEAK": {
		"name": "PROJECT_VERSION_TWEAK",
		"description": "project 命令所設定 PROJECT_VERSION 變數的第四個版本號碼元件。"
	},
	"UNIX": {
		"name": "UNIX",
		"description": "當目標系統為 UNIX 或類似 UNIX (例如 APPLE 和 CYGWIN) 時，設為 true。若需要對目標系統有更確切的了解，則應查詢 CMAKE_SYSTEM_NAME 變數。"
	},
	"WIN32": {
		"name": "WIN32",
		"description": "當目標系統為 Windows (包括 Win64) 時，請設為 True。"
	},
	"WINCE": {
		"name": "WINCE",
		"description": "當 CMAKE_SYSTEM_NAME 變數設為 WindowsCE 時為 true。"
	},
	"WINDOWS_PHONE": {
		"name": "WINDOWS_PHONE",
		"description": "當 CMAKE_SYSTEM_NAME 變數設為 WindowsPhone 時為 true。"
	},
	"WINDOWS_STORE": {
		"name": "WINDOWS_STORE",
		"description": "當 CMAKE_SYSTEM_NAME 變數設為 WindowsStore 時為 true。"
	},
	"XCODE": {
		"name": "XCODE",
		"description": "在使用 Xcode 產生器時為 true。"
	},
	"XCODE_VERSION": {
		"name": "XCODE_VERSION",
		"description": "Xcode 版本 (僅限 Xcode 產生器)。"
	},
	"ADVANCED": {
		"name": "ADVANCED",
		"description": "若根據預設，應在 GUI 中隱藏項目，則為 true。"
	},
	"HELPSTRING": {
		"name": "HELPSTRING",
		"description": "與 GUI 中項目建立關聯的說明。"
	},
	"MODIFIED": {
		"name": "MODIFIED",
		"description": "內部管理屬性。請勿設定或獲取。"
	},
	"STRINGS": {
		"name": "STRINGS",
		"description": "列舉 GUI 選取項目可能的 STRING 項目值。"
	},
	"TYPE": {
		"name": "TYPE",
		"description": "GUI 中項目的 Widget 類型。"
	},
	"VALUE": {
		"name": "VALUE",
		"description": "快取項目的值。"
	},
	"ADDITIONAL_CLEAN_FILES": {
		"name": "ADDITIONAL_CLEAN_FILES",
		"description": "全域清除目標的過程中，會移除的檔案或目錄清單 (以分號分隔)。其可用於指定供多重目標或 CMake 本身使用所產生的檔案或目錄，或是以無法擷取為自訂命令輸出或副產物的方式所產生的檔案或目錄。"
	},
	"ADDITIONAL_MAKE_CLEAN_FILES": {
		"name": "ADDITIONAL_MAKE_CLEAN_FILES",
		"description": "要在清除階段移除的其他檔案。"
	},
	"BINARY_DIR": {
		"name": "BINARY_DIR",
		"description": "這個唯讀目錄屬性會回報其讀取來源所對應二進位目錄的絕對路徑。"
	},
	"BUILDSYSTEM_TARGETS": {
		"name": "BUILDSYSTEM_TARGETS",
		"description": "這個唯讀目錄屬性包含 buildsystem 目標的清單 (以分號分隔)，這些目標藉由呼叫 add_library、add_executable 及 add_custom_target 命令的方式，新增到目錄中。此清單不包含任何匯入的目標或別名目標，但包含介面程式庫。清單中的每個項目都是目標的邏輯名稱，適用於傳遞到 get_property 命令 TARGET 選項。"
	},
	"CACHE_VARIABLES": {
		"name": "CACHE_VARIABLES",
		"description": "目前目錄中可用的快取變數清單。"
	},
	"CLEAN_NO_CUSTOM": {
		"name": "CLEAN_NO_CUSTOM",
		"description": "設為 true，以告知 Makefile 產生器不要在進行清除作業時，移除這個目錄的自訂命令輸出。這在其他產生器上則會因為無法實行，而予以忽略。"
	},
	"CMAKE_CONFIGURE_DEPENDS": {
		"name": "CMAKE_CONFIGURE_DEPENDS",
		"description": "向 CMake 告知組態處理序的額外輸入檔。若修改了任何具名檔案，建置系統就會再次執行 CMake，以重新設定檔案並再次產生建置系統。"
	},
	"COMPILE_DEFINITIONS": {
		"name": "COMPILE_DEFINITIONS",
		"description": "用以編譯目錄來源的前置處理器定義。"
	},
	"COMPILE_DEFINITIONS_<CONFIG>": {
		"name": "COMPILE_DEFINITIONS_<CONFIG>",
		"description": "已略過。請參閱 CMake 原則 CMP0043。"
	},
	"COMPILE_OPTIONS": {
		"name": "COMPILE_OPTIONS",
		"description": "要傳遞至編譯器的選項清單。"
	},
	"DEFINITIONS": {
		"name": "DEFINITIONS",
		"description": "僅供 CMake 2.4 相容性使用。請改用 COMPILE_DEFINITIONS。"
	},
	"EXCLUDE_FROM_ALL": {
		"name": "EXCLUDE_FROM_ALL",
		"description": "在子目錄上，將這個目錄屬性設定為值 true，以從其上階的 \"all\" 目標，排除其目標。若排除，則在父目錄中執行像是 make，預設將不會建置子目錄的目標。如此並不會影響子目錄本身的 \"all\" 目標。在子目錄中執行像是 make，仍會建置其目標。"
	},
	"IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": {
		"name": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM",
		"description": "請為目錄中的相依性，指定 #include 行的轉換。"
	},
	"IMPORTED_TARGETS": {
		"name": "IMPORTED_TARGETS",
		"description": "此唯讀目錄屬性包含 Imported Targets 清單 (以分號分隔)。該清單藉由呼叫 add_library 及 add_executable 命令的方式，新增到目錄中。清單中的每個項目都是目標的邏輯名稱，適合在相同目錄收到呼叫時傳遞到 get_property 命令 TARGET 選項。"
	},
	"INCLUDE_DIRECTORIES": {
		"name": "INCLUDE_DIRECTORIES",
		"description": "前置處理器 include 檔案搜尋目錄的清單。"
	},
	"INCLUDE_REGULAR_EXPRESSION": {
		"name": "INCLUDE_REGULAR_EXPRESSION",
		"description": "包含檔案掃描規則運算式。"
	},
	"INTERPROCEDURAL_OPTIMIZATION": {
		"name": "INTERPROCEDURAL_OPTIMIZATION",
		"description": "此目錄屬性已不存在。"
	},
	"INTERPROCEDURAL_OPTIMIZATION_<CONFIG>": {
		"name": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
		"description": "此目錄屬性已不存在。"
	},
	"LABELS": {
		"name": "LABELS",
		"description": "指定與目錄及其所有子目錄相關聯的文字標籤清單。這相當於在目前目錄及子目錄中，設定所有目標的 LABELS 目標屬性和所有測試的 LABELS 測試屬性。注意: 必須啟用啟動器，才能將標籤傳播到目標。"
	},
	"LINK_DIRECTORIES": {
		"name": "LINK_DIRECTORIES",
		"description": "連結器搜尋目錄的清單。"
	},
	"LINK_OPTIONS": {
		"name": "LINK_OPTIONS",
		"description": "要用於共用程式庫、模組和可執行檔目標連結步驟以及裝置連結步驟的選項清單。"
	},
	"LISTFILE_STACK": {
		"name": "LISTFILE_STACK",
		"description": "正在處理的 Listfiles 目前堆疊。"
	},
	"MACROS": {
		"name": "MACROS",
		"description": "目前目錄中可用的 macro 命令清單。"
	},
	"PARENT_DIRECTORY": {
		"name": "PARENT_DIRECTORY",
		"description": "新增了目前子目錄的來源目錄。"
	},
	"RULE_LAUNCH_COMPILE": {
		"name": "RULE_LAUNCH_COMPILE",
		"description": "請指定編譯規則的啟動器。"
	},
	"RULE_LAUNCH_CUSTOM": {
		"name": "RULE_LAUNCH_CUSTOM",
		"description": "請指定自訂規則的啟動器。"
	},
	"RULE_LAUNCH_LINK": {
		"name": "RULE_LAUNCH_LINK",
		"description": "請指定連結規則的啟動器。"
	},
	"SOURCE_DIR": {
		"name": "SOURCE_DIR",
		"description": "這個唯讀目錄屬性會回報其讀取來源目錄的絕對路徑。"
	},
	"SUBDIRECTORIES": {
		"name": "SUBDIRECTORIES",
		"description": "這個唯讀目錄屬性包含 add_subdirectory 或 subdirs 命令目前處理的子目錄清單 (以分號分隔)。各個項目都是來源目錄 (包含 CMakeLists.txt 檔案) 的絕對路徑。其適合傳遞到 get_property 命令 DIRECTORY 選項。"
	},
	"SYSTEM": {
		"name": "SYSTEM",
		"description": "此目錄屬性是用來初始化在該目錄中所建立非匯入目標的 SYSTEM 目標屬性。當 SYSTEM 選項被指定為這些命令的引數時，會依 add_subdirectory 和 FetchContent_Declare 將其設為 true。"
	},
	"TESTS": {
		"name": "TESTS",
		"description": "測試清單。"
	},
	"TEST_INCLUDE_FILE": {
		"name": "TEST_INCLUDE_FILE",
		"description": "已淘汰。請改用 TEST_INCLUDE_FILES。"
	},
	"TEST_INCLUDE_FILES": {
		"name": "TEST_INCLUDE_FILES",
		"description": "執行 ctest 時所要包含 cmake 檔案的清單。"
	},
	"VARIABLES": {
		"name": "VARIABLES",
		"description": "目前目錄中定義的變數清單。"
	},
	"VS_GLOBAL_SECTION_POST_<section>": {
		"name": "VS_GLOBAL_SECTION_POST_<section>",
		"description": "在 Visual Studio 中指定 postSolution 全域區段。"
	},
	"VS_GLOBAL_SECTION_PRE_<section>": {
		"name": "VS_GLOBAL_SECTION_PRE_<section>",
		"description": "在 Visual Studio 中指定 preSolution 全域區段。"
	},
	"VS_STARTUP_PROJECT": {
		"name": "VS_STARTUP_PROJECT",
		"description": "請指定 Visual Studio 解決方案中的預設啟始專案。"
	},
	"ALLOW_DUPLICATE_CUSTOM_TARGETS": {
		"name": "ALLOW_DUPLICATE_CUSTOM_TARGETS",
		"description": "允許建立重複的自訂目標。"
	},
	"AUTOGEN_SOURCE_GROUP": {
		"name": "AUTOGEN_SOURCE_GROUP",
		"description": "AUTOMOC 和 AUTORCC 所產生檔案的 source_group 名稱。"
	},
	"AUTOGEN_TARGETS_FOLDER": {
		"name": "AUTOGEN_TARGETS_FOLDER",
		"description": "針對已啟用 AUTOMOC 的目標，CMake 自動新增之 *_autogen 目標的 FOLDER 名稱。"
	},
	"AUTOMOC_SOURCE_GROUP": {
		"name": "AUTOMOC_SOURCE_GROUP",
		"description": "AUTOMOC 所產生檔案的 source_group 名稱。"
	},
	"AUTOMOC_TARGETS_FOLDER": {
		"name": "AUTOMOC_TARGETS_FOLDER",
		"description": "針對已啟用 AUTOMOC 的目標，CMake 自動新增之 *_autogen 目標的 FOLDER 名稱。"
	},
	"AUTORCC_SOURCE_GROUP": {
		"name": "AUTORCC_SOURCE_GROUP",
		"description": "AUTORCC 所產生檔案的 source_group 名稱。"
	},
	"AUTOUIC_SOURCE_GROUP": {
		"name": "AUTOUIC_SOURCE_GROUP",
		"description": "AUTOMOC 所產生檔案的 source_group 名稱。"
	},
	"CMAKE_CUDA_KNOWN_FEATURES": {
		"name": "CMAKE_CUDA_KNOWN_FEATURES",
		"description": "此版 CMake 的已知 CUDA 功能清單。"
	},
	"CMAKE_CXX_KNOWN_FEATURES": {
		"name": "CMAKE_CXX_KNOWN_FEATURES",
		"description": "此版 CMake 已知 C++ 功能的清單。"
	},
	"CMAKE_C_KNOWN_FEATURES": {
		"name": "CMAKE_C_KNOWN_FEATURES",
		"description": "此版 CMake 已知 C 功能的清單。"
	},
	"CMAKE_HIP_KNOWN_FEATURES": {
		"name": "CMAKE_HIP_KNOWN_FEATURES",
		"description": "此版 CMake 已知 HIP 功能的清單。"
	},
	"CMAKE_ROLE": {
		"name": "CMAKE_ROLE",
		"description": "指示目前執行中指令碼所使用的模式。可以是下列其中一個值:"
	},
	"DEBUG_CONFIGURATIONS": {
		"name": "DEBUG_CONFIGURATIONS",
		"description": "指定哪些組態用於偵錯。"
	},
	"DISABLED_FEATURES": {
		"name": "DISABLED_FEATURES",
		"description": "CMake 執行期間停用的功能清單。"
	},
	"ECLIPSE_EXTRA_CPROJECT_CONTENTS": {
		"name": "ECLIPSE_EXTRA_CPROJECT_CONTENTS",
		"description": "要插入已產生 Eclipse cproject 檔案的其他內容。"
	},
	"ECLIPSE_EXTRA_NATURES": {
		"name": "ECLIPSE_EXTRA_NATURES",
		"description": "要新增至已產生 Eclipse 專案檔的性質清單。"
	},
	"ENABLED_FEATURES": {
		"name": "ENABLED_FEATURES",
		"description": "CMake 執行期間啟用的功能清單。"
	},
	"ENABLED_LANGUAGES": {
		"name": "ENABLED_LANGUAGES",
		"description": "包含目前已啟用語言之清單的唯讀屬性"
	},
	"FIND_LIBRARY_USE_LIB32_PATHS": {
		"name": "FIND_LIBRARY_USE_LIB32_PATHS",
		"description": "Find_library 命令是否應自動搜尋 lib32 目錄。"
	},
	"FIND_LIBRARY_USE_LIB64_PATHS": {
		"name": "FIND_LIBRARY_USE_LIB64_PATHS",
		"description": "Find_library 命令是否應自動搜尋 lib64 目錄。"
	},
	"FIND_LIBRARY_USE_LIBX32_PATHS": {
		"name": "FIND_LIBRARY_USE_LIBX32_PATHS",
		"description": "Find_library 命令是否應自動搜尋 libx32 目錄。"
	},
	"FIND_LIBRARY_USE_OPENBSD_VERSIONING": {
		"name": "FIND_LIBRARY_USE_OPENBSD_VERSIONING",
		"description": "Find_library 是否應尋找 OpenBSD 樣式的共用程式庫。"
	},
	"GENERATOR_IS_MULTI_CONFIG": {
		"name": "GENERATOR_IS_MULTI_CONFIG",
		"description": "在多重組態產生器上為 true 的唯讀屬性。"
	},
	"GLOBAL_DEPENDS_DEBUG_MODE": {
		"name": "GLOBAL_DEPENDS_DEBUG_MODE",
		"description": "啟用全域目標相依性關係圖偵錯模式。"
	},
	"GLOBAL_DEPENDS_NO_CYCLES": {
		"name": "GLOBAL_DEPENDS_NO_CYCLES",
		"description": "不允許全域目標相依性關係圖循環。"
	},
	"INSTALL_PARALLEL": {
		"name": "INSTALL_PARALLEL",
		"description": "啟用 Ninja 產生器的平行安裝選項。"
	},
	"IN_TRY_COMPILE": {
		"name": "IN_TRY_COMPILE",
		"description": "在 try-compile 組態期間為 true 的唯讀屬性。"
	},
	"JOB_POOLS": {
		"name": "JOB_POOLS",
		"description": "僅限 Ninja: 可用集區的清單。"
	},
	"PACKAGES_FOUND": {
		"name": "PACKAGES_FOUND",
		"description": "執行 CMake 期間找到之套件的清單。"
	},
	"PACKAGES_NOT_FOUND": {
		"name": "PACKAGES_NOT_FOUND",
		"description": "執行 CMake 期間找不到之套件的清單。"
	},
	"PREDEFINED_TARGETS_FOLDER": {
		"name": "PREDEFINED_TARGETS_FOLDER",
		"description": "CMake 自動新增之目標的 FOLDER 名稱。"
	},
	"PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE": {
		"name": "PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE",
		"description": "當此全域屬性設定為 True 時，會將 CMAKE_PROJECT_TOP_LEVEL_INCLUDES 變數傳播至使用整個專案簽章的 try_compile 呼叫。對來源檔案簽章的呼叫不受此屬性影響。預設會取消設定 PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE。"
	},
	"REPORT_UNDEFINED_PROPERTIES": {
		"name": "REPORT_UNDEFINED_PROPERTIES",
		"description": "如果設定，則向此檔案回報所有未定義的屬性。"
	},
	"RULE_MESSAGES": {
		"name": "RULE_MESSAGES",
		"description": "指定是否要針對每個 make 規則回報訊息。"
	},
	"TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": {
		"name": "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS",
		"description": "設定共用程式庫是否可命名為封存的類似名稱。"
	},
	"TARGET_MESSAGES": {
		"name": "TARGET_MESSAGES",
		"description": "指定是否要在各個目標完成時回報。"
	},
	"TARGET_SUPPORTS_SHARED_LIBS": {
		"name": "TARGET_SUPPORTS_SHARED_LIBS",
		"description": "目標平台是否支援共用程式庫。"
	},
	"USE_FOLDERS": {
		"name": "USE_FOLDERS",
		"description": "控制是否使用 FOLDER 目標屬性將目標組織到資料夾。最上層 CMakeLists.txt 檔案結尾處的 USE_FOLDERS 值是決定行為的原因。"
	},
	"XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": {
		"name": "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME",
		"description": "控制 Xcode 產生器發出的 EFFECTIVE_PLATFORM_NAME 量。"
	},
	"CPACK_DESKTOP_SHORTCUTS": {
		"name": "CPACK_DESKTOP_SHORTCUTS",
		"description": "為這個檔案指定應在桌面上建立的捷徑名稱清單。"
	},
	"CPACK_NEVER_OVERWRITE": {
		"name": "CPACK_NEVER_OVERWRITE",
		"description": "要求不要在安裝或重新安裝時覆寫此檔案。"
	},
	"CPACK_PERMANENT": {
		"name": "CPACK_PERMANENT",
		"description": "要求不要在解除安裝時移除此檔案。"
	},
	"CPACK_STARTUP_SHORTCUTS": {
		"name": "CPACK_STARTUP_SHORTCUTS",
		"description": "為這個檔案指定應在啟動資料夾中建立的捷徑名稱清單。"
	},
	"CPACK_START_MENU_SHORTCUTS": {
		"name": "CPACK_START_MENU_SHORTCUTS",
		"description": "為這個檔案指定應在 [開始] 功能表中建立的捷徑名稱清單。"
	},
	"CPACK_WIX_ACL": {
		"name": "CPACK_WIX_ACL",
		"description": "指定 WiX 安裝程式所安裝的檔案或目錄存取權。"
	},
	"ABSTRACT": {
		"name": "ABSTRACT",
		"description": "此來源檔案是否為抽象類別。"
	},
	"AUTORCC_OPTIONS": {
		"name": "AUTORCC_OPTIONS",
		"description": "使用 AUTORCC 時 rcc 的其他選項"
	},
	"AUTOUIC_OPTIONS": {
		"name": "AUTOUIC_OPTIONS",
		"description": "使用 AUTOUIC 時 uic 的其他選項"
	},
	"COMPILE_FLAGS": {
		"name": "COMPILE_FLAGS",
		"description": "編譯此來源檔案時，要新增的其他旗標。"
	},
	"CXX_SCAN_FOR_MODULES": {
		"name": "CXX_SCAN_FOR_MODULES",
		"description": "CXX_SCAN_FOR_MODULES 是布林值，指定 CMake 是否會掃描來源是否有 C++ 模組相依性。另請參閱 CXX_SCAN_FOR_MODULES，以取得全目標設定。"
	},
	"EXTERNAL_OBJECT": {
		"name": "EXTERNAL_OBJECT",
		"description": "如果設定為 true，則這是物件檔案。"
	},
	"Fortran_FORMAT": {
		"name": "Fortran_FORMAT",
		"description": "設定為 [FIXED] 或 [FREE] 以指出 Fortran 來源配置。"
	},
	"Fortran_PREPROCESS": {
		"name": "Fortran_PREPROCESS",
		"description": "控制是否應無條件地對 Fortran 來源檔案進行前置處理。"
	},
	"GENERATED": {
		"name": "GENERATED",
		"description": "來源檔案在組建還是 CMake 處理序中產生。"
	},
	"HEADER_FILE_ONLY": {
		"name": "HEADER_FILE_ONLY",
		"description": "此來源檔案是否僅為標頭檔。"
	},
	"KEEP_EXTENSION": {
		"name": "KEEP_EXTENSION",
		"description": "讓輸出檔案的副檔名與來源檔案相同。"
	},
	"LANGUAGE": {
		"name": "LANGUAGE",
		"description": "指定寫入來源檔案的程式設計語言。"
	},
	"LOCATION": {
		"name": "LOCATION",
		"description": "來源檔案的完整路徑。"
	},
	"MACOSX_PACKAGE_LOCATION": {
		"name": "MACOSX_PACKAGE_LOCATION",
		"description": "將來源檔案放在應用程式套件組合 (MACOSX_BUNDLE)、Core Foundation Bundle (BUNDLE) 或 Framework Bundle (FRAMEWORK) 中。其適用於 macOS 和 iOS。"
	},
	"OBJECT_DEPENDS": {
		"name": "OBJECT_DEPENDS",
		"description": "已編譯物件檔案相依的其他檔案。"
	},
	"OBJECT_OUTPUTS": {
		"name": "OBJECT_OUTPUTS",
		"description": "Ninja 或 Makefile 產生器規則的其他輸出。"
	},
	"SKIP_AUTOGEN": {
		"name": "SKIP_AUTOGEN",
		"description": "從 AUTOMOC、AUTOUIC 和 AUTORCC 處理排除來源檔案 (針對 Qt 專案)。"
	},
	"SKIP_AUTOMOC": {
		"name": "SKIP_AUTOMOC",
		"description": "從 AUTOMOC 處理排除來源檔案 (針對 Qt 專案)。"
	},
	"SKIP_AUTORCC": {
		"name": "SKIP_AUTORCC",
		"description": "從 AUTORCC 處理排除來源檔案 (針對 Qt 專案)。"
	},
	"SKIP_AUTOUIC": {
		"name": "SKIP_AUTOUIC",
		"description": "從 AUTOUIC 處理排除來源檔案 (針對 Qt 專案)。"
	},
	"SKIP_LINTING": {
		"name": "SKIP_LINTING",
		"description": "此屬性可讓您從 Lint 分析處理序中排除特定來源檔案。Lint 分析處理序涉及在來源檔案上執行 <LANG>_CPPLINT、<LANG>_CLANG_TIDY、<LANG>_CPPCHECK 和 <LANG>_INCLUDE_WHAT_YOU_USE 等工具，以及將標頭檔案編譯為 VERIFY_INTERFACE_HEADER_SETS 的一部分。透過在來源檔案上設定 SKIP_LINTING 命令，將不會針對該特定檔案執行提及的 Lint 分析工具。"
	},
	"SKIP_PRECOMPILE_HEADERS": {
		"name": "SKIP_PRECOMPILE_HEADERS",
		"description": "PRECOMPILE_HEADERS 功能是否略過此來源檔案。"
	},
	"SKIP_UNITY_BUILD_INCLUSION": {
		"name": "SKIP_UNITY_BUILD_INCLUSION",
		"description": "將此屬性設定為 true，可確保 unity 組建會在其相關聯目標的 UNITY_BUILD 屬性設定為 true 時，略過來源檔案。來源檔案會改為自行編譯，就像是停用 unity 組建一樣。"
	},
	"Swift_DEPENDENCIES_FILE": {
		"name": "Swift_DEPENDENCIES_FILE",
		"description": "此屬性會為來源設定 Swift 相依性檔案 (swiftdeps) 的路徑。若未指定，則會預設為 <OBJECT>.swiftdeps。"
	},
	"Swift_DIAGNOSTICS_FILE": {
		"name": "Swift_DIAGNOSTICS_FILE",
		"description": "此屬性可控制 Swift 診斷的序列化目標。"
	},
	"SYMBOLIC": {
		"name": "SYMBOLIC",
		"description": "這是否只是規則的名稱。"
	},
	"UNITY_GROUP": {
		"name": "UNITY_GROUP",
		"description": "此屬性可控制當 UNITY_BUILD_MODE 設定為 GROUP 時，來源屬於哪一個貯體。"
	},
	"VS_COPY_TO_OUT_DIR": {
		"name": "VS_COPY_TO_OUT_DIR",
		"description": "設定 Visual Studio 專案檔中來源檔案的 <CopyToOutputDirectory> 標記。有效值為 Never、Always 和 PreserveNewest。"
	},
	"VS_CSHARP_<tagname>": {
		"name": "VS_CSHARP_<tagname>",
		"description": "Visual Studio 和 CSharp 原始程式檔專用組態。"
	},
	"VS_DEPLOYMENT_CONTENT": {
		"name": "VS_DEPLOYMENT_CONTENT",
		"description": "使用 Visual Studio 產生器 <cmake-generators(7)> 建置時，將來源檔案標示為要透過 Windows Phone 或 Microsoft Store 應用程式部署的內容。值必須評估為 1 或 0，而且可以使用產生器運算式 <cmake-generator-expressions(7)>，依據組建組態進行選擇。來源檔案的 .vcxproj 檔案項目，會分別依照 1 和 0 的值加上 DeploymentContent 或 ExcludedFromBuild 標記。"
	},
	"VS_DEPLOYMENT_LOCATION": {
		"name": "VS_DEPLOYMENT_LOCATION",
		"description": "指定在使用 Visual Studio 產生器 <cmake-generators(7)> 建置時，Windows Phone 或 Microsoft Store 應用程式的內容來源檔案部署位置。此屬性只有在使用 VS_DEPLOYMENT_CONTENT 時才適用。值代表應用程式套件的相對路徑，並適用於所有組態。"
	},
	"VS_INCLUDE_IN_VSIX": {
		"name": "VS_INCLUDE_IN_VSIX",
		"description": "用於指定檔案是否應包含在 VSIX (Visual Studio 整合延伸模組) 延伸模組套件中的布林值屬性。此為開發 Visual Studio 延伸模組時的必要項。"
	},
	"VS_RESOURCE_GENERATOR": {
		"name": "VS_RESOURCE_GENERATOR",
		"description": "此屬性允許指定要在這個檔案使用的資源產生器。若未設定，其預設為 PublicResXFileCodeGenerator。"
	},
	"VS_SETTINGS": {
		"name": "VS_SETTINGS",
		"description": "在檔案上設定任何項目中繼資料。"
	},
	"VS_SHADER_DISABLE_OPTIMIZATIONS": {
		"name": "VS_SHADER_DISABLE_OPTIMIZATIONS",
		"description": "停用 .hlsl 來源檔案的編譯器最佳化。這會將 -Od 旗標新增到 FxCompiler 工具的命令列。為此屬性指定 true 值，以停用編譯器最佳化。"
	},
	"VS_SHADER_ENABLE_DEBUG": {
		"name": "VS_SHADER_ENABLE_DEBUG",
		"description": "啟用 .hlsl 來源檔案的偵錯資訊。這會將 -Zi 旗標新增到 FxCompiler 工具的命令列。指定 true 值，為編譯的著色器產生偵錯資訊。"
	},
	"VS_SHADER_ENTRYPOINT": {
		"name": "VS_SHADER_ENTRYPOINT",
		"description": "指定 .hlsl 來源檔案著色器的進入點名稱。"
	},
	"VS_SHADER_FLAGS": {
		"name": "VS_SHADER_FLAGS",
		"description": "設定 .hlsl 來源檔案的其他 Visual Studio 著色器旗標。"
	},
	"VS_SHADER_MODEL": {
		"name": "VS_SHADER_MODEL",
		"description": "指定 .hlsl 來源檔案的著色器模型。有些著色器類型只能搭配最新的著色器模型使用"
	},
	"VS_SHADER_OBJECT_FILE_NAME": {
		"name": "VS_SHADER_OBJECT_FILE_NAME",
		"description": "指定 .hlsl 來源檔案已編譯著色器目的檔的檔案名稱。這會將 -Fo 旗標新增到 FxCompiler 工具的命令列。"
	},
	"VS_SHADER_OUTPUT_HEADER_FILE": {
		"name": "VS_SHADER_OUTPUT_HEADER_FILE",
		"description": "設定包含 .hlsl 來源檔案目的檔的輸出標頭檔檔案名稱。"
	},
	"VS_SHADER_TYPE": {
		"name": "VS_SHADER_TYPE",
		"description": "設定 .hlsl 來源檔案的 Visual Studio 著色器類型。"
	},
	"VS_SHADER_VARIABLE_NAME": {
		"name": "VS_SHADER_VARIABLE_NAME",
		"description": "設定包含 .hlsl 來源檔案目的檔的標頭檔變數名稱。"
	},
	"VS_TOOL_OVERRIDE": {
		"name": "VS_TOOL_OVERRIDE",
		"description": "依據副檔名，以新工具覆寫要套用到來源檔案預設 Visual Studio 工具。"
	},
	"VS_XAML_TYPE": {
		"name": "VS_XAML_TYPE",
		"description": "將可延伸應用程式標記語言 (XAML) 來源檔案標示為與預設頁面不同的類型。最常見的用法是將預設 App.xaml 檔案設定為 ApplicationDefinition。"
	},
	"WRAP_EXCLUDE": {
		"name": "WRAP_EXCLUDE",
		"description": "將這個來源檔案排除於任何程式碼包裝技術之外。"
	},
	"XCODE_EXPLICIT_FILE_TYPE": {
		"name": "XCODE_EXPLICIT_FILE_TYPE",
		"description": "在 Xcode 對來源檔案的參考上，設定其 explicitFileType 屬性。CMake 會依據副檔名計算預設值，但也可使用此屬性明確指示。"
	},
	"XCODE_FILE_ATTRIBUTES": {
		"name": "XCODE_FILE_ATTRIBUTES",
		"description": "在 Xcode 對來源檔案的參考上，將值新增至其 ATTRIBUTES 設定。除了其他用途以外，其還可用於在 .mig 檔案上設定角色:"
	},
	"XCODE_LAST_KNOWN_FILE_TYPE": {
		"name": "XCODE_LAST_KNOWN_FILE_TYPE",
		"description": "將 Xcode 參考上的 lastKnownFileType 屬性設為某個目標。CMake 會依據副檔名計算預設，但也可使用此屬性明確告知預設。"
	},
	"ATTACHED_FILES": {
		"name": "ATTACHED_FILES",
		"description": "將檔案清單附加到儀表板提交。"
	},
	"ATTACHED_FILES_ON_FAIL": {
		"name": "ATTACHED_FILES_ON_FAIL",
		"description": "如果測試失敗，則將檔案清單附加到儀表板提交。"
	},
	"COST": {
		"name": "COST",
		"description": "此屬性描述測試的成本。啟用平行測試時，測試集中的測試將會以成本的遞減順序執行。專案可將此屬性設定為浮點值，來明確定義測試的成本。"
	},
	"DEPENDS": {
		"name": "DEPENDS",
		"description": "指定此測試只應在指定的測試清單後執行。"
	},
	"DISABLED": {
		"name": "DISABLED",
		"description": "若設定為 True，則會略過測試，且其狀態將會是「未執行」。測試總數將不會計入 DISABLED 測試，而且會向 CDash 回報其完成狀態為「已停用」。"
	},
	"ENVIRONMENT": {
		"name": "ENVIRONMENT",
		"description": "請指定為了執行測試而應定義的環境變數。"
	},
	"ENVIRONMENT_MODIFICATION": {
		"name": "ENVIRONMENT_MODIFICATION",
		"description": "指定應修改以執行測試的環境變數。請注意，此屬性所執行的作業是在已套用 ENVIRONMENT 屬性之後執行。"
	},
	"FAIL_REGULAR_EXPRESSION": {
		"name": "FAIL_REGULAR_EXPRESSION",
		"description": "如果測試輸出 (stdout 或 stderr) 符合此規則運算式，測試將會失敗，無論程序結束代碼為何。超過 TIMEOUT 所指定逾時的測試會失敗，無論 FAIL_REGULAR_EXPRESSION 為何。任何非零的傳回碼或系統層級測試失敗 (包括分割錯誤、訊號中止或堆積錯誤) 都會使得測試失敗，即使規則運算式不相符亦然。"
	},
	"FIXTURES_CLEANUP": {
		"name": "FIXTURES_CLEANUP",
		"description": "指定要將測試視為清理測試的固件清單。這些固件名稱與測試案例名稱不同，而且不必和與其相關的測試名稱有任何相似性。"
	},
	"FIXTURES_REQUIRED": {
		"name": "FIXTURES_REQUIRED",
		"description": "指定測試所需的固件清單。固件名稱區分大小寫，而且不必和與其相關的測試名稱有任何相似性。"
	},
	"FIXTURES_SETUP": {
		"name": "FIXTURES_SETUP",
		"description": "指定要將測試視為設定測試的固件清單。這些固件名稱與測試案例名稱不同，而且不必和與其相關的測試名稱有任何相似性。"
	},
	"GENERATED_RESOURCE_SPEC_FILE": {
		"name": "GENERATED_RESOURCE_SPEC_FILE",
		"description": "此測試所產生的動態產生的資源規格檔案 <ctest-resource-dynamically-generated-spec-file> 的路徑。"
	},
	"MEASUREMENT": {
		"name": "MEASUREMENT",
		"description": "請指定要為測試回報的 CDASH 度量和值。"
	},
	"PASS_REGULAR_EXPRESSION": {
		"name": "PASS_REGULAR_EXPRESSION",
		"description": "測試輸出 (stdout 或 stderr) 必須符合此規則運算式，測試才能通過。已忽略程序結束代碼。超過 TIMEOUT 所指定逾時的測試仍會失敗，無論 PASS_REGULAR_EXPRESSION 為何。系統層級測試失敗 (包括分割錯誤、訊號中止或堆積錯誤) 可能無法通過測試，即使 PASS_REGULAR_EXPRESSION 相符亦然。"
	},
	"PROCESSORS": {
		"name": "PROCESSORS",
		"description": "請設定以指定此測試需要多少個處理序位置。若未設定，則預設為 1 個處理器。"
	},
	"PROCESSOR_AFFINITY": {
		"name": "PROCESSOR_AFFINITY",
		"description": "設為 true 值，要求 CTest 以一組固定處理器的 CPU 親和性啟動測試處理序。若啟用且目前平台予以支援，CTest 就會在啟動測試處理序時，選擇一組處理器以置入 CPU 親和性中。一組的處理器數目取決於 PROCESSORS 測試屬性或 CTest 可用的處理器數目，以較小者為準。選擇的那組處理器會與指派給其他同時執行之測試 (也啟用了 PROCESSOR_AFFINITY 屬性) 的處理器解除連結。"
	},
	"REQUIRED_FILES": {
		"name": "REQUIRED_FILES",
		"description": "執行測試所需的檔案清單。除非指定了絕對路徑，否則檔案名稱會相對於測試的 WORKING_DIRECTORY。"
	},
	"RESOURCE_GROUPS": {
		"name": "RESOURCE_GROUPS",
		"description": "指定測試所需的資源，並以對測試有意義的方式分組。如需此屬性如何整合到 CTest 資源配置功能的詳細資訊，請參閱資源配置 <ctest-resource-allocation>。"
	},
	"RESOURCE_LOCK": {
		"name": "RESOURCE_LOCK",
		"description": "指定此測試鎖定的資源清單。"
	},
	"RUN_SERIAL": {
		"name": "RUN_SERIAL",
		"description": "不要與任何其他測試平行執行這項測試。"
	},
	"SKIP_REGULAR_EXPRESSION": {
		"name": "SKIP_REGULAR_EXPRESSION",
		"description": "如果測試輸出 (stderr 或 stdout) 符合此規則運算式，則會將測試標示為已略過，無論程式結束代碼為何。超過 TIMEOUT 所指定逾時的測試仍會失敗，無論 SKIP_REGULAR_EXPRESSION 為何。系統層級測試失敗 (包括分割錯誤、訊號中止或堆積錯誤) 可能無法通過測試，即使規則運算式相符亦然。"
	},
	"SKIP_RETURN_CODE": {
		"name": "SKIP_RETURN_CODE",
		"description": "要將測試標記為已跳過的傳回碼。"
	},
	"TIMEOUT": {
		"name": "TIMEOUT",
		"description": "允許此測試執行的秒數。"
	},
	"TIMEOUT_AFTER_MATCH": {
		"name": "TIMEOUT_AFTER_MATCH",
		"description": "在測試輸出中遇到相符的程式碼後，變更測試的逾時持續期間。"
	},
	"TIMEOUT_SIGNAL_GRACE_PERIOD": {
		"name": "TIMEOUT_SIGNAL_GRACE_PERIOD",
		"description": "如果已設定 TIMEOUT_SIGNAL_NAME 測試屬性，此屬性會指定傳送自訂訊號之後，要等候測試處理序終止的秒數。否則，此屬性沒有意義。"
	},
	"TIMEOUT_SIGNAL_NAME": {
		"name": "TIMEOUT_SIGNAL_NAME",
		"description": "指定當測試程序達到逾時時要傳送的自訂訊號。這可在支援 POSIX 訊號的平台上使用。在 Windows 上無法使用。"
	},
	"WILL_FAIL": {
		"name": "WILL_FAIL",
		"description": "如果為 True，則反轉通過/失敗測試準則。WILL_FAIL 為 True 但失敗且傳回碼為 0，以及通過且傳回碼為非零的測試。超過 TIMEOUT 所指定逾時的測試仍會失敗，無論 WILL_FAIL 為何。系統層級測試失敗 (包括分割錯誤、訊號中止或堆積錯誤) 可能無法通過測試，即使 WILL_FAIL 為 True 亦然。"
	},
	"WORKING_DIRECTORY": {
		"name": "WORKING_DIRECTORY",
		"description": "會從中呼叫測試可執行檔的目錄。"
	},
	"AIX_EXPORT_ALL_SYMBOLS": {
		"name": "AIX_EXPORT_ALL_SYMBOLS",
		"description": "在 AIX 上，CMake 會自動從共用程式庫及已設定 ENABLE_EXPORTS 目標屬性的可執行檔，匯出所有符號。明確停用此布林值屬性會禁止此行為，而且預設不會匯出任何符號。在此情況下，專案必須使用其他方法來匯出某些符號。"
	},
	"ALIASED_TARGET": {
		"name": "ALIASED_TARGET",
		"description": "此目標作為別名的目標名稱。"
	},
	"ALIAS_GLOBAL": {
		"name": "ALIAS_GLOBAL",
		"description": "唯讀屬性，指出是否全域可見別名目標。"
	},
	"ANDROID_ANT_ADDITIONAL_OPTIONS": {
		"name": "ANDROID_ANT_ADDITIONAL_OPTIONS",
		"description": "設定 Android Ant 建置系統的其他選項。這是包含 Ant 組建所有命令列選項的字串值。若在目標建立時已設定 CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_API": {
		"name": "ANDROID_API",
		"description": "在使用 NVIDIA Nsight Tegra Visual Studio Edition 進行 Android 的跨平台編譯時，這個屬性會設定 Android 目標 API 版本 (例如 15)。版本號碼必須是十進位正整數。若在目標建立時已設定 CMAKE_ANDROID_API 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_API_MIN": {
		"name": "ANDROID_API_MIN",
		"description": "設定 Android 最低 API 版本 (例如 9)。版本號碼必須是十進位正整數。若在目標建立時已設定 CMAKE_ANDROID_API_MIN 變數的值，就會用來將這個屬性初始化。機器碼會使用這個 API 版本來建置。"
	},
	"ANDROID_ARCH": {
		"name": "ANDROID_ARCH",
		"description": "在使用 NVIDIA Nsight Tegra Visual Studio Edition 進行 Android 的跨平台編譯時，這個屬性會設定 Android 目標架構。"
	},
	"ANDROID_ASSETS_DIRECTORIES": {
		"name": "ANDROID_ASSETS_DIRECTORIES",
		"description": "設定要在建置之前，複製到主要資產資料夾中的 Android 資產目錄。這是包含分號分隔目錄路徑的字串屬性。若在目標建立時已設定 CMAKE_ANDROID_ASSETS_DIRECTORIES 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_GUI": {
		"name": "ANDROID_GUI",
		"description": "在使用 NVIDIA Nsight Tegra Visual Studio Edition 進行 Android 的跨平台編譯時，這個屬性會指定是否在 Android 上將可執行檔建置為應用程式套件。"
	},
	"ANDROID_JAR_DEPENDENCIES": {
		"name": "ANDROID_JAR_DEPENDENCIES",
		"description": "設定 Android 屬性，以指定 JAR 相依性。這是字串值屬性。若在目標建立時已設定 CMAKE_ANDROID_JAR_DEPENDENCIES 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_JAR_DIRECTORIES": {
		"name": "ANDROID_JAR_DIRECTORIES",
		"description": "設定 Android 屬性，以指定要在其中搜尋 JAR 程式庫的目錄。"
	},
	"ANDROID_JAVA_SOURCE_DIR": {
		"name": "ANDROID_JAVA_SOURCE_DIR",
		"description": "設定 Android 屬性，以指定 Java 原始程式碼根目錄。這是包含分號分隔目錄路徑的字串屬性。若在目標建立時已設定 CMAKE_ANDROID_JAVA_SOURCE_DIR 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_NATIVE_LIB_DEPENDENCIES": {
		"name": "ANDROID_NATIVE_LIB_DEPENDENCIES",
		"description": "設定 Android 屬性，以指定 .so 相依性。這是字串屬性。"
	},
	"ANDROID_NATIVE_LIB_DIRECTORIES": {
		"name": "ANDROID_NATIVE_LIB_DIRECTORIES",
		"description": "設定 Android 屬性，以指定要在其中搜尋 .so 程式庫的目錄。"
	},
	"ANDROID_PROCESS_MAX": {
		"name": "ANDROID_PROCESS_MAX",
		"description": "設定 Android 屬性，以定義平行 Android NDK 編譯器處理序的最大數目 (例如 4)。若在目標建立時已設定 CMAKE_ANDROID_PROCESS_MAX 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_PROGUARD": {
		"name": "ANDROID_PROGUARD",
		"description": "當此屬性設為 true 時，可讓 ProGuard 工具移除未使用的程式碼，並以語意模糊的名稱為類別、欄位及方法重新命名，藉此壓縮、最佳化及混淆程式碼。若在目標建立時已設定 CMAKE_ANDROID_PROGUARD 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_PROGUARD_CONFIG_PATH": {
		"name": "ANDROID_PROGUARD_CONFIG_PATH",
		"description": "設定 Android 屬性，以指定 ProGuard 組態檔的位置。保留空白則會使用預設位置。這是包含 ProGuard 組態檔路徑的字串值屬性。若在目標建立時已設定 CMAKE_ANDROID_PROGUARD_CONFIG_PATH 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_SECURE_PROPS_PATH": {
		"name": "ANDROID_SECURE_PROPS_PATH",
		"description": "設定 Android 屬性，以指出安全屬性檔案的位置。這是包含檔案路徑的字串屬性。若在目標建立時已設定 CMAKE_ANDROID_SECURE_PROPS_PATH 變數的值，就會用來將這個屬性初始化。"
	},
	"ANDROID_SKIP_ANT_STEP": {
		"name": "ANDROID_SKIP_ANT_STEP",
		"description": "設定 Android 屬性，以定義是否要跳過 Ant 建置步驟。若在目標建立時已設定 CMAKE_ANDROID_SKIP_ANT_STEP 變數的值，就會用來將這個布林值屬性初始化。"
	},
	"ANDROID_STL_TYPE": {
		"name": "ANDROID_STL_TYPE",
		"description": "在使用 NVIDIA Nsight Tegra Visual Studio Edition 進行 Android 的跨平台編譯時，這個屬性會指定專案的 STL 支援類型。這是字串屬性，可以設為下列其中一個值:"
	},
	"ARCHIVE_OUTPUT_DIRECTORY": {
		"name": "ARCHIVE_OUTPUT_DIRECTORY",
		"description": "要將 XXX 目標檔案建置在內的輸出目錄。"
	},
	"ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "ARCHIVE 目標檔案的每個組態輸出目錄。"
	},
	"ARCHIVE_OUTPUT_NAME": {
		"name": "ARCHIVE_OUTPUT_NAME",
		"description": "XXX 目標檔案的輸出名稱。"
	},
	"ARCHIVE_OUTPUT_NAME_<CONFIG>": {
		"name": "ARCHIVE_OUTPUT_NAME_<CONFIG>",
		"description": "ARCHIVE 目標檔案的每個組態輸出名稱。"
	},
	"AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": {
		"name": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG",
		"description": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG 是布林值屬性，可在目標上設定，以針對多重設定產生器擁有更好的相依性圖表。啟用此屬性時，CMake 會產生更多每一設定目標。因此，相依性圖表對於多重設定產生器會更準確，且將可避免某些重新編譯。"
	},
	"AUTOGEN_BUILD_DIR": {
		"name": "AUTOGEN_BUILD_DIR",
		"description": "AUTOMOC、AUTOUIC 和 AUTORCC 針對目標產生檔案的所在目錄。"
	},
	"AUTOGEN_COMMAND_LINE_LENGTH_MAX": {
		"name": "AUTOGEN_COMMAND_LINE_LENGTH_MAX",
		"description": "用於會觸發在 Windows 上使用回應檔案，而不是將所有引數傳遞至命令列的 autogen 目標 (即 moc 或 uic) 的命令列長度限制。"
	},
	"AUTOGEN_ORIGIN_DEPENDS": {
		"name": "AUTOGEN_ORIGIN_DEPENDS",
		"description": "用於將來源目標相依性轉送至對應的 <ORIGIN>_autogen 目標的參數。"
	},
	"AUTOGEN_PARALLEL": {
		"name": "AUTOGEN_PARALLEL",
		"description": "使用 AUTOMOC 和 AUTOUIC 時要啟動的平行 moc 或 uic 處理序數目。"
	},
	"AUTOGEN_TARGET_DEPENDS": {
		"name": "AUTOGEN_TARGET_DEPENDS",
		"description": "對應 <ORIGIN>_autogen 目標的其他目標相依性。"
	},
	"AUTOGEN_USE_SYSTEM_INCLUDE": {
		"name": "AUTOGEN_USE_SYSTEM_INCLUDE",
		"description": "AUTOGEN_USE_SYSTEM_INCLUDE 是一個布林值屬性，可在目標上設定，以指出 autogen 目標包括目錄應該新增為目標的系統包括目錄或一般包括目錄。"
	},
	"AUTOMOC": {
		"name": "AUTOMOC",
		"description": "是否應使用 auto-moc 處理目標 (適用於 Qt 專案)。"
	},
	"AUTOMOC_COMPILER_PREDEFINES": {
		"name": "AUTOMOC_COMPILER_PREDEFINES",
		"description": "AUTOMOC 所使用的布林值，用來決定是否應產生編譯器預先定義檔案 moc_predefs.h。"
	},
	"AUTOMOC_DEPEND_FILTERS": {
		"name": "AUTOMOC_DEPEND_FILTERS",
		"description": "AUTOMOC 所使用的篩選定義，用來從來源檔案擷取註冊為該來源檔案 moc 檔之其他相依性的檔案名稱。"
	},
	"AUTOMOC_EXECUTABLE": {
		"name": "AUTOMOC_EXECUTABLE",
		"description": "AUTOMOC_EXECUTABLE 是檔案路徑，其指向用於已啟用 AUTOMOC 之檔案的 MOC 可執行檔。設定此屬性會讓 CMake 略過自動偵測 MOC 二進位檔，以及通常為確保二進位檔可供使用且如預期般運作所執行的例行性測試。"
	},
	"AUTOMOC_MACRO_NAMES": {
		"name": "AUTOMOC_MACRO_NAMES",
		"description": "AUTOMOC 用來判斷 C++ 檔案是否需要由 MOC 處理的巨集名稱以分號分隔的清單。"
	},
	"AUTOMOC_MOC_OPTIONS": {
		"name": "AUTOMOC_MOC_OPTIONS",
		"description": "使用 AUTOMOC 時 moc 的其他選項"
	},
	"AUTOMOC_PATH_PREFIX": {
		"name": "AUTOMOC_PATH_PREFIX",
		"description": "當此屬性為 ON 時，CMake 會在啟用 AUTOMOC 的 Qt 目標上，為 moc 產生 -p 路徑前置詞選項。"
	},
	"AUTORCC": {
		"name": "AUTORCC",
		"description": "是否應使用 auto-rcc 處理目標 (適用於 Qt 專案)。"
	},
	"AUTORCC_EXECUTABLE": {
		"name": "AUTORCC_EXECUTABLE",
		"description": "AUTORCC_EXECUTABLE 是檔案路徑，其指向用於已啟用 AUTORCC 之檔案的 rcc 可執行檔。設定此屬性會讓 CMake 略過自動偵測 rcc 二進位檔，以及通常為確保二進位檔可供使用且如預期般運作所執行的例行性測試。"
	},
	"AUTOUIC": {
		"name": "AUTOUIC",
		"description": "是否應使用 auto-uic 處理目標 (適用於 Qt 專案)。"
	},
	"AUTOUIC_EXECUTABLE": {
		"name": "AUTOUIC_EXECUTABLE",
		"description": "AUTOUIC_EXECUTABLE 是檔案路徑，其指向用於已啟用 AUTOUIC 之檔案的 uic 可執行檔。設定此屬性會讓 CMake 略過自動偵測 uic 二進位檔，以及通常為確保二進位檔可供使用且如預期般運作所執行的例行性測試。"
	},
	"AUTOUIC_SEARCH_PATHS": {
		"name": "AUTOUIC_SEARCH_PATHS",
		"description": "AUTOUIC 用來尋找內含之 .ui 檔案的搜尋路徑清單。"
	},
	"BUILD_RPATH": {
		"name": "BUILD_RPATH",
		"description": "以分號分隔的清單，指定執行階段路徑 (RPATH) 項目，以新增到組建樹狀結構 (適用於支援它的平台) 中連結的二進位檔案。根據預設，CMake 會設定組建樹狀結構中二進位檔案的執行階段路徑，以包含尋找連結的共用程式庫所需的搜尋路徑。專案可以設定 BUILD_RPATH 以指定其他搜尋路徑。"
	},
	"BUILD_RPATH_USE_ORIGIN": {
		"name": "BUILD_RPATH_USE_ORIGIN",
		"description": "是否要為組建 RPATH 使用相對路徑。"
	},
	"BUILD_WITH_INSTALL_NAME_DIR": {
		"name": "BUILD_WITH_INSTALL_NAME_DIR",
		"description": "BUILD_WITH_INSTALL_NAME_DIR 是布林值，指定建置樹狀結構中目標的 macOS install_name 是否使用 INSTALL_NAME_DIR 所指定的目錄。此設定僅適用於 macOS 上的目標。"
	},
	"BUILD_WITH_INSTALL_RPATH": {
		"name": "BUILD_WITH_INSTALL_RPATH",
		"description": "BUILD_WITH_INSTALL_RPATH 是布林值，指定是否要將建置樹狀結構中的目標與 INSTALL_RPATH 連結。這會優先於 SKIP_BUILD_RPATH，並可避免在安裝前重新連結的需求。"
	},
	"BUNDLE": {
		"name": "BUNDLE",
		"description": "此目標在 macOS 上是 CFBundle。"
	},
	"BUNDLE_EXTENSION": {
		"name": "BUNDLE_EXTENSION",
		"description": "用來為 macOS 及 iOS 上的 BUNDLE、FRAMEWORK 或 MACOSX_BUNDLE 目標命名的副檔名。"
	},
	"COMMON_LANGUAGE_RUNTIME": {
		"name": "COMMON_LANGUAGE_RUNTIME",
		"description": "設定此目標屬性，可將目標設定成使用 C++/CLI 支援建置。"
	},
	"COMPATIBLE_INTERFACE_BOOL": {
		"name": "COMPATIBLE_INTERFACE_BOOL",
		"description": "必須與其連結介面相容的屬性"
	},
	"COMPATIBLE_INTERFACE_NUMBER_MAX": {
		"name": "COMPATIBLE_INTERFACE_NUMBER_MAX",
		"description": "要使用其來自連結介面之最大值的屬性。"
	},
	"COMPATIBLE_INTERFACE_NUMBER_MIN": {
		"name": "COMPATIBLE_INTERFACE_NUMBER_MIN",
		"description": "要使用其來自連結介面之最小值的屬性。"
	},
	"COMPATIBLE_INTERFACE_STRING": {
		"name": "COMPATIBLE_INTERFACE_STRING",
		"description": "必須與其連結介面字串相容的屬性"
	},
	"COMPILE_FEATURES": {
		"name": "COMPILE_FEATURES",
		"description": "為此目標啟用的編譯器功能。"
	},
	"COMPILE_PDB_NAME": {
		"name": "COMPILE_PDB_NAME",
		"description": "建置來源檔案時，編譯器產生之 MS 偵錯符號 .pdb 檔案的輸出名稱。"
	},
	"COMPILE_PDB_NAME_<CONFIG>": {
		"name": "COMPILE_PDB_NAME_<CONFIG>",
		"description": "建置來源檔案時，編譯器產生之 MS 偵錯符號 .pdb 檔案的每個組態輸出名稱。"
	},
	"COMPILE_PDB_OUTPUT_DIRECTORY": {
		"name": "COMPILE_PDB_OUTPUT_DIRECTORY",
		"description": "建置來源檔案時，編譯器產生之 MS 偵錯符號 .pdb 檔案的輸出目錄。"
	},
	"COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "建置來源檔案時，編譯器產生之 MS 偵錯符號 .pdb 檔案的每個組態輸出目錄。"
	},
	"COMPILE_WARNING_AS_ERROR": {
		"name": "COMPILE_WARNING_AS_ERROR",
		"description": "指定是否將編譯的警告視為錯誤。如果啟用，請新增旗標以將在編譯時出現的警告視為錯誤。若在 CMake 命令列上提供 Cmake --compile-no-warning-as-error 選項，則會忽略此屬性。"
	},
	"<CONFIG>_OUTPUT_NAME": {
		"name": "<CONFIG>_OUTPUT_NAME",
		"description": "舊版每個組態目標檔案基底名稱。請改用 OUTPUT_NAME_。"
	},
	"<CONFIG>_POSTFIX": {
		"name": "<CONFIG>_POSTFIX",
		"description": "要附加至組態 <CONFIG> 之目標檔案名稱的後置。"
	},
	"CROSSCOMPILING_EMULATOR": {
		"name": "CROSSCOMPILING_EMULATOR",
		"description": "使用提供的模擬器，執行在跨平台編譯時建立的可執行檔。對於建置的目標系統可執行檔，此命令會以前置詞形式新增到 add_test、add_custom_command 及 add_custom_target 命令。"
	},
	"CUDA_ARCHITECTURES": {
		"name": "CUDA_ARCHITECTURES",
		"description": "要為其產生裝置程式碼的架構清單。"
	},
	"CUDA_CUBIN_COMPILATION": {
		"name": "CUDA_CUBIN_COMPILATION",
		"description": "將 CUDA 來源編譯為 .cubin 檔案，而非物件程式庫內的 .obj 檔案。"
	},
	"CUDA_EXTENSIONS": {
		"name": "CUDA_EXTENSIONS",
		"description": "布林值，指定是否要求編譯器專屬延伸模組。"
	},
	"CUDA_FATBIN_COMPILATION": {
		"name": "CUDA_FATBIN_COMPILATION",
		"description": "將 CUDA 來源編譯為 .fatbin 檔案，而非物件程式庫內的 .obj 檔案。"
	},
	"CUDA_OPTIX_COMPILATION": {
		"name": "CUDA_OPTIX_COMPILATION",
		"description": "將 CUDA 來源編譯為 .optixir 檔案，而非物件程式庫內的 .obj 檔案。"
	},
	"CUDA_PTX_COMPILATION": {
		"name": "CUDA_PTX_COMPILATION",
		"description": "將 CUDA 來源編譯為 .ptx 檔案，而非物件程式庫內的 .obj 檔案。"
	},
	"CUDA_RESOLVE_DEVICE_SYMBOLS": {
		"name": "CUDA_RESOLVE_DEVICE_SYMBOLS",
		"description": "僅限 CUDA: 請視需要，啟用特定程式庫目標的裝置連結。"
	},
	"CUDA_RUNTIME_LIBRARY": {
		"name": "CUDA_RUNTIME_LIBRARY",
		"description": "選取以 CUDA 語言為目標的編譯器所使用的 CUDA 執行階段程式庫。"
	},
	"CUDA_SEPARABLE_COMPILATION": {
		"name": "CUDA_SEPARABLE_COMPILATION",
		"description": "僅限 CUDA: 啟用裝置程式碼的分隔編譯"
	},
	"CUDA_STANDARD": {
		"name": "CUDA_STANDARD",
		"description": "其功能必須用來建立此目標的 CUDA/C++ 標準。"
	},
	"CUDA_STANDARD_REQUIRED": {
		"name": "CUDA_STANDARD_REQUIRED",
		"description": "布林值，描述是否須有 CUDA_STANDARD 的值。"
	},
	"CXX_EXTENSIONS": {
		"name": "CXX_EXTENSIONS",
		"description": "布林值，指定是否要求編譯器專屬延伸模組。"
	},
	"CXX_MODULE_DIRS": {
		"name": "CXX_MODULE_DIRS",
		"description": "目標的預設 C++ 模組集 (例如具有名稱和類型 CXX_MODULES 的檔案集) 的基本目錄清單 (以分號分隔)。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"CXX_MODULE_DIRS_<NAME>": {
		"name": "CXX_MODULE_DIRS_<NAME>",
		"description": "目標的 <NAME> C++ 模組集的基本目錄清單 (以分號分隔)，其中包含集合類型 CXX_MODULES。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"CXX_MODULE_SET": {
		"name": "CXX_MODULE_SET",
		"description": "目標的預設 C++ 模組集 (例如具有名稱和類型 HEADERS 的檔案集) 的檔案清單 (以分號分隔)，其中包含集合類型 CXX_MODULES。如果有任何相對路徑，則會相對於目標的來源目錄進行計算。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"CXX_MODULE_SETS": {
		"name": "CXX_MODULE_SETS",
		"description": "目標 PRIVATE 與 PUBLIC C++ 模組集 (例如，所有具有類型 CXX_MODULES 的檔案集) 的唯讀清單。這些檔案集中列出的檔案會被視為來源檔案，以進行 IDE 整合。"
	},
	"CXX_MODULE_SET_<NAME>": {
		"name": "CXX_MODULE_SET_<NAME>",
		"description": "目標的 <NAME> C++ 模組集的檔案清單 (以分號分隔)，其中包含集合類型 CXX_MODULES。如果有任何相對路徑，則會相對於目標的來源目錄進行計算。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"CXX_MODULE_STD": {
		"name": "CXX_MODULE_STD",
		"description": "CXX_MODULE_STD 是布林值，可指定目標是否可以使用匯入 std; C++ 來源。"
	},
	"CXX_STANDARD": {
		"name": "CXX_STANDARD",
		"description": "其功能必須用來建立此目標的 C++ 標準。"
	},
	"CXX_STANDARD_REQUIRED": {
		"name": "CXX_STANDARD_REQUIRED",
		"description": "布林值，描述是否須有 CXX_STANDARD 的值。"
	},
	"C_EXTENSIONS": {
		"name": "C_EXTENSIONS",
		"description": "布林值，指定是否要求編譯器專屬延伸模組。"
	},
	"C_STANDARD": {
		"name": "C_STANDARD",
		"description": "其功能必須用來建立此目標的 C 標準。"
	},
	"C_STANDARD_REQUIRED": {
		"name": "C_STANDARD_REQUIRED",
		"description": "布林值，描述是否須有 C_STANDARD 的值。"
	},
	"DEBUG_POSTFIX": {
		"name": "DEBUG_POSTFIX",
		"description": "請參閱目標屬性 <CONFIG>_POSTFIX。"
	},
	"DEFINE_SYMBOL": {
		"name": "DEFINE_SYMBOL",
		"description": "在編譯此目標來源時定義符號。"
	},
	"DEPLOYMENT_ADDITIONAL_FILES": {
		"name": "DEPLOYMENT_ADDITIONAL_FILES",
		"description": "在 Visual Studio 產生器所產生的 .vcproj 檔案中，設定 DeploymentTool 中的 WinCE 專案 AdditionalFiles。當您想要在遠端 WinCE 裝置進行偵錯時，這很實用。請指定要複製到裝置的其他檔案。例如:"
	},
	"DEPLOYMENT_REMOTE_DIRECTORY": {
		"name": "DEPLOYMENT_REMOTE_DIRECTORY",
		"description": "在 Visual Studio 產生器所產生的 .vcproj 檔案中，設定 DeploymentTool 中的 WinCE 專案 RemoteDirectory 及 DebuggerTool 中的 RemoteExecutable。當您想要在遠端 WinCE 裝置進行偵錯時，這很實用。例如:"
	},
	"DEPRECATION": {
		"name": "DEPRECATION",
		"description": "來自匯入目標開發人員的取代訊息。"
	},
	"DISABLE_PRECOMPILE_HEADERS": {
		"name": "DISABLE_PRECOMPILE_HEADERS",
		"description": "停用 PRECOMPILE_HEADERS 屬性所指定標頭檔的先行編譯。"
	},
	"DLL_NAME_WITH_SOVERSION": {
		"name": "DLL_NAME_WITH_SOVERSION",
		"description": "此屬性會控制是否將 SOVERSION 目標屬性新增至針對 Windows 平台產生的 DLL 檔案名稱的檔案名稱中，其會在設定 WIN32 變數時選取。"
	},
	"DOTNET_SDK": {
		"name": "DOTNET_SDK",
		"description": "指定 C# 專案的 .NET SDK。例如: Microsoft.NET.Sdk。"
	},
	"DOTNET_TARGET_FRAMEWORK": {
		"name": "DOTNET_TARGET_FRAMEWORK",
		"description": "指定 .NET 目標 Framework。"
	},
	"DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": "指定 .NET 目標 Framework 版本。"
	},
	"EchoString": {
		"name": "EchoString",
		"description": "建置目標時要顯示的訊息。"
	},
	"ENABLE_EXPORTS": {
		"name": "ENABLE_EXPORTS",
		"description": "指定可執行檔或共用程式庫是否匯出符號。"
	},
	"EXCLUDE_FROM_DEFAULT_BUILD": {
		"name": "EXCLUDE_FROM_DEFAULT_BUILD",
		"description": "從建置方案排除目標。"
	},
	"EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>": {
		"name": "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>",
		"description": "從建置方案排除目標的各組態版本。"
	},
	"EXPORT_COMPILE_COMMANDS": {
		"name": "EXPORT_COMPILE_COMMANDS",
		"description": "啟用/停用目標產生期間編譯命令的輸出。"
	},
	"EXPORT_FIND_PACKAGE_NAME": {
		"name": "EXPORT_FIND_PACKAGE_NAME",
		"description": "在安裝或匯出中匯出 find_dependency 呼叫時，控制與相依性目標相關聯的套件名稱。這可用來將套件名稱指派給 CMake 所建置和匯出的套件，或是在建立目標的 find_package 呼叫中覆寫套件。"
	},
	"EXPORT_NAME": {
		"name": "EXPORT_NAME",
		"description": "目標檔案的匯出名稱。"
	},
	"EXPORT_NO_SYSTEM": {
		"name": "EXPORT_NO_SYSTEM",
		"description": "此屬性會分別在安裝或匯出目標時影響安裝和匯出命令的行為。當 EXPORT_NO_SYSTEM 設為 true 時，這些命令會產生已匯入的目標，且其中 SYSTEM 屬性會設為 false。"
	},
	"EXPORT_PROPERTIES": {
		"name": "EXPORT_PROPERTIES",
		"description": "列出針對目標要匯出的其他屬性。"
	},
	"FOLDER": {
		"name": "FOLDER",
		"description": "對於使用資料夾階層呈現目標的 IDE，此屬性會指定要放置目標的資料夾名稱。若要設定資料夾巢狀，請使用 FOLDER 值，例如 GUI/對話方塊及 / 字元來分隔資料夾層級。沒有 FOLDER 屬性的目標會顯示為最上層實體。具有相同 FOLDER 屬性值的目標，將會顯示在與同層級相同的資料夾中。"
	},
	"Fortran_BUILDING_INSTRINSIC_MODULES": {
		"name": "Fortran_BUILDING_INSTRINSIC_MODULES",
		"description": "指示 CMake Fortran 前置處理器，目標正在建置 Fortran 內建以建置 Fortran 編譯器。"
	},
	"Fortran_MODULE_DIRECTORY": {
		"name": "Fortran_MODULE_DIRECTORY",
		"description": "請指定目標所提供的 Fortran 模組輸出目錄。"
	},
	"FRAMEWORK": {
		"name": "FRAMEWORK",
		"description": "在 macOS 和 iOS 上將 SHARED 或 STATIC 程式庫建置為架構套件組合。"
	},
	"FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>": {
		"name": "FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
		"description": "使用多重組態產生器 (例如 Xcode 和 Ninja 多重組態) 時，附加至組態 <CONFIG> 架構檔案名稱的後置詞。"
	},
	"FRAMEWORK_VERSION": {
		"name": "FRAMEWORK_VERSION",
		"description": "使用 FRAMEWORK 目標屬性 (例如 A) 所建立的架構版本。"
	},
	"GENERATOR_FILE_NAME": {
		"name": "GENERATOR_FILE_NAME",
		"description": "此目標的產生器檔案。"
	},
	"GHS_INTEGRITY_APP": {
		"name": "GHS_INTEGRITY_APP",
		"description": "ON/OFF 布林值，其判斷是否應將可執行檔目標視為完整性應用程式。"
	},
	"GHS_NO_SOURCE_GROUP_FILE": {
		"name": "GHS_NO_SOURCE_GROUP_FILE",
		"description": "ON/OFF 布林值，其控制目標的專案檔應為單一一個檔案或是多個檔案。"
	},
	"GNUtoMS": {
		"name": "GNUtoMS",
		"description": "將 GNU 匯入程式庫 (.dll.a) 轉換為 MS 格式 (.lib)。"
	},
	"HAS_CXX": {
		"name": "HAS_CXX",
		"description": "使用 C++ 連結器工具連結目標 (已淘汰)。"
	},
	"HEADER_DIRS": {
		"name": "HEADER_DIRS",
		"description": "目標的預設標頭集 (例如具有名稱和類型 HEADERS 的檔案集) 的基本目錄清單 (以分號分隔)。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"HEADER_DIRS_<NAME>": {
		"name": "HEADER_DIRS_<NAME>",
		"description": "目標的 <NAME> 標頭集的基本目錄清單 (以分號分隔)，其中包含集合類型 HEADERS。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"HEADER_SET": {
		"name": "HEADER_SET",
		"description": "目標的預設標頭集 (例如具有名稱和類型 HEADERS 的檔案集) 的檔案清單 (以分號分隔)，其中包含集合類型 HEADERS。如果有任何相對路徑，則會相對於目標的來源目錄進行計算。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"HEADER_SETS": {
		"name": "HEADER_SETS",
		"description": "目標 PRIVATE 與 PUBLIC 標頭集 (例如，所有具有類型 HEADERS 的檔案集) 的唯讀清單。這些檔案集中列出的檔案會被視為來源檔案，以進行 IDE 整合。檔案的 HEADER_FILE_ONLY 屬性也會設定為 TRUE。"
	},
	"HEADER_SET_<NAME>": {
		"name": "HEADER_SET_<NAME>",
		"description": "目標的 <NAME> 標頭集的檔案清單 (以分號分隔)，其中包含集合類型 HEADERS。如果有任何相對路徑，則會相對於目標的來源目錄進行計算。屬性支援產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"HIP_ARCHITECTURES": {
		"name": "HIP_ARCHITECTURES",
		"description": "要為其產生裝置代碼的 GPU 結構清單。結構名稱會根據 CMAKE_HIP_PLATFORM 解譯。"
	},
	"HIP_EXTENSIONS": {
		"name": "HIP_EXTENSIONS",
		"description": "布林值，指定是否要求編譯器專屬延伸模組。"
	},
	"HIP_STANDARD": {
		"name": "HIP_STANDARD",
		"description": "HIP/C++ 標準已要求建置此目標。"
	},
	"HIP_STANDARD_REQUIRED": {
		"name": "HIP_STANDARD_REQUIRED",
		"description": "布林值，描述是否須有 HIP_STANDARD 的值。"
	},
	"IMPORTED": {
		"name": "IMPORTED",
		"description": "指出目標是否為 IMPORTED 的唯讀指示。"
	},
	"IMPORTED_COMMON_LANGUAGE_RUNTIME": {
		"name": "IMPORTED_COMMON_LANGUAGE_RUNTIME",
		"description": "定義目標是否使用 C++/CLI 的屬性。"
	},
	"IMPORTED_CONFIGURATIONS": {
		"name": "IMPORTED_CONFIGURATIONS",
		"description": "為已匯入目標提供的設定。"
	},
	"IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS",
		"description": "編譯 IMPORTED 目標的 C++ 模組來源的前置處理器定義。"
	},
	"IMPORTED_CXX_MODULES_COMPILE_FEATURES": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_FEATURES",
		"description": "已為此 IMPORTED 目標的 C++ 模組啟用編譯器功能。"
	},
	"IMPORTED_CXX_MODULES_COMPILE_OPTIONS": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_OPTIONS",
		"description": "要傳遞到此 IMPORTED 目標的 C++ 模組編譯器的選項清單。"
	},
	"IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES": {
		"name": "IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES",
		"description": "編譯 IMPORTED 目標的 C++ 模組時，前置處理器包括檔案搜尋目錄的清單。"
	},
	"IMPORTED_CXX_MODULES_LINK_LIBRARIES": {
		"name": "IMPORTED_CXX_MODULES_LINK_LIBRARIES",
		"description": "用於目標的 C++ 模組中 C++ 模組使用需求的直接相依性清單。"
	},
	"IMPORTED_GLOBAL": {
		"name": "IMPORTED_GLOBAL",
		"description": "指出 IMPORTED 目標是否可全域顯示。"
	},
	"IMPORTED_IMPLIB": {
		"name": "IMPORTED_IMPLIB",
		"description": "IMPORTED 目標之匯入程式庫的完整路徑。"
	},
	"IMPORTED_IMPLIB_<CONFIG>": {
		"name": "IMPORTED_IMPLIB_<CONFIG>",
		"description": "IMPORTED_IMPLIB 屬性的 <CONFIG> 專用版本。"
	},
	"IMPORTED_LIBNAME": {
		"name": "IMPORTED_LIBNAME",
		"description": "請為匯入的介面程式庫指定連結程式庫名稱。"
	},
	"IMPORTED_LIBNAME_<CONFIG>": {
		"name": "IMPORTED_LIBNAME_<CONFIG>",
		"description": "IMPORTED_LIBNAME 屬性的 <CONFIG> 專用版本。"
	},
	"IMPORTED_LINK_DEPENDENT_LIBRARIES": {
		"name": "IMPORTED_LINK_DEPENDENT_LIBRARIES",
		"description": "已匯入共用程式庫的相依共用程式庫。"
	},
	"IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>": {
		"name": "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>",
		"description": "IMPORTED_LINK_DEPENDENT_LIBRARIES 的 <CONFIG> 專用版本。"
	},
	"IMPORTED_LINK_INTERFACE_LANGUAGES": {
		"name": "IMPORTED_LINK_INTERFACE_LANGUAGES",
		"description": "編譯成 IMPORTED 靜態程式庫的語言。"
	},
	"IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>",
		"description": "IMPORTED_LINK_INTERFACE_LANGUAGES 的 <CONFIG> 專用版本。"
	},
	"IMPORTED_LINK_INTERFACE_LIBRARIES": {
		"name": "IMPORTED_LINK_INTERFACE_LIBRARIES",
		"description": "IMPORTED 目標的轉移連結介面。"
	},
	"IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>",
		"description": "IMPORTED_LINK_INTERFACE_LIBRARIES 的 <CONFIG> 專用版本。"
	},
	"IMPORTED_LINK_INTERFACE_MULTIPLICITY": {
		"name": "IMPORTED_LINK_INTERFACE_MULTIPLICITY",
		"description": "IMPORTED 靜態程式庫循環的重複計數。"
	},
	"IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
		"description": "IMPORTED_LINK_INTERFACE_MULTIPLICITY 的 <CONFIG> 專用版本。"
	},
	"IMPORTED_LOCATION": {
		"name": "IMPORTED_LOCATION",
		"description": "IMPORTED 目標在磁碟上的主要檔案完整路徑。"
	},
	"IMPORTED_LOCATION_<CONFIG>": {
		"name": "IMPORTED_LOCATION_<CONFIG>",
		"description": "IMPORTED_LOCATION 屬性的 <CONFIG> 專用版本。"
	},
	"IMPORTED_NO_SONAME": {
		"name": "IMPORTED_NO_SONAME",
		"description": "指定 IMPORTED 共用程式庫目標沒有 soname。"
	},
	"IMPORTED_NO_SONAME_<CONFIG>": {
		"name": "IMPORTED_NO_SONAME_<CONFIG>",
		"description": "IMPORTED_NO_SONAME 屬性的 <CONFIG> 專用版本。"
	},
	"IMPORTED_NO_SYSTEM": {
		"name": "IMPORTED_NO_SYSTEM",
		"description": "在匯入的目標上將 IMPORTED_NO_SYSTEM 設為 true，會將其指定為非系統目標。這會產生以下效果:"
	},
	"IMPORTED_OBJECTS": {
		"name": "IMPORTED_OBJECTS",
		"description": "所匯入物件程式庫磁碟上目的檔絕對路徑的清單 (以分號分隔)。"
	},
	"IMPORTED_OBJECTS_<CONFIG>": {
		"name": "IMPORTED_OBJECTS_<CONFIG>",
		"description": "IMPORTED_OBJECTS 屬性的 <CONFIG> 專用版本。"
	},
	"IMPORTED_SONAME": {
		"name": "IMPORTED_SONAME",
		"description": "共用程式庫類型 IMPORTED 目標的 soname。"
	},
	"IMPORTED_SONAME_<CONFIG>": {
		"name": "IMPORTED_SONAME_<CONFIG>",
		"description": "IMPORTED_SONAME 屬性的 <CONFIG> 專用版本。"
	},
	"IMPORT_PREFIX": {
		"name": "IMPORT_PREFIX",
		"description": "接在匯入程式庫名稱之前的內容。"
	},
	"IMPORT_SUFFIX": {
		"name": "IMPORT_SUFFIX",
		"description": "接在匯入程式庫名稱之後的內容。"
	},
	"INSTALL_NAME_DIR": {
		"name": "INSTALL_NAME_DIR",
		"description": "Apple 平臺上已安裝之目標的目錄名稱。"
	},
	"INSTALL_REMOVE_ENVIRONMENT_RPATH": {
		"name": "INSTALL_REMOVE_ENVIRONMENT_RPATH",
		"description": "控制是否應在安裝期間，移除工具鏈定義的 rpaths。"
	},
	"INSTALL_RPATH": {
		"name": "INSTALL_RPATH",
		"description": "要用於已安裝目標的 rpath。"
	},
	"INSTALL_RPATH_USE_LINK_PATH": {
		"name": "INSTALL_RPATH_USE_LINK_PATH",
		"description": "將路徑新增至連結器搜尋及已安裝的 rpath。"
	},
	"INTERFACE_AUTOMOC_MACRO_NAMES": {
		"name": "INTERFACE_AUTOMOC_MACRO_NAMES",
		"description": "要傳播給取用者的 AUTOMOC 巨集名稱以分號分隔的清單。"
	},
	"INTERFACE_AUTOUIC_OPTIONS": {
		"name": "INTERFACE_AUTOUIC_OPTIONS",
		"description": "要傳遞至 uic 的介面選項清單。"
	},
	"INTERFACE_COMPILE_DEFINITIONS": {
		"name": "INTERFACE_COMPILE_DEFINITIONS",
		"description": "程式庫的公用 property_name 需求清單。"
	},
	"INTERFACE_COMPILE_FEATURES": {
		"name": "INTERFACE_COMPILE_FEATURES",
		"description": "程式庫的公用 property_name 需求清單。"
	},
	"INTERFACE_COMPILE_OPTIONS": {
		"name": "INTERFACE_COMPILE_OPTIONS",
		"description": "程式庫的公用 property_name 需求清單。"
	},
	"INTERFACE_CXX_MODULE_SETS": {
		"name": "INTERFACE_CXX_MODULE_SETS",
		"description": "目標 INTERFACE 與 PUBLIC Ｃ++ 模組集 (例如，所有具有類型 CXX_MODULES 的檔案集) 的唯讀清單。這些 C++ 模組集中所列的檔案可隨安裝一起安裝，並隨安裝及匯出一起匯出。"
	},
	"INTERFACE_HEADER_SETS": {
		"name": "INTERFACE_HEADER_SETS",
		"description": "目標 INTERFACE 與 PUBLIC 標頭集 (例如，所有具有類型 HEADERS 的檔案集) 的唯讀清單。這些標頭集中所列的檔案可隨安裝一起安裝，並隨安裝及匯出一起匯出。"
	},
	"INTERFACE_HEADER_SETS_TO_VERIFY": {
		"name": "INTERFACE_HEADER_SETS_TO_VERIFY",
		"description": "用來指定應驗證目標的 PUBLIC 和 INTERFACE 標頭集。"
	},
	"INTERFACE_INCLUDE_DIRECTORIES": {
		"name": "INTERFACE_INCLUDE_DIRECTORIES",
		"description": "程式庫的公用 property_name 需求清單。"
	},
	"INTERFACE_LINK_DEPENDS": {
		"name": "INTERFACE_LINK_DEPENDS",
		"description": "目標二進位檔為了連結而相依的其他公用介面檔案。"
	},
	"INTERFACE_LINK_DIRECTORIES": {
		"name": "INTERFACE_LINK_DIRECTORIES",
		"description": "程式庫的公用 property_name 需求清單。"
	},
	"INTERFACE_LINK_LIBRARIES": {
		"name": "INTERFACE_LINK_LIBRARIES",
		"description": "列出程式庫的公用介面程式庫。"
	},
	"INTERFACE_LINK_LIBRARIES_DIRECT": {
		"name": "INTERFACE_LINK_LIBRARIES_DIRECT",
		"description": "此文件庫的取用者應視為直接連結相依性的文件庫清單。"
	},
	"INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE": {
		"name": "INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE",
		"description": "此文件庫的取用者不應視為直接連結相依性的文件庫清單。"
	},
	"INTERFACE_LINK_OPTIONS": {
		"name": "INTERFACE_LINK_OPTIONS",
		"description": "程式庫的公用 property_name 需求清單。"
	},
	"INTERFACE_POSITION_INDEPENDENT_CODE": {
		"name": "INTERFACE_POSITION_INDEPENDENT_CODE",
		"description": "取用者是否需要建立不受位置影響的目標"
	},
	"INTERFACE_PRECOMPILE_HEADERS": {
		"name": "INTERFACE_PRECOMPILE_HEADERS",
		"description": "要先行編譯成使用中目標的介面標頭檔清單。"
	},
	"INTERFACE_SOURCES": {
		"name": "INTERFACE_SOURCES",
		"description": "要編譯到取用目標的介面來源清單。"
	},
	"INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": {
		"name": "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES",
		"description": "程式庫之公用系統 include 目錄的清單。"
	},
	"IOS_INSTALL_COMBINED": {
		"name": "IOS_INSTALL_COMBINED",
		"description": "在安裝時建置合併 (裝置和模擬器) 目標。"
	},
	"ISPC_HEADER_DIRECTORY": {
		"name": "ISPC_HEADER_DIRECTORY",
		"description": "指定目標提供的 ISPC 標頭相對輸出目錄。"
	},
	"ISPC_HEADER_SUFFIX": {
		"name": "ISPC_HEADER_SUFFIX",
		"description": "指定要用於目標提供之 ISPC 所產生標頭的輸出尾碼。"
	},
	"ISPC_INSTRUCTION_SETS": {
		"name": "ISPC_INSTRUCTION_SETS",
		"description": "要為其產生程式碼的指示集架構清單。"
	},
	"JOB_POOL_COMPILE": {
		"name": "JOB_POOL_COMPILE",
		"description": "僅限 Ninja: 用來編譯的集區。"
	},
	"JOB_POOL_LINK": {
		"name": "JOB_POOL_LINK",
		"description": "僅限 Ninja: 用來連結的集區。"
	},
	"JOB_POOL_PRECOMPILE_HEADER": {
		"name": "JOB_POOL_PRECOMPILE_HEADER",
		"description": "僅限 Ninja: 用於產生先行編譯標頭的集區。"
	},
	"<LANG>_CLANG_TIDY": {
		"name": "<LANG>_CLANG_TIDY",
		"description": "只有在 <LANG> 為 C、CXX、OBJC 或 OBJCXX 時，才會實作此屬性。"
	},
	"<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR": {
		"name": "<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR",
		"description": "只有當 <LANG> 為 C、CXX、OBJC 或 OBJCXX 時，才會實作此屬性，而且只有在設定 <LANG>_CLANG_TIDY 時才會生效。"
	},
	"<LANG>_COMPILER_LAUNCHER": {
		"name": "<LANG>_COMPILER_LAUNCHER",
		"description": "只有在 <LANG> 為 C、CXX、Fortran、ISPC、OBJC、OBJCXX 或 CUDA 時，才會實作此屬性。"
	},
	"<LANG>_CPPCHECK": {
		"name": "<LANG>_CPPCHECK",
		"description": "只有在 <LANG> 是 C 或 CXX 時，才支援此屬性。"
	},
	"<LANG>_CPPLINT": {
		"name": "<LANG>_CPPLINT",
		"description": "只有在 <LANG> 是 C 或 CXX 時，才支援此屬性。"
	},
	"<LANG>_EXTENSIONS": {
		"name": "<LANG>_EXTENSIONS",
		"description": "變數為:"
	},
	"<LANG>_INCLUDE_WHAT_YOU_USE": {
		"name": "<LANG>_INCLUDE_WHAT_YOU_USE",
		"description": "只有在 <LANG> 是 C 或 CXX 時，才實作此屬性。"
	},
	"<LANG>_LINKER_LAUNCHER": {
		"name": "<LANG>_LINKER_LAUNCHER",
		"description": "只有在 <LANG> 為 C、CXX、OBJC 或 OBJCXX 時，才會實作此屬性。"
	},
	"<LANG>_STANDARD": {
		"name": "<LANG>_STANDARD",
		"description": "變數為:"
	},
	"<LANG>_STANDARD_REQUIRED": {
		"name": "<LANG>_STANDARD_REQUIRED",
		"description": "變數為:"
	},
	"<LANG>_VISIBILITY_PRESET": {
		"name": "<LANG>_VISIBILITY_PRESET",
		"description": "符號可見度編譯旗標的值"
	},
	"LIBRARY_OUTPUT_DIRECTORY": {
		"name": "LIBRARY_OUTPUT_DIRECTORY",
		"description": "要將 XXX 目標檔案建置在內的輸出目錄。"
	},
	"LIBRARY_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "LIBRARY 目標檔案的每個組態輸出目錄。"
	},
	"LIBRARY_OUTPUT_NAME": {
		"name": "LIBRARY_OUTPUT_NAME",
		"description": "XXX 目標檔案的輸出名稱。"
	},
	"LIBRARY_OUTPUT_NAME_<CONFIG>": {
		"name": "LIBRARY_OUTPUT_NAME_<CONFIG>",
		"description": "LIBRARY 目標檔案的每個組態輸出名稱。"
	},
	"LINKER_LANGUAGE": {
		"name": "LINKER_LANGUAGE",
		"description": "指定其編譯器將會叫用連結器的語言。"
	},
	"LINKER_TYPE": {
		"name": "LINKER_TYPE",
		"description": "指定將用於連結步驟的連結器。屬性值可以使用產生器運算式 <cmake-generator-expressions(7)>。"
	},
	"LINK_DEPENDS": {
		"name": "LINK_DEPENDS",
		"description": "目標二進位檔為了連結而相依的其他檔案。"
	},
	"LINK_DEPENDS_NO_SHARED": {
		"name": "LINK_DEPENDS_NO_SHARED",
		"description": "不要相依於連結的共用程式庫檔案。"
	},
	"LINK_FLAGS": {
		"name": "LINK_FLAGS",
		"description": "如果此目標是共用媒體櫃、模組程式庫或可執行檔，連結此目標時要使用的其他旗標。靜態程式庫需要使用 STATIC_LIBRARY_OPTIONS 或 STATIC_LIBRARY_FLAGS 屬性。"
	},
	"LINK_FLAGS_<CONFIG>": {
		"name": "LINK_FLAGS_<CONFIG>",
		"description": "共用程式庫、模組或可執行檔目標的各組態連結器旗標。"
	},
	"LINK_INTERFACE_LIBRARIES": {
		"name": "LINK_INTERFACE_LIBRARIES",
		"description": "列出共用程式庫或可執行檔的公用介面程式庫。"
	},
	"LINK_INTERFACE_LIBRARIES_<CONFIG>": {
		"name": "LINK_INTERFACE_LIBRARIES_<CONFIG>",
		"description": "目標之公用介面程式庫的每個組態清單。"
	},
	"LINK_INTERFACE_MULTIPLICITY": {
		"name": "LINK_INTERFACE_MULTIPLICITY",
		"description": "具有循環相依性之 STATIC 程式庫的重複計數。"
	},
	"LINK_INTERFACE_MULTIPLICITY_<CONFIG>": {
		"name": "LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
		"description": "STATIC 程式庫之循環的每個組態重複計數。"
	},
	"LINK_LIBRARIES": {
		"name": "LINK_LIBRARIES",
		"description": "直接連結相依性的清單。"
	},
	"LINK_LIBRARIES_ONLY_TARGETS": {
		"name": "LINK_LIBRARIES_ONLY_TARGETS",
		"description": "強制將可做為目標名稱的連結專案，實際上就是現有目標。"
	},
	"LINK_LIBRARY_OVERRIDE": {
		"name": "LINK_LIBRARY_OVERRIDE",
		"description": "覆寫與來自 LINK_LIBRARY 產生器運算式之程式庫相關聯的程式庫功能。這可以用來解決在不同 LINK_LIBRARY 產生器運算式中為相同程式庫指定不同功能所產生的不相容程式庫功能。"
	},
	"LINK_LIBRARY_OVERRIDE_<LIBRARY>": {
		"name": "LINK_LIBRARY_OVERRIDE_<LIBRARY>",
		"description": "覆寫與來自 LINK_LIBRARY 產生器運算式之 <LIBRARY> 相關聯的程式庫功能。這可以用來解決在不同 LINK_LIBRARY 產生器運算式中為 <LIBRARY> 指定不同功能所產生的不相容程式庫功能。"
	},
	"LINK_SEARCH_END_STATIC": {
		"name": "LINK_SEARCH_END_STATIC",
		"description": "結束連結線，如此便會使用靜態系統程式庫。"
	},
	"LINK_SEARCH_START_STATIC": {
		"name": "LINK_SEARCH_START_STATIC",
		"description": "假設連結器根據預設會尋找靜態程式庫。"
	},
	"LINK_WHAT_YOU_USE": {
		"name": "LINK_WHAT_YOU_USE",
		"description": "這個布林值選項在設為 TRUE 時，會自動在目標已連結後，在目標上執行變數 CMAKE_LINK_WHAT_YOU_USE_CHECK 的內容。此外，由變數 CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG 所指定的連結器旗標會透過連結命令傳遞到目標，因此所有在命令列上指定的程式庫都會連結到目標中。這會使連結產生一份程式庫清單，其中未提供此目標所使用的任何符號，但正在連結到目標。"
	},
	"LOCATION_<CONFIG>": {
		"name": "LOCATION_<CONFIG>",
		"description": "磁碟上提供目標位置的唯讀屬性。"
	},
	"MACHO_COMPATIBILITY_VERSION": {
		"name": "MACHO_COMPATIBILITY_VERSION",
		"description": "這個目標針對 Mach-O 二進位檔的相容性版本號碼為何。"
	},
	"MACHO_CURRENT_VERSION": {
		"name": "MACHO_CURRENT_VERSION",
		"description": "這個目標針對 Mach-O 二進位檔的目前版本號碼為何。"
	},
	"MACOSX_BUNDLE": {
		"name": "MACOSX_BUNDLE",
		"description": "在 macOS 或 iOS 上將可執行檔建置為應用程式套件組合。"
	},
	"MACOSX_BUNDLE_INFO_PLIST": {
		"name": "MACOSX_BUNDLE_INFO_PLIST",
		"description": "請指定 macOS 和 iOS 應用程式套件組合的自訂 Info.plist 範本。"
	},
	"MACOSX_FRAMEWORK_INFO_PLIST": {
		"name": "MACOSX_FRAMEWORK_INFO_PLIST",
		"description": "請指定 macOS 和 iOS 架構的自訂 Info.plist 範本。"
	},
	"MACOSX_RPATH": {
		"name": "MACOSX_RPATH",
		"description": "這個在 macOS 或 iOS 上的目標是否可使用 rpaths 在執行階段找到。"
	},
	"MANUALLY_ADDED_DEPENDENCIES": {
		"name": "MANUALLY_ADDED_DEPENDENCIES",
		"description": "取得手動新增到其他最上層目標的相依性。"
	},
	"MAP_IMPORTED_CONFIG_<CONFIG>": {
		"name": "MAP_IMPORTED_CONFIG_<CONFIG>",
		"description": "從專案組態對應到已匯入目標的組態。"
	},
	"MSVC_DEBUG_INFORMATION_FORMAT": {
		"name": "MSVC_DEBUG_INFORMATION_FORMAT",
		"description": "以 Visual C++ ABI 為目標時，選取偵錯資訊格式。"
	},
	"MSVC_RUNTIME_LIBRARY": {
		"name": "MSVC_RUNTIME_LIBRARY",
		"description": "選取以 MSVC ABI 為目標的編譯器所使用的 MSVC 執行階段程式庫。"
	},
	"NAME": {
		"name": "NAME",
		"description": "目標的的邏輯名稱。"
	},
	"NO_SONAME": {
		"name": "NO_SONAME",
		"description": "是否要在連結共用程式庫時設定 soname。"
	},
	"NO_SYSTEM_FROM_IMPORTED": {
		"name": "NO_SYSTEM_FROM_IMPORTED",
		"description": "不要將來自所取用已匯入目標之介面的 include 目錄視為系統目錄。"
	},
	"OBJCXX_EXTENSIONS": {
		"name": "OBJCXX_EXTENSIONS",
		"description": "布林值，指定是否要求編譯器專屬延伸模組。"
	},
	"OBJCXX_STANDARD": {
		"name": "OBJCXX_STANDARD",
		"description": "要求其功能要建置此目標的 ObjC++ 標準。"
	},
	"OBJCXX_STANDARD_REQUIRED": {
		"name": "OBJCXX_STANDARD_REQUIRED",
		"description": "布林值，描述是否需要有 OBJCXX_STANDARD 的值。"
	},
	"OBJC_EXTENSIONS": {
		"name": "OBJC_EXTENSIONS",
		"description": "布林值，指定是否要求編譯器專屬延伸模組。"
	},
	"OBJC_STANDARD": {
		"name": "OBJC_STANDARD",
		"description": "要求其功能要建置此目標的 OBJC 標準。"
	},
	"OBJC_STANDARD_REQUIRED": {
		"name": "OBJC_STANDARD_REQUIRED",
		"description": "布林值，描述是否需要有 OBJC_STANDARD 的值。"
	},
	"OPTIMIZE_DEPENDENCIES": {
		"name": "OPTIMIZE_DEPENDENCIES",
		"description": "啟用靜態和物件程式庫的相依性優化。"
	},
	"OSX_ARCHITECTURES": {
		"name": "OSX_ARCHITECTURES",
		"description": "macOS 的目標專屬架構。"
	},
	"OSX_ARCHITECTURES_<CONFIG>": {
		"name": "OSX_ARCHITECTURES_<CONFIG>",
		"description": "目標的每個組態 macOS 和 iOS 二進位架構。"
	},
	"OUTPUT_NAME": {
		"name": "OUTPUT_NAME",
		"description": "目標檔案的輸出名稱。"
	},
	"OUTPUT_NAME_<CONFIG>": {
		"name": "OUTPUT_NAME_<CONFIG>",
		"description": "每個組態目標檔案基底名稱。"
	},
	"PCH_INSTANTIATE_TEMPLATES": {
		"name": "PCH_INSTANTIATE_TEMPLATES",
		"description": "當此屬性設定為 true 時，先行編譯標頭檔編譯器選項會包含旗標，以在支援產生 PCH 時，在產生期間將範本具現化。這樣可顯著縮短編譯時間。Clang 的 11 版以上予以支援。"
	},
	"PCH_WARN_INVALID": {
		"name": "PCH_WARN_INVALID",
		"description": "當此屬性設定為 true 時，先行編譯標頭編譯器選項將包含編譯器旗標，應在 GNU 編譯器的先行編譯標頭 (例如 -Winvalid-pch) 無效時發出警告。"
	},
	"PDB_NAME": {
		"name": "PDB_NAME",
		"description": "針對可執行檔或共用程式庫目標，連結器產生之 MS 偵錯符號 .pdb 檔案的輸出名稱。"
	},
	"PDB_NAME_<CONFIG>": {
		"name": "PDB_NAME_<CONFIG>",
		"description": "針對可執行檔或共用程式庫目標，連結器產生之 MS 偵錯符號 .pdb 檔案的每個組態輸出名稱。"
	},
	"PDB_OUTPUT_DIRECTORY": {
		"name": "PDB_OUTPUT_DIRECTORY",
		"description": "針對可執行檔或共用程式庫目標，連結器產生之 MS 偵錯符號 .pdb 檔案的輸出目錄。"
	},
	"PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "針對可執行檔或共用程式庫目標，連結器產生之 MS 偵錯符號 .pdb 檔案的每個組態輸出目錄。"
	},
	"POSITION_INDEPENDENT_CODE": {
		"name": "POSITION_INDEPENDENT_CODE",
		"description": "是否要建立不受位置影響的目標"
	},
	"POST_INSTALL_SCRIPT": {
		"name": "POST_INSTALL_SCRIPT",
		"description": "已淘汰的安裝支援。"
	},
	"PRECOMPILE_HEADERS": {
		"name": "PRECOMPILE_HEADERS",
		"description": "要先行編譯的標頭檔清單。"
	},
	"PRECOMPILE_HEADERS_REUSE_FROM": {
		"name": "PRECOMPILE_HEADERS_REUSE_FROM",
		"description": "要重複使用其先行編譯標頭組建成品的目標。"
	},
	"PREFIX": {
		"name": "PREFIX",
		"description": "接在程式庫名稱之前的內容。"
	},
	"PRE_INSTALL_SCRIPT": {
		"name": "PRE_INSTALL_SCRIPT",
		"description": "已淘汰的安裝支援。"
	},
	"PRIVATE_HEADER": {
		"name": "PRIVATE_HEADER",
		"description": "請指定 FRAMEWORK 共用程式庫目標中的私用標頭檔。"
	},
	"PROJECT_LABEL": {
		"name": "PROJECT_LABEL",
		"description": "變更 IDE 中目標的名稱。"
	},
	"PUBLIC_HEADER": {
		"name": "PUBLIC_HEADER",
		"description": "請指定 FRAMEWORK 共用程式庫目標中的公用標頭檔。"
	},
	"RESOURCE": {
		"name": "RESOURCE",
		"description": "請指定 FRAMEWORK 或 BUNDLE 中的資源檔案。"
	},
	"RUNTIME_OUTPUT_DIRECTORY": {
		"name": "RUNTIME_OUTPUT_DIRECTORY",
		"description": "要將 XXX 目標檔案建置在內的輸出目錄。"
	},
	"RUNTIME_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "RUNTIME 目標檔案的每個組態輸出目錄。"
	},
	"RUNTIME_OUTPUT_NAME": {
		"name": "RUNTIME_OUTPUT_NAME",
		"description": "XXX 目標檔案的輸出名稱。"
	},
	"RUNTIME_OUTPUT_NAME_<CONFIG>": {
		"name": "RUNTIME_OUTPUT_NAME_<CONFIG>",
		"description": "RUNTIME 目標檔案的每個組態輸出名稱。"
	},
	"SKIP_BUILD_RPATH": {
		"name": "SKIP_BUILD_RPATH",
		"description": "rpaths 是否應用於組建樹狀結構。"
	},
	"SOURCES": {
		"name": "SOURCES",
		"description": "這會指定目標來源檔案的路徑清單。下列命令已全部設定或新增至 SOURCES 目標屬性，並且是操作它的平常方式:"
	},
	"SOVERSION": {
		"name": "SOVERSION",
		"description": "共用程式庫目標的 ABI 版本號碼。"
	},
	"STATIC_LIBRARY_FLAGS": {
		"name": "STATIC_LIBRARY_FLAGS",
		"description": "靜態程式庫目標的封存工具 (或 MSVC 管理員) 旗標。屬於共用程式庫、模組或可執行檔的目標必須使用 LINK_OPTIONS 或 LINK_FLAGS 目標屬性。"
	},
	"STATIC_LIBRARY_FLAGS_<CONFIG>": {
		"name": "STATIC_LIBRARY_FLAGS_<CONFIG>",
		"description": "靜態程式庫目標的每個組態封存工具 (或 MSVC 封存工具) 旗標。"
	},
	"STATIC_LIBRARY_OPTIONS": {
		"name": "STATIC_LIBRARY_OPTIONS",
		"description": "靜態程式庫目標的封存工具 (或 MSVC 封存工具) 旗標。屬於共用程式庫、模組或可執行檔的目標必須使用 LINK_OPTIONS 目標屬性。"
	},
	"SUFFIX": {
		"name": "SUFFIX",
		"description": "接在目標名稱之後的內容。"
	},
	"Swift_COMPILATION_MODE": {
		"name": "Swift_COMPILATION_MODE",
		"description": "指定 Swift 如何編譯目標。"
	},
	"Swift_LANGUAGE_VERSION": {
		"name": "Swift_LANGUAGE_VERSION",
		"description": "此屬性會設定目標中 Swift 來源的語言版本。若未指定，則預設為 CMAKE_Swift_LANGUAGE_VERSION (如有指定)，否則為編譯器支援的最新版本。"
	},
	"Swift_MODULE_DIRECTORY": {
		"name": "Swift_MODULE_DIRECTORY",
		"description": "指定目標所提供的 Swift 模組輸出目錄。"
	},
	"Swift_MODULE_NAME": {
		"name": "Swift_MODULE_NAME",
		"description": "此屬性會指定 Swift 模組的名稱。預設為目標的名稱。"
	},
	"TEST_LAUNCHER": {
		"name": "TEST_LAUNCHER",
		"description": "使用所提供的啟動器來執行可執行檔。此命令會新增作為用於建置目標系統可執行檔的 add_test 命令的前置詞，並用來在主機上執行。"
	},
	"TRANSITIVE_COMPILE_PROPERTIES": {
		"name": "TRANSITIVE_COMPILE_PROPERTIES",
		"description": "TARGET_PROPERTY 產生器運算式中的屬性，會在目標及其相依性上進行評估，結果為從連結相依性的轉移關閉中收集的值的聯集，這排除被 LINK_ONLY 保護的項目。"
	},
	"TRANSITIVE_LINK_PROPERTIES": {
		"name": "TRANSITIVE_LINK_PROPERTIES",
		"description": "TARGET_PROPERTY 產生器運算式中的屬性，會在目標及其相依性上進行評估，結果為從連結相依性的轉移關閉中收集的值的聯集，這包括被 LINK_ONLY 保護的項目。"
	},
	"UNITY_BUILD": {
		"name": "UNITY_BUILD",
		"description": "當此屬性設定為 true 時，目標來源檔案會合併成批次，以加快編譯速度。其做法是建立一組 unity 來源 (#include 原始來源)，然後編譯這些 unity 來源，而不是原始來源。這稱為 Unity 或 Jumbo 組建。"
	},
	"UNITY_BUILD_BATCH_SIZE": {
		"name": "UNITY_BUILD_BATCH_SIZE",
		"description": "指定當 UNITY_BUILD 目標屬性啟用 unity 組建時，可合併到任何一 unity 來源檔案中的來源檔案數目上限。原始來源檔案會視需要散發到多個 unity 來源檔案，以遵守此限制。"
	},
	"UNITY_BUILD_CODE_AFTER_INCLUDE": {
		"name": "UNITY_BUILD_CODE_AFTER_INCLUDE",
		"description": "UNITY_BUILD 功能在所產生的 Unity 來源檔案中，每個 #include 陳述式的後面，逐字包含的程式碼片段。例如:"
	},
	"UNITY_BUILD_CODE_BEFORE_INCLUDE": {
		"name": "UNITY_BUILD_CODE_BEFORE_INCLUDE",
		"description": "UNITY_BUILD 功能在所產生的 Unity 來源檔案中，每個 #include 陳述式的前面，逐字包含的程式碼片段。例如:"
	},
	"UNITY_BUILD_MODE": {
		"name": "UNITY_BUILD_MODE",
		"description": "CMake 提供不同的演算法可選取哪些來源已組合成一個貯體。選取範圍由此屬性決定，其具有下列可接受的值:"
	},
	"UNITY_BUILD_UNIQUE_ID": {
		"name": "UNITY_BUILD_UNIQUE_ID",
		"description": "在整合組建期間設定為唯一個別檔案值的有效 C 識別碼名稱。"
	},
	"VERIFY_INTERFACE_HEADER_SETS": {
		"name": "VERIFY_INTERFACE_HEADER_SETS",
		"description": "用來驗證目標的 PUBLIC 和 INTERFACE 標頭集中的所有標頭都可以自行包含。"
	},
	"VERSION": {
		"name": "VERSION",
		"description": "共用程式庫目標的版本號碼。"
	},
	"VISIBILITY_INLINES_HIDDEN": {
		"name": "VISIBILITY_INLINES_HIDDEN",
		"description": "是否要新增編譯旗標，以隱藏內嵌函式的符號"
	},
	"VS_CONFIGURATION_TYPE": {
		"name": "VS_CONFIGURATION_TYPE",
		"description": "Visual Studio 專案組態類型。"
	},
	"VS_DEBUGGER_COMMAND": {
		"name": "VS_DEBUGGER_COMMAND",
		"description": "設定 Visual Studio C++ 目標的本機偵錯工具命令。屬性值可以使用產生器運算式 <cmake-generator-expressions(7)>。這是在 Visual Studio 專案檔案的 <LocalDebuggerCommand> 中定義。如果在建立目標時設定，則此屬性會由變數 CMAKE_VS_DEBUGGER_COMMAND 的值初始化。"
	},
	"VS_DEBUGGER_COMMAND_ARGUMENTS": {
		"name": "VS_DEBUGGER_COMMAND_ARGUMENTS",
		"description": "設定 Visual Studio C++ 目標的本機偵錯工具命令列引數。屬性值可以使用產生器運算式 <cmake-generator-expressions(7)>。這是在 Visual Studio 專案檔案的 <LocalDebuggerCommandArguments> 中定義。如果在建立目標時設定，則此屬性會由變數 CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS 的值初始化。"
	},
	"VS_DEBUGGER_ENVIRONMENT": {
		"name": "VS_DEBUGGER_ENVIRONMENT",
		"description": "設定 Visual Studio C++ 目標的本機偵錯工具環境。屬性值可以使用產生器運算式 <cmake-generator-expressions(7)>。這是在 Visual Studio 專案檔案的 <LocalDebuggerEnvironment> 中定義。如果在建立目標時設定，則此屬性會由變數 CMAKE_VS_DEBUGGER_ENVIRONMENT 的值初始化。"
	},
	"VS_DEBUGGER_WORKING_DIRECTORY": {
		"name": "VS_DEBUGGER_WORKING_DIRECTORY",
		"description": "設定 Visual Studio C++ 目標的本機偵錯工具工作目錄。屬性值可以使用產生器運算式 <cmake-generator-expressions(7)>。這是在 Visual Studio 專案檔案的 <LocalDebuggerWorkingDirectory> 中定義。如果在建立目標時設定，則此屬性會由變數 CMAKE_VS_DEBUGGER_WORKING_DIRECTORY 的值初始化。"
	},
	"VS_DESKTOP_EXTENSIONS_VERSION": {
		"name": "VS_DESKTOP_EXTENSIONS_VERSION",
		"description": "Visual Studio Windows 10 Desktop 延伸模組版本"
	},
	"VS_DOTNET_DOCUMENTATION_FILE": {
		"name": "VS_DOTNET_DOCUMENTATION_FILE",
		"description": "Visual Studio 管理的專案 .NET 文件輸出"
	},
	"VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>": {
		"name": "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>",
		"description": "為 .NET 參考 <refname> 定義 XML 屬性 <tagname>。"
	},
	"VS_DOTNET_REFERENCES": {
		"name": "VS_DOTNET_REFERENCES",
		"description": "Visual Studio 受控專案 .NET 參考"
	},
	"VS_DOTNET_REFERENCES_COPY_LOCAL": {
		"name": "VS_DOTNET_REFERENCES_COPY_LOCAL",
		"description": "設定目標中所有 .NET 提示參考的 Copy Local 屬性"
	},
	"VS_DOTNET_REFERENCE_<refname>": {
		"name": "VS_DOTNET_REFERENCE_<refname>",
		"description": "名稱為 <refname> 並具有提示路徑的 Visual Studio 受控專案 .NET 參考。"
	},
	"VS_DOTNET_STARTUP_OBJECT": {
		"name": "VS_DOTNET_STARTUP_OBJECT",
		"description": "設定 Visual Studio .NET 目標中的啟始物件屬性。屬性值會定義完整類別名稱 (包含套件名稱)，例如: MyCompany.Package.MyStarterClass。"
	},
	"VS_DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "VS_DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": "指定 .NET 目標 Framework 版本。"
	},
	"VS_DPI_AWARE": {
		"name": "VS_DPI_AWARE",
		"description": "在 Visual Studio 目標專案屬性中，設定 [資訊清單工具] -> [輸入和輸出] -> [DPI 感知]。"
	},
	"VS_FILTER_PROPS": {
		"name": "VS_FILTER_PROPS",
		"description": "設定要包含在 visual Studio C++ 專案篩選檔案中的篩選 props 檔案。"
	},
	"VS_GLOBAL_KEYWORD": {
		"name": "VS_GLOBAL_KEYWORD",
		"description": "Visual Studio 專案關鍵字。"
	},
	"VS_GLOBAL_PROJECT_TYPES": {
		"name": "VS_GLOBAL_PROJECT_TYPES",
		"description": "Visual Studio 專案類型。"
	},
	"VS_GLOBAL_ROOTNAMESPACE": {
		"name": "VS_GLOBAL_ROOTNAMESPACE",
		"description": "Visual Studio 專案根命名空間。"
	},
	"VS_GLOBAL_<variable>": {
		"name": "VS_GLOBAL_<variable>",
		"description": "Visual Studio 專案專用全域變數。"
	},
	"VS_IOT_EXTENSIONS_VERSION": {
		"name": "VS_IOT_EXTENSIONS_VERSION",
		"description": "Visual Studio Windows 10 IoT 延伸模組版本"
	},
	"VS_IOT_STARTUP_TASK": {
		"name": "VS_IOT_STARTUP_TASK",
		"description": "Visual Studio Windows 10 IoT 連續背景工作"
	},
	"VS_JUST_MY_CODE_DEBUGGING": {
		"name": "VS_JUST_MY_CODE_DEBUGGING",
		"description": "為 Visual Studio 偵錯工具啟用 Just My Code。"
	},
	"VS_KEYWORD": {
		"name": "VS_KEYWORD",
		"description": "已移除。這會指定 Visual Studio 9 2008 產生器或更舊版本的 Visual Studio 專案關鍵字一次，但所有產生器都已移除。"
	},
	"VS_MOBILE_EXTENSIONS_VERSION": {
		"name": "VS_MOBILE_EXTENSIONS_VERSION",
		"description": "Visual Studio Windows 10 行動裝置版延伸模組版本"
	},
	"VS_NO_COMPILE_BATCHING": {
		"name": "VS_NO_COMPILE_BATCHING",
		"description": "關閉目標的編譯批次處理。通常 MSBuild 會呼叫具有多個 c/cpp 檔案的編譯器，而編譯器會啟動每個檔案的子程序，使組建成為平行建置。如果您希望一次一個檔案來叫用編譯器，將 VS_NO_COMPILE_BATCHING 設定為 ON。如果設定此旗標，MSBuild 會一次呼叫一個 c/cpp 檔案的編譯器。當您想要使用取代編譯器的工具時很有用，例如某些建置快取工具。"
	},
	"VS_NO_SOLUTION_DEPLOY": {
		"name": "VS_NO_SOLUTION_DEPLOY",
		"description": "指定在產生的 Visual Studio 方案中，不應將目標標示為部署到 Windows CE 或 Windows Phone 裝置。"
	},
	"VS_PACKAGE_REFERENCES": {
		"name": "VS_PACKAGE_REFERENCES",
		"description": "Visual Studio 的 NuGet 套件參考。"
	},
	"VS_PLATFORM_TOOLSET": {
		"name": "VS_PLATFORM_TOOLSET",
		"description": "覆寫用以建置目標的平台工具組。"
	},
	"VS_PROJECT_IMPORT": {
		"name": "VS_PROJECT_IMPORT",
		"description": "Visual Studio 管理的專案匯入"
	},
	"VS_SCC_AUXPATH": {
		"name": "VS_SCC_AUXPATH",
		"description": "Visual Studio 原始程式碼控制輔助路徑。"
	},
	"VS_SCC_LOCALPATH": {
		"name": "VS_SCC_LOCALPATH",
		"description": "Visual Studio 原始程式碼控制本機路徑。"
	},
	"VS_SCC_PROJECTNAME": {
		"name": "VS_SCC_PROJECTNAME",
		"description": "Visual Studio 原始程式碼控制專案。"
	},
	"VS_SCC_PROVIDER": {
		"name": "VS_SCC_PROVIDER",
		"description": "Visual Studio 原始程式碼控制提供者。"
	},
	"VS_SDK_REFERENCES": {
		"name": "VS_SDK_REFERENCES",
		"description": "Visual Studio 專案 SDK 參考。指定要新增至所產生 Visual Studio 專案的 SDK 參考清單 (以分號分隔)，例如 Microsoft.AdMediatorWindows81, Version=1.0。"
	},
	"VS_SOLUTION_DEPLOY": {
		"name": "VS_SOLUTION_DEPLOY",
		"description": "指定未以 Windows CE、Windows Phone 或 Microsoft Store 為目標時，應標示目標要進行部署。"
	},
	"VS_SOURCE_SETTINGS_<tool>": {
		"name": "VS_SOURCE_SETTINGS_<tool>",
		"description": "在使用 <tool> 的所有非組建檔案上，設定任一項目中繼資料。"
	},
	"VS_USER_PROPS": {
		"name": "VS_USER_PROPS",
		"description": "設定要包含在 Visual Studio C++ 專案檔中的使用者 props 檔案。標準路徑是 $(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props，在大部分情況下與 %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.Win32.user.props 或 %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props 相同。"
	},
	"VS_USE_DEBUG_LIBRARIES": {
		"name": "VS_USE_DEBUG_LIBRARIES",
		"description": "指示 Visual Studio 產生器會將哪些設定視為偵錯設定。這會控制 .vcxproj 檔案的每個設定中的 UseDebugLibraries 設定。"
	},
	"VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": {
		"name": "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION",
		"description": "Visual Studio Windows 目標平台最低版本"
	},
	"VS_WINRT_COMPONENT": {
		"name": "VS_WINRT_COMPONENT",
		"description": "將 Visual Studio 產生器的目標標示為 Windows 執行階段元件。使用 Windows 執行階段的 C++/CX 語言延伸模組來編譯目標。若是 SHARED 和 MODULE 程式庫，這也會定義 _WINRT_DLL 前置處理器巨集。"
	},
	"VS_WINRT_EXTENSIONS": {
		"name": "VS_WINRT_EXTENSIONS",
		"description": "已淘汰。請改用 VS_WINRT_COMPONENT。此屬性是該屬性的實驗性部份實作。"
	},
	"VS_WINRT_REFERENCES": {
		"name": "VS_WINRT_REFERENCES",
		"description": "Visual Studio 專案 Windows 執行階段中繼資料參考"
	},
	"WATCOM_RUNTIME_LIBRARY": {
		"name": "WATCOM_RUNTIME_LIBRARY",
		"description": "選取以 Watcom ABI 為目標的編譯器所使用的 Watcom 執行階段程式庫。"
	},
	"WIN32_EXECUTABLE": {
		"name": "WIN32_EXECUTABLE",
		"description": "透過 Windows 上的 WinMain 進入點建置可執行檔。"
	},
	"WINDOWS_EXPORT_ALL_SYMBOLS": {
		"name": "WINDOWS_EXPORT_ALL_SYMBOLS",
		"description": "此屬性只會對 Windows 上與 MS 相容的工具實作。"
	},
	"XCODE_ATTRIBUTE_<an-attribute>": {
		"name": "XCODE_ATTRIBUTE_<an-attribute>",
		"description": "直接設定 Xcode 目標屬性。"
	},
	"XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY": {
		"name": "XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY",
		"description": "告知 Xcode 產生器，為使用 XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> 屬性所內嵌的所有架構和程式庫，執行程式碼簽署。"
	},
	"XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY": {
		"name": "XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY",
		"description": "告知 Xcode 產生器，從使用 XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> 屬性所內嵌的所有架構中移除標頭。"
	},
	"XCODE_EMBED_<type>": {
		"name": "XCODE_EMBED_<type>",
		"description": "告知 Xcode 產生器，將指定的項目清單嵌入目標套件組合中。<type> 指定要使用的內嵌組建階段。請參閱 Xcode 文件以了解每個 <type> 的基礎位置。"
	},
	"XCODE_EMBED_<type>_CODE_SIGN_ON_COPY": {
		"name": "XCODE_EMBED_<type>_CODE_SIGN_ON_COPY",
		"description": "只有 Xcode 產生器才能使用的布林屬性。它指定是否要針對使用 XCODE_EMBED_ 屬性內嵌的項目執行程式碼簽署。"
	},
	"XCODE_EMBED_<type>_PATH": {
		"name": "XCODE_EMBED_<type>_PATH",
		"description": "此屬性只能由 Xcode 產生器使用。定義此屬性時，它會指定在內嵌由 XCODE_EMBED_ 指定的項目時所使用的相對路徑。路徑相對於與 <type> 相關聯之內嵌 XXX 組建階段的基礎位置。請參閱 Xcode 文件以了解每個 <type> 的基礎位置。"
	},
	"XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY": {
		"name": "XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY",
		"description": "只有 Xcode 產生器才能使用的布林屬性。它指定是否要將標頭從使用 XCODE_EMBED_ 屬性內嵌的所有架構中移除。"
	},
	"XCODE_GENERATE_SCHEME": {
		"name": "XCODE_GENERATE_SCHEME",
		"description": "若已啟用，Xcode 產生器將會產生結構描述檔案。這些檔案可用於從命令列叫用 analyze、archive、build-for-testing 和 test 動作。"
	},
	"XCODE_LINK_BUILD_PHASE_MODE": {
		"name": "XCODE_LINK_BUILD_PHASE_MODE",
		"description": "使用 Xcode 產生器時，會使用「連結二進位檔與程式庫」組建階段在 Xcode 專案檔中指定要連結的程式庫，或直接指定為連結器旗標。前者可讓 Xcode 管理組建路徑，這在建立 Xcode 封存時可能會有必要，因為其可能會使用一般組建的不同組建路徑。"
	},
	"XCODE_PRODUCT_TYPE": {
		"name": "XCODE_PRODUCT_TYPE",
		"description": "將 Xcode 參考上的 productType 屬性設為某個目標。CMake 會依據目標類型計算預設，但也可使用此屬性明確告知預設。"
	},
	"XCODE_SCHEME_ADDRESS_SANITIZER": {
		"name": "XCODE_SCHEME_ADDRESS_SANITIZER",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Address Sanitizer]。"
	},
	"XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": {
		"name": "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Detect use of stack after return]。"
	},
	"XCODE_SCHEME_ARGUMENTS": {
		"name": "XCODE_SCHEME_ARGUMENTS",
		"description": "請指定應新增到所產生之 Xcode 結構描述 Arguments 區段的命令列引數。"
	},
	"XCODE_SCHEME_DEBUG_AS_ROOT": {
		"name": "XCODE_SCHEME_DEBUG_AS_ROOT",
		"description": "是否以「根目錄」偵錯目標。"
	},
	"XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": {
		"name": "XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
		"description": "是否要在所產生的 Xcode 配置 [Options] 區段中，啟用 [Allow debugging when using document Versions Browser]。"
	},
	"XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": {
		"name": "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
		"description": "是否要停用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Main Thread Checker]。"
	},
	"XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": {
		"name": "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Dynamic Library Loads]。"
	},
	"XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": {
		"name": "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Dynamic Linker API usage]。"
	},
	"XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": {
		"name": "XCODE_SCHEME_ENABLE_GPU_API_VALIDATION",
		"description": "產生 Xcode 配置的 [選項] 區段中 Metal: API 驗證的屬性值。"
	},
	"XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": {
		"name": "XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE",
		"description": "產生之 Xcode 結構描述的 [選項] 區段中，GPU 框架擷取的屬性值。範例值為 Metal 和 Disabled。"
	},
	"XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": {
		"name": "XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION",
		"description": "產生 Xcode 配置的 [選項] 區段中 Metal: 著色器驗證的屬性值。"
	},
	"XCODE_SCHEME_ENVIRONMENT": {
		"name": "XCODE_SCHEME_ENVIRONMENT",
		"description": "請指定應新增到所產生之 Xcode 結構描述 Arguments 區段的環境變數。"
	},
	"XCODE_SCHEME_EXECUTABLE": {
		"name": "XCODE_SCHEME_EXECUTABLE",
		"description": "請指定所產生之 Xcode 結構描述 Info 區段中的可執行檔路徑。若未設定，如果目前的目標實際上為可執行檔，結構描述產生器就會加以選取。"
	},
	"XCODE_SCHEME_GUARD_MALLOC": {
		"name": "XCODE_SCHEME_GUARD_MALLOC",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Guard Malloc]。"
	},
	"XCODE_SCHEME_LAUNCH_CONFIGURATION": {
		"name": "XCODE_SCHEME_LAUNCH_CONFIGURATION",
		"description": "設定組建組態以執行目標。"
	},
	"XCODE_SCHEME_LAUNCH_MODE": {
		"name": "XCODE_SCHEME_LAUNCH_MODE",
		"description": "產生 Xcode 配置的 [資訊] 區段中 Launch 的屬性值。"
	},
	"XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": {
		"name": "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Main Thread Checker] 選項 [Pause on issues]。"
	},
	"XCODE_SCHEME_MALLOC_GUARD_EDGES": {
		"name": "XCODE_SCHEME_MALLOC_GUARD_EDGES",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Malloc Guard Edges]。"
	},
	"XCODE_SCHEME_MALLOC_SCRIBBLE": {
		"name": "XCODE_SCHEME_MALLOC_SCRIBBLE",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Malloc Scribble]。"
	},
	"XCODE_SCHEME_MALLOC_STACK": {
		"name": "XCODE_SCHEME_MALLOC_STACK",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Malloc Stack]。"
	},
	"XCODE_SCHEME_THREAD_SANITIZER": {
		"name": "XCODE_SCHEME_THREAD_SANITIZER",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Thread Sanitizer]。"
	},
	"XCODE_SCHEME_THREAD_SANITIZER_STOP": {
		"name": "XCODE_SCHEME_THREAD_SANITIZER_STOP",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Thread Sanitizer] - [Pause on issues]。"
	},
	"XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": {
		"name": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Undefined Behavior Sanitizer]。"
	},
	"XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": {
		"name": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Undefined Behavior Sanitizer] 選項 [Pause on issues]。"
	},
	"XCODE_SCHEME_WORKING_DIRECTORY": {
		"name": "XCODE_SCHEME_WORKING_DIRECTORY",
		"description": "在產生的 Xcode 配置中，指定執行和分析動作的工作目錄。若值包含產生器運算式，則會評估這些運算式。"
	},
	"XCODE_SCHEME_ZOMBIE_OBJECTS": {
		"name": "XCODE_SCHEME_ZOMBIE_OBJECTS",
		"description": "是否要啟用已產生 Xcode 配置之 [Diagnostics] 區段中的 [Zombie Objects]。"
	},
	"XCODE_XCCONFIG": {
		"name": "XCODE_XCCONFIG",
		"description": "如果設定，Xcode 產生器會將指定的檔案登錄為目標層級 XCConfig 檔案。如需全域的 XCConfig 檔案，請參閱 CMAKE_XCODE_XCCONFIG 目標屬性。"
	},
	"XCTEST": {
		"name": "XCTEST",
		"description": "此目標在 Mac 上是 XCTest CFBundle。"
	}
}