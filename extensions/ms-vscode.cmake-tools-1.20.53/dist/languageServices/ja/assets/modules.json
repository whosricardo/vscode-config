{
	"AddFileDependencies": {
		"name": "AddFileDependencies",
		"description": "ソース ファイルに依存関係を追加します。"
	},
	"AndroidTestUtilities": {
		"name": "AndroidTestUtilities",
		"description": "指定したデータを Android デバイスに自動的に読み込むテストを作成します。"
	},
	"BundleUtilities": {
		"name": "BundleUtilities",
		"description": "スタンドアロン バンドル アプリケーションのアセンブルに役立つ関数。"
	},
	"CheckCCompilerFlag": {
		"name": "CheckCCompilerFlag",
		"description": "C コンパイラが特定のフラグをサポートしているかどうかを確認します。"
	},
	"CheckCompilerFlag": {
		"name": "CheckCompilerFlag",
		"description": "コンパイラが特定のフラグをサポートしているかどうかを確認します。"
	},
	"CheckCSourceCompiles": {
		"name": "CheckCSourceCompiles",
		"description": "指定された C ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。"
	},
	"CheckCSourceRuns": {
		"name": "CheckCSourceRuns",
		"description": "指定された C ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。"
	},
	"CheckCXXCompilerFlag": {
		"name": "CheckCXXCompilerFlag",
		"description": "CXX コンパイラが特定のフラグをサポートしているかどうかを確認します。"
	},
	"CheckCXXSourceCompiles": {
		"name": "CheckCXXSourceCompiles",
		"description": "指定された C++ ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。"
	},
	"CheckCXXSourceRuns": {
		"name": "CheckCXXSourceRuns",
		"description": "指定された C++ ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。"
	},
	"CheckCXXSymbolExists": {
		"name": "CheckCXXSymbolExists",
		"description": "シンボルが関数、変数、またはマクロとして C++ に存在するかどうかを確認します。"
	},
	"CheckFortranCompilerFlag": {
		"name": "CheckFortranCompilerFlag",
		"description": "Fortran コンパイラが特定のフラグをサポートしているかどうかを確認します。"
	},
	"CheckFortranFunctionExists": {
		"name": "CheckFortranFunctionExists",
		"description": "Fortran 関数が存在するかどうかを確認します。"
	},
	"CheckFortranSourceCompiles": {
		"name": "CheckFortranSourceCompiles",
		"description": "指定された Fortran ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。"
	},
	"CheckFortranSourceRuns": {
		"name": "CheckFortranSourceRuns",
		"description": "指定された Fortran ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。"
	},
	"CheckFunctionExists": {
		"name": "CheckFunctionExists",
		"description": "C 関数をリンクできるかどうかを確認する"
	},
	"CheckIncludeFile": {
		"name": "CheckIncludeFile",
		"description": "ヘッダー ファイルを C に含めることができるかどうかを確認するマクロを提供します。"
	},
	"CheckIncludeFileCXX": {
		"name": "CheckIncludeFileCXX",
		"description": "ヘッダー ファイルを CXX に含めることができるかどうかを確認するマクロを提供します。"
	},
	"CheckIncludeFiles": {
		"name": "CheckIncludeFiles",
		"description": "1 つ以上のヘッダー ファイルの一覧を一緒に含めることができるかどうかを確認するマクロを提供します。"
	},
	"CheckIPOSupported": {
		"name": "CheckIPOSupported",
		"description": "コンパイラが相互的最適化 (IPO/LTO) をサポートしているかどうかを確認します。INTERPROCEDURAL_OPTIMIZATION ターゲット プロパティを有効にする前に、これを使用します。"
	},
	"CheckLanguage": {
		"name": "CheckLanguage",
		"description": "enable_language コマンドまたは project コマンドで言語を有効にできるかどうかを確認します。"
	},
	"CheckLibraryExists": {
		"name": "CheckLibraryExists",
		"description": "関数が存在するかどうかを確認します。"
	},
	"CheckLinkerFlag": {
		"name": "CheckLinkerFlag",
		"description": "コンパイラが特定のリンク フラグをサポートしているかどうかを確認します。"
	},
	"CheckOBJCCompilerFlag": {
		"name": "CheckOBJCCompilerFlag",
		"description": "Objective-C コンパイラが特定のフラグをサポートしているかどうかを確認します。"
	},
	"CheckOBJCSourceCompiles": {
		"name": "CheckOBJCSourceCompiles",
		"description": "指定された Objective-C ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。"
	},
	"CheckOBJCSourceRuns": {
		"name": "CheckOBJCSourceRuns",
		"description": "指定された Objective-C ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。"
	},
	"CheckOBJCXXCompilerFlag": {
		"name": "CheckOBJCXXCompilerFlag",
		"description": "Objective-C++ コンパイラが特定のフラグをサポートしているかどうかを確認します。"
	},
	"CheckOBJCXXSourceCompiles": {
		"name": "CheckOBJCXXSourceCompiles",
		"description": "指定された Objective-C++ ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。"
	},
	"CheckOBJCXXSourceRuns": {
		"name": "CheckOBJCXXSourceRuns",
		"description": "指定された Objective-C++ ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。"
	},
	"CheckPIESupported": {
		"name": "CheckPIESupported",
		"description": "リンカーが実行可能ファイルの位置独立コード (PIE) または位置非依存コード (NO_PIE) をサポートしているかどうかを確認します。これを使用して、実行可能ファイルの POSITION_INDEPENDENT_CODE ターゲット プロパティがリンク時に受け入れられます。"
	},
	"CheckPrototypeDefinition": {
		"name": "CheckPrototypeDefinition",
		"description": "想定されるプロトタイプが正しいかどうかを確認します。"
	},
	"CheckSourceCompiles": {
		"name": "CheckSourceCompiles",
		"description": "指定されたソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。"
	},
	"CheckSourceRuns": {
		"name": "CheckSourceRuns",
		"description": "指定されたソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。"
	},
	"CheckStructHasMember": {
		"name": "CheckStructHasMember",
		"description": "指定された構造体またはクラスに指定されたメンバー変数があるかどうかを確認する"
	},
	"CheckSymbolExists": {
		"name": "CheckSymbolExists",
		"description": "シンボルが C に関数、変数、またはマクロとして存在するかどうかを確認するマクロを提供します。"
	},
	"CheckTypeSize": {
		"name": "CheckTypeSize",
		"description": "型のサイズを確認する"
	},
	"CheckVariableExists": {
		"name": "CheckVariableExists",
		"description": "変数が存在するかどうかを確認します。"
	},
	"CMakeAddFortranSubdirectory": {
		"name": "CMakeAddFortranSubdirectory",
		"description": "Fortran のみのサブディレクトリを追加し、Fortran コンパイラを見つけてビルドします。"
	},
	"CMakeBackwardCompatibilityCXX": {
		"name": "CMakeBackwardCompatibilityCXX",
		"description": "一連の下位互換性変数を定義する"
	},
	"CMakeDependentOption": {
		"name": "CMakeDependentOption",
		"description": "他のオプションに依存するオプションを提供するマクロ。"
	},
	"CMakeDetermineVSServicePack": {
		"name": "CMakeDetermineVSServicePack",
		"description": "このモジュールの機能は、コンパイラのバージョン番号を含む CMAKE_<LANG>_COMPILER_VERSION 変数に置き換わりました。"
	},
	"CMakeExpandImportedTargets": {
		"name": "CMakeExpandImportedTargets",
		"description": "このモジュールは、インポートされたターゲットを、try_compile コマンドと try_run コマンドで使用するために、ディスク上で参照する基になるライブラリに拡張するために必要でした。これらのコマンドは、LINK_LIBRARIES オプションでインポートされたライブラリをサポートするようになりました (try_compile 用の CMake 2.8.11 以降、および CMake 3.2 for try_run 以降)。"
	},
	"CMakeFindDependencyMacro": {
		"name": "CMakeFindDependencyMacro",
		"description": "``find_dependency()`` マクロは、パッケージ依存関係の :command:`find_package` 呼び出しをラップします。"
	},
	"CMakeFindFrameworks": {
		"name": "CMakeFindFrameworks",
		"description": "OSX フレームワークを検索するためのヘルパー モジュール"
	},
	"CMakeFindPackageMode": {
		"name": "CMakeFindPackageMode",
		"description": "このファイルは、--find-package <Find-Package Tool Mode> を使用して呼び出されると、cmake によって実行されます。次の変数が -D を使用して設定されることを想定しています。"
	},
	"CMakeForceCompiler": {
		"name": "CMakeForceCompiler",
		"description": "このモジュールによって提供されるマクロは、CMake がコンパイラ ID を自動的に検出できなかったときに、ツールチェーン ファイルをクロス コンパイルして使用することを意図していました。このモジュールの導入以降、CMake のコンパイラ識別機能が向上し、コンパイラを認識するように教えられるようになりました。さらに、CMake がコンパイラから検出する一連の情報は、これらのマクロを使用してツールチェーン ファイルから提供するには広範すぎるようになりました。"
	},
	"CMakeGraphVizOptions": {
		"name": "CMakeGraphVizOptions",
		"description": "CMake の組み込みの Graphviz サポート。"
	},
	"CMakePackageConfigHelpers": {
		"name": "CMakePackageConfigHelpers",
		"description": "パッケージを検索して使用するために他のプロジェクトに含めることができる構成ファイルを作成するためのヘルパー関数です。"
	},
	"CMakeParseArguments": {
		"name": "CMakeParseArguments",
		"description": "このモジュールは、CMake によってネイティブに実装された cmake_parse_arguments コマンドを実装しました。CMake 3.4 以前からコマンドを取得するために含まれるプロジェクトとの互換性を確保するための空のプレースホルダーになりました。"
	},
	"CMakePrintHelpers": {
		"name": "CMakePrintHelpers",
		"description": "プロパティと変数を印刷するための便利な関数。デバッグなどに役立ちます。"
	},
	"CMakePrintSystemInformation": {
		"name": "CMakePrintSystemInformation",
		"description": "システム情報を印刷します。"
	},
	"CMakePushCheckState": {
		"name": "CMakePushCheckState",
		"description": "このモジュールでは、CMAKE_PUSH_CHECK_STATE() CMAKE_POP_CHECK_STATE() と CMAKE_RESET_CHECK_STATE() の 3 つのマクロを定義します。これらのマクロは、CMake に付属するさまざまなチェック ファイルで使用される変数 CMAKE_REQUIRED_FLAGS、CMAKE_REQUIRED_DEFINITIONS、CMAKE_REQUIRED_LINK_OPTIONS、CMAKE_REQUIRED_LIBRARIES、CMAKE_REQUIRED_INCLUDES、CMAKE_EXTRA_INCLUDE_FILES の状態を保存、復元、リセット (つまり、コンテンツのクリア) に使用できます。例: check_function_exists() など。変数の内容はスタックにプッシュされ、複数回のプッシュがサポートされます。これは便利です。たとえば、Find-module でこのようなテストを実行する場合は、それらのテストを設定する必要がありますが、Find モジュールを実行した後は、以前と同じ値を持つ必要があります。"
	},
	"CMakeVerifyManifest": {
		"name": "CMakeVerifyManifest",
		"description": "CMakeVerifyManifest.cmake"
	},
	"CPack": {
		"name": "CPack",
		"description": "バイナリ インストーラーとソース パッケージのジェネレーターを構成します。"
	},
	"CPackArchive": {
		"name": "CPackArchive",
		"description": "CPack アーカイブ ジェネレーターのドキュメントをこちらに移動しました: CPack アーカイブ ジェネレーター"
	},
	"CPackBundle": {
		"name": "CPackBundle",
		"description": "CPack バンドル ジェネレーターのドキュメントを次に移動しました: CPack バンドル ジェネレーター"
	},
	"CPackComponent": {
		"name": "CPackComponent",
		"description": "バイナリ インストーラーとソース パッケージのコンポーネントを構成します。"
	},
	"CPackCygwin": {
		"name": "CPackCygwin",
		"description": "CPack Cygwin ジェネレーターのドキュメントを次に移動しました: CPack Cygwin ジェネレーター"
	},
	"CPackDeb": {
		"name": "CPackDeb",
		"description": "CPack DEB ジェネレーターのドキュメントは、CPack DEB ジェネレーターに移動しました"
	},
	"CPackDMG": {
		"name": "CPackDMG",
		"description": "CPack DragNDrop ジェネレーターのドキュメントは、CPack DragNDrop ジェネレーターに移動しました"
	},
	"CPackFreeBSD": {
		"name": "CPackFreeBSD",
		"description": "CPack FreeBSD ジェネレーターのドキュメントをこちらに移動しました: CPack FreeBSD ジェネレーター"
	},
	"CPackIFW": {
		"name": "CPackIFW",
		"description": "このモジュールは、Qt Installer Framework (QtIFW) で提供されるコマンド ライン ユーティリティの場所を探します。"
	},
	"CPackIFWConfigureFile": {
		"name": "CPackIFWConfigureFile",
		"description": "このモジュールでは、QtIFW/SDK/Creator スタイルで準備されたファイル テンプレートを構成するための同様の configure_file コマンドを定義します。"
	},
	"CPackNSIS": {
		"name": "CPackNSIS",
		"description": "CPack NSIS ジェネレーターのドキュメントをこちらに移動しました: CPack NSIS ジェネレーター"
	},
	"CPackNuGet": {
		"name": "CPackNuGet",
		"description": "CPack NuGet ジェネレーターのドキュメントをこちらに移動しました: CPack NuGet ジェネレーター"
	},
	"CPackProductBuild": {
		"name": "CPackProductBuild",
		"description": "CPack productbuild ジェネレーターのドキュメントは、CPack productbuild ジェネレーターに移動しました"
	},
	"CPackRPM": {
		"name": "CPackRPM",
		"description": "CPack RPM ジェネレーターのドキュメントをこちらに移動しました: CPack RPM ジェネレーター"
	},
	"CPackWIX": {
		"name": "CPackWIX",
		"description": "CPack WIX ジェネレーターのドキュメントをこちらに移動しました: CPack WIX ジェネレーター"
	},
	"CSharpUtilities": {
		"name": "CSharpUtilities",
		"description": "CSharp/.NET ターゲットの構成を容易にする関数。"
	},
	"CTest": {
		"name": "CTest",
		"description": "CTest/CDash を使用してテスト用にプロジェクトを構成する"
	},
	"CTestCoverageCollectGCOV": {
		"name": "CTestCoverageCollectGCOV",
		"description": "このモジュールは、ctest_coverage_collect_gcov 関数を提供します。"
	},
	"CTestScriptMode": {
		"name": "CTestScriptMode",
		"description": "このファイルはスクリプト モード (-S) で ctest によって読み取られます"
	},
	"CTestUseLaunchers": {
		"name": "CTestUseLaunchers",
		"description": "CTEST_USE_LAUNCHERS がオンの場合は、RULE_LAUNCH_* グローバル プロパティを設定します。"
	},
	"Dart": {
		"name": "Dart",
		"description": "CTest または古い Microsoft Tcl クライアントを使用してテスト用にプロジェクトを構成する"
	},
	"DeployQt4": {
		"name": "DeployQt4",
		"description": "スタンドアロン Qt4 実行可能ファイルのアセンブルに役立つ関数。"
	},
	"Documentation": {
		"name": "Documentation",
		"description": "このモジュールでは、VTK ドキュメント フレームワークのサポートを提供します。複数のツール (Doxygen、Perl など) に依存しています。"
	},
	"ExternalData": {
		"name": "ExternalData",
		"description": "ソース ツリーの外部に格納されているデータ ファイルを管理する"
	},
	"ExternalProject": {
		"name": "ExternalProject",
		"description": "ExternalProject_Add() 関数は、外部プロジェクトのダウンロード、更新/パッチ、構成、ビルド、インストール、およびテストの手順を実行するためのカスタム ターゲットを作成します"
	},
	"FeatureSummary": {
		"name": "FeatureSummary",
		"description": "有効/無効の機能の概要を生成するための関数。"
	},
	"FetchContent": {
		"name": "FetchContent",
		"description": "このモジュールでは、ExternalProject モジュールでサポートされている任意の方法を使用して、構成時にコンテンツを設定できます。ExternalProject_Add() はビルド時にダウンロードされますが、FetchContent モジュールはコンテンツをすぐに使用できるようにし、構成手順で add_subdirectory()、include()、file() 操作などのコマンドでコンテンツを使用できるようにします。"
	},
	"FindALSA": {
		"name": "FindALSA",
		"description": "高度な Linux サウンド アーキテクチャ (ALSA) の検索"
	},
	"FindArmadillo": {
		"name": "FindArmadillo",
		"description": "Armadの C++ ライブラリを検索します。Armadillo は、線形代数および科学コンピューティング用のライブラリです。"
	},
	"FindASPELL": {
		"name": "FindASPELL",
		"description": "ASPELL を探してみる"
	},
	"FindAVIFile": {
		"name": "FindAVIFile",
		"description": "AVIFILE ライブラリを見つけてパスを含める"
	},
	"FindBacktrace": {
		"name": "FindBacktrace",
		"description": "backtrace(3) のプロバイダーを検索します。"
	},
	"FindBISON": {
		"name": "FindBISON",
		"description": "bison 実行可能ファイルを検索し、カスタム ビルド規則を生成するマクロを指定します。"
	},
	"FindBLAS": {
		"name": "FindBLAS",
		"description": "基本的な線形代数サブプログラム (BLAS) ライブラリの検索"
	},
	"FindBoost": {
		"name": "FindBoost",
		"description": "Find Boost にはディレクトリとライブラリが含まれます"
	},
	"FindBullet": {
		"name": "FindBullet",
		"description": "Bullet 物理演算エンジンを見つけよう"
	},
	"FindBZip2": {
		"name": "FindBZip2",
		"description": "BZip2 を探してみる"
	},
	"FindCABLE": {
		"name": "FindCABLE",
		"description": "CABLE を検索する"
	},
	"FindCoin3D": {
		"name": "FindCoin3D",
		"description": "Coin3D (Open Inventor) を検索する"
	},
	"FindCUDA": {
		"name": "FindCUDA",
		"description": "このモジュールを使用したり、CUDA コードをコンパイルするために find_package(CUDA) を呼び出したりする必要はなくなりました。代わりに、プロジェクト コマンドの最上位の呼び出しで指定された言語間で CUDA を一覧表示するか、CUDA を使用して enable_language コマンドを呼び出します。その後、CUDA (.cu) ソースを他の言語と同様のターゲットに直接追加できます。"
	},
	"FindCUDAToolkit": {
		"name": "FindCUDAToolkit",
		"description": "このスクリプトは NVIDIA CUDA ツールキットと関連ライブラリを検索しますが、特定のプロジェクトに対して CUDA 言語を有効にする必要はありません。このモジュールでは、NVIDIA CUDA サンプルは検索されません。"
	},
	"FindCups": {
		"name": "FindCups",
		"description": "COMMON UNIX Printing System (CUPS) を検索します。"
	},
	"FindCURL": {
		"name": "FindCURL",
		"description": "ネイティブの CURL ヘッダーとライブラリを検索します。"
	},
	"FindCurses": {
		"name": "FindCurses",
		"description": "ファイルとライブラリを含む問題または ncurses を検索します。"
	},
	"FindCVS": {
		"name": "FindCVS",
		"description": "同時実行バージョン システム (CVS) を検索します。"
	},
	"FindCxxTest": {
		"name": "FindCxxTest",
		"description": "CxxTest 単体テスト フレームワークを検索します。"
	},
	"FindCygwin": {
		"name": "FindCygwin",
		"description": "Cygwin は、Microsoft Windows でネイティブに実行される POSIX 互換環境です"
	},
	"FindDart": {
		"name": "FindDart",
		"description": "DART を検索する"
	},
	"FindDCMTK": {
		"name": "FindDCMTK",
		"description": "DICOM ToolKit (DCMTK) ライブラリとアプリケーションを検索する"
	},
	"FindDevIL": {
		"name": "FindDevIL",
		"description": "このモジュールは、開発者のイメージ ライブラリを検索します。https://openil.sourceforge.net/"
	},
	"FindDoxygen": {
		"name": "FindDoxygen",
		"description": "Doxygen はドキュメント生成ツールです (https://www.doxygen.nl を参照)。このモジュールは、Doxygen と、サポートされているいくつかのオプション ツールを探します。"
	},
	"FindEnvModules": {
		"name": "FindEnvModules",
		"description": "環境モジュールの実装を見つけ、それらを使用するために CMake スクリプトでコマンドを使用できるようにします。これは、Lua ベースの Lmod と TCL ベースの EnvironmentModules の両方と互換性があります。"
	},
	"FindEXPAT": {
		"name": "FindEXPAT",
		"description": "ネイティブ Expat ヘッダーとライブラリを検索します。Expat は、C で記述されたストリーム指向の XML パーサー ライブラリです。"
	},
	"FindFLEX": {
		"name": "FindFLEX",
		"description": "Fast Lexical Analyzer (Flex) 実行可能ファイルを見つけ、カスタム ビルドルールを生成するためのマクロを提供します"
	},
	"FindFLTK": {
		"name": "FindFLTK",
		"description": "Fast Light Toolkit (FLTK) ライブラリを検索する"
	},
	"FindFLTK2": {
		"name": "FindFLTK2",
		"description": "ネイティブ FLTK 2.0 インクルードとライブラリを検索する"
	},
	"FindFontconfig": {
		"name": "FindFontconfig",
		"description": "Fontconfig ヘッダーとライブラリを検索します。"
	},
	"FindFreetype": {
		"name": "FindFreetype",
		"description": "FreeType フォント レンダラーに含まれるライブラリを検索します。"
	},
	"FindGCCXML": {
		"name": "FindGCCXML",
		"description": "GCC-XML フロントエンド実行可能ファイルを検索します。"
	},
	"FindGDAL": {
		"name": "FindGDAL",
		"description": "地理空間データ抽象化ライブラリ (GDAL) を検索します。"
	},
	"FindGettext": {
		"name": "FindGettext",
		"description": "GNU gettext ツールを検索する"
	},
	"FindGIF": {
		"name": "FindGIF",
		"description": "これにより、グラフィックス交換形式 (GIF) ライブラリ (giflib) が検索されます"
	},
	"FindGit": {
		"name": "FindGit",
		"description": "モジュールでは、次の変数が定義されます。"
	},
	"FindGLEW": {
		"name": "FindGLEW",
		"description": "OpenGL Extension Wrangler Library (GLEW) を検索する"
	},
	"FindGLUT": {
		"name": "FindGLUT",
		"description": "OpenGL Utility Toolkit (GLUT) ライブラリとインクルード ファイルを検索します。"
	},
	"FindGnuplot": {
		"name": "FindGnuplot",
		"description": "このモジュールは gnuplot を探します"
	},
	"FindGnuTLS": {
		"name": "FindGnuTLS",
		"description": "GNU トランスポート層セキュリティ ライブラリ (gnutls) を検索する"
	},
	"FindGSL": {
		"name": "FindGSL",
		"description": "ネイティブ GNU Scientific Library (GSL) のインクルードとライブラリを検索します。"
	},
	"FindGTest": {
		"name": "FindGTest",
		"description": "Google C++ テスト フレームワークを検索します。"
	},
	"FindGTK": {
		"name": "FindGTK",
		"description": "GTK、glib、GTKGLArea を検索する"
	},
	"FindGTK2": {
		"name": "FindGTK2",
		"description": "GTK2 ウィジェット ライブラリとその他のいくつかのオプション コンポーネント (gtkmm、glade、gldemm など) を検索します。"
	},
	"FindHDF5": {
		"name": "FindHDF5",
		"description": "配列データを記述する自己記述用のライブラリである階層データ形式 (HDF5) を検索します。"
	},
	"FindHg": {
		"name": "FindHg",
		"description": "水銀作業のコピーから情報を抽出します。"
	},
	"FindHSPELL": {
		"name": "FindHSPELL",
		"description": "ヘブライ語のスペル チェック (Hspell) と形態論エンジンを探してみてください。"
	},
	"FindHTMLHelp": {
		"name": "FindHTMLHelp",
		"description": "このモジュールは、Microsoft HTML ヘルプ コンパイラを検索します"
	},
	"FindIce": {
		"name": "FindIce",
		"description": "ZeroC Internet Communication Engine (ICE) プログラム、ライブラリ、およびデータファイルを検索します。"
	},
	"FindIconv": {
		"name": "FindIconv",
		"description": "このモジュールは、システム上の iconv() POSIX.1 関数を検出します。これらの関数は、通常の C ライブラリまたは追加のライブラリの形式で外部で提供される場合があります。"
	},
	"FindIcotool": {
		"name": "FindIcotool",
		"description": "icotool を検索する"
	},
	"FindICU": {
		"name": "FindICU",
		"description": "Unicode (ICU) ライブラリとプログラムの International Components を検索します。"
	},
	"FindImageMagick": {
		"name": "FindImageMagick",
		"description": "ラスター イメージを表示、変換、操作するためのソフトウェア スイートである ImageMagick を検索します。"
	},
	"FindIntl": {
		"name": "FindIntl",
		"description": "Gettext libintl ヘッダーとライブラリを検索します。"
	},
	"FindITK": {
		"name": "FindITK",
		"description": "このモジュールはもう存在しません。"
	},
	"FindJasper": {
		"name": "FindJasper",
		"description": "JPEG2000 ライブラリを検索します。"
	},
	"FindJava": {
		"name": "FindJava",
		"description": "Java を検索する"
	},
	"FindJNI": {
		"name": "FindJNI",
		"description": "Java Native Interface (JNI) のヘッダーとライブラリを検索します。"
	},
	"FindJPEG": {
		"name": "FindJPEG",
		"description": "Joint Photographic Experts Group (JPEG) ライブラリ (libjpeg) を検索する"
	},
	"FindKDE3": {
		"name": "FindKDE3",
		"description": "KDE3 インクルード ディレクトリとライブラリ ディレクトリ、KDE プリプロセッサを見つけ、いくつかのマクロを定義します"
	},
	"FindKDE4": {
		"name": "FindKDE4",
		"description": "KDE4 を検索し、ソフトウェアをコンパイルするために必要なすべての変数とマクロを指定します。次のディレクトリ内の KDE 4 を指定された順序で検索します。"
	},
	"FindLAPACK": {
		"name": "FindLAPACK",
		"description": "線形代数 PACKage (LAPACK) ライブラリを検索する"
	},
	"FindLATEX": {
		"name": "FindLATEX",
		"description": "LaTeX を検索する"
	},
	"FindLibArchive": {
		"name": "FindLibArchive",
		"description": "ライブラリ ライブラリとヘッダーを検索します。Libarchive は、複数形式のアーカイブおよび圧縮ライブラリです。"
	},
	"FindLibinput": {
		"name": "FindLibinput",
		"description": "libinput ヘッダーとライブラリを検索します。"
	},
	"FindLibLZMA": {
		"name": "FindLibLZMA",
		"description": "LZMA 圧縮アルゴリズムのヘッダーとライブラリを検索します。"
	},
	"FindLibXml2": {
		"name": "FindLibXml2",
		"description": "XML 処理ライブラリ (libxml2) を検索します。"
	},
	"FindLibXslt": {
		"name": "FindLibXslt",
		"description": "XSL 変換、拡張スタイルシート言語変換 (XSLT) ライブラリ (LibXslt) を検索する"
	},
	"FindLTTngUST": {
		"name": "FindLTTngUST",
		"description": "Linux Trace Toolkit Next Generation (LTTng-UST) ライブラリを検索します。"
	},
	"FindLua": {
		"name": "FindLua",
		"description": "Lua ライブラリを検索します。"
	},
	"FindLua50": {
		"name": "FindLua50",
		"description": "Lua ライブラリを検索します。"
	},
	"FindLua51": {
		"name": "FindLua51",
		"description": "Lua ライブラリを検索します。このモジュールでは、次を定義します。"
	},
	"FindMatlab": {
		"name": "FindMatlab",
		"description": "Matlab または Matlab Compiler Runtime (MCR) を見つけ、Matlab ツール、ライブラリ、コンパイラを CMake に提供します。"
	},
	"FindMFC": {
		"name": "FindMFC",
		"description": "Windows で Microsoft Foundation Class ライブラリ (MFC) を検索する"
	},
	"FindMotif": {
		"name": "FindMotif",
		"description": "Motif (または lesstif) を見つけようとします"
	},
	"FindMPEG": {
		"name": "FindMPEG",
		"description": "ネイティブ MPEG インクルードとライブラリを検索する"
	},
	"FindMPEG2": {
		"name": "FindMPEG2",
		"description": "ネイティブ MPEG2 インクルードとライブラリを検索する"
	},
	"FindMPI": {
		"name": "FindMPI",
		"description": "メッセージ パッシング インターフェイス (MPI) の実装を検索します。"
	},
	"FindMsys": {
		"name": "FindMsys",
		"description": "Microsoft Windows でネイティブに実行される POSIX 互換環境である MSYS を検索する"
	},
	"FindODBC": {
		"name": "FindODBC",
		"description": "Open Database Connectivity (ODBC) インクルード ディレクトリとライブラリを検索します。"
	},
	"FindOpenACC": {
		"name": "FindOpenACC",
		"description": "コンパイラによる OpenACC サポートを検出します。"
	},
	"FindOpenAL": {
		"name": "FindOpenAL",
		"description": "Open Audio Library (OpenAL) を検索します。"
	},
	"FindOpenCL": {
		"name": "FindOpenCL",
		"description": "Open Computing Language (OpenCL) を検索します"
	},
	"FindOpenGL": {
		"name": "FindOpenGL",
		"description": "FindModule for OpenGL and OpenGL Utility Library (GLU)。"
	},
	"FindOpenMP": {
		"name": "FindOpenMP",
		"description": "Open Multi-Processing (OpenMP) のサポートを検索します。"
	},
	"FindOpenSceneGraph": {
		"name": "FindOpenSceneGraph",
		"description": "OpenSceneGraph の検索 (3D グラフィックス アプリケーション プログラミング インターフェイス) を検索する"
	},
	"FindOpenSP": {
		"name": "FindOpenSP",
		"description": "OpenSP ライブラリを探してみてください。"
	},
	"FindOpenSSL": {
		"name": "FindOpenSSL",
		"description": "OpenSSL 暗号化ライブラリを検索します。"
	},
	"FindOpenThreads": {
		"name": "FindOpenThreads",
		"description": "OpenThreads は C++ ベースのスレッド ライブラリです。その最大のユーザーベースは OpenSceneGraph のように見えるので、OSGDIR を環境パスとして受け入れることに気付くかもしれません。ここでは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートのこの部分について考えてみましょう。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。"
	},
	"Findosg": {
		"name": "Findosg",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgAnimation": {
		"name": "FindosgAnimation",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgDB": {
		"name": "FindosgDB",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgFX": {
		"name": "FindosgFX",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgGA": {
		"name": "FindosgGA",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgIntrospection": {
		"name": "FindosgIntrospection",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgManipulator": {
		"name": "FindosgManipulator",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgParticle": {
		"name": "FindosgParticle",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgPresentation": {
		"name": "FindosgPresentation",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgProducer": {
		"name": "FindosgProducer",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgQt": {
		"name": "FindosgQt",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgShadow": {
		"name": "FindosgShadow",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgSim": {
		"name": "FindosgSim",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgTerrain": {
		"name": "FindosgTerrain",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgText": {
		"name": "FindosgText",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgUtil": {
		"name": "FindosgUtil",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgViewer": {
		"name": "FindosgViewer",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgVolume": {
		"name": "FindosgVolume",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"FindosgWidget": {
		"name": "FindosgWidget",
		"description": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。"
	},
	"Findosg_functions": {
		"name": "Findosg_functions",
		"description": "この CMake ファイルには、OSG ライブラリとノードキットの検索に役立つ 2 つのマクロが含まれています。完全なドキュメントについては、FindOpenSceneGraph を参照してください。"
	},
	"FindPackageHandleStandardArgs": {
		"name": "FindPackageHandleStandardArgs",
		"description": "このモジュールは、find_package(<PackageName>) 呼び出しを実装する Find Modules で使用することを目的とした関数を提供します。"
	},
	"FindPackageMessage": {
		"name": "FindPackageMessage",
		"description": "この関数は、FindXXX.cmake モジュール ファイルで使用することを目的としています。一意の検索結果ごとにメッセージが 1 回出力されます。これは、パッケージが見つかった場所をユーザーに伝える場合に便利です。最初の引数は、パッケージの名前 (XXX) を指定します。2 番目の引数は、表示するメッセージを指定します。3 番目の引数は、検索結果に関する詳細を一覧表示して、変更した場合にメッセージが再び表示されるようにします。マクロは、find_package コマンドに対する QUIET 引数にも従います。"
	},
	"FindPatch": {
		"name": "FindPatch",
		"description": "モジュールでは、次の変数が定義されます。"
	},
	"FindPerl": {
		"name": "FindPerl",
		"description": "Perl インタープリターを検索します。"
	},
	"FindPerlLibs": {
		"name": "FindPerlLibs",
		"description": "Perl ライブラリを検索する"
	},
	"FindPHP4": {
		"name": "FindPHP4",
		"description": "PHP4 を検索する"
	},
	"FindPhysFS": {
		"name": "FindPhysFS",
		"description": "PhysFS ライブラリを検索します。このモジュールは以下を定義します:"
	},
	"FindPike": {
		"name": "FindPike",
		"description": "Pike を検索する"
	},
	"FindPkgConfig": {
		"name": "FindPkgConfig",
		"description": "CMake 用の pkg-config モジュール。"
	},
	"FindPNG": {
		"name": "FindPNG",
		"description": "PNG 画像形式の公式リファレンス ライブラリである libpng を検索します。"
	},
	"FindPostgreSQL": {
		"name": "FindPostgreSQL",
		"description": "PostgreSQL のインストールを検索します。"
	},
	"FindProducer": {
		"name": "FindProducer",
		"description": "プロデューサーは OpenSceneGraph の直接の一部ではありませんが、プライマリ ユーザーは OSG であるため、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートのこの部分について考えてみましょう。OSGDIR を環境パスとして受け入れることがわかります。"
	},
	"FindProtobuf": {
		"name": "FindProtobuf",
		"description": "Google プロトコル バッファー ライブラリを見つけて構成します。"
	},
	"FindPython": {
		"name": "FindPython",
		"description": "Python インタープリター、コンパイラ、開発環境 (ディレクトリとライブラリを含む) を検索します。"
	},
	"FindPython2": {
		"name": "FindPython2",
		"description": "Python 2 インタープリター、コンパイラ、開発環境 (ディレクトリとライブラリを含む) を検索します。"
	},
	"FindPython3": {
		"name": "FindPython3",
		"description": "Python 3 インタープリター、コンパイラ、開発環境 (ディレクトリとライブラリを含む) を検索します。"
	},
	"FindPythonInterp": {
		"name": "FindPythonInterp",
		"description": "Python インタープリターを検索する"
	},
	"FindPythonLibs": {
		"name": "FindPythonLibs",
		"description": "Python ライブラリを検索する"
	},
	"FindQt": {
		"name": "FindQt",
		"description": "インストールされているすべてのバージョンの Qt3 または Qt4 を検索します。"
	},
	"FindQt3": {
		"name": "FindQt3",
		"description": "Qt インクルード パスとライブラリを検索する"
	},
	"FindQt4": {
		"name": "FindQt4",
		"description": "このモジュールを使用して Qt4 を検索できます。最も重要な問題は、Qt4 qmake がシステム パスを介して使用できるということです。この qmake は、基本的に他のすべてを検出するために使用されます。このモジュールでは、インポートされたターゲット、マクロ、変数の数を定義します。"
	},
	"FindQuickTime": {
		"name": "FindQuickTime",
		"description": "QuickTime を検索する このモジュールでは、次の定義が定義されています。"
	},
	"FindRTI": {
		"name": "FindRTI",
		"description": "M&S HLA RTI ライブラリを検索してみてください"
	},
	"FindRuby": {
		"name": "FindRuby",
		"description": "Ruby を検索する"
	},
	"FindSDL": {
		"name": "FindSDL",
		"description": "SDL ライブラリの検索"
	},
	"FindSDL_gfx": {
		"name": "FindSDL_gfx",
		"description": "SDL_gfx ライブラリを検索する"
	},
	"FindSDL_image": {
		"name": "FindSDL_image",
		"description": "SDL_image ライブラリを検索する"
	},
	"FindSDL_mixer": {
		"name": "FindSDL_mixer",
		"description": "SDL_mixer ライブラリを検索する"
	},
	"FindSDL_net": {
		"name": "FindSDL_net",
		"description": "SDL_net ライブラリを検索する"
	},
	"FindSDL_sound": {
		"name": "FindSDL_sound",
		"description": "SDL_sound ライブラリを検索します"
	},
	"FindSDL_ttf": {
		"name": "FindSDL_ttf",
		"description": "SDL_ttf ライブラリを検索する"
	},
	"FindSelfPackers": {
		"name": "FindSelfPackers",
		"description": "upx を検索する"
	},
	"FindSQLite3": {
		"name": "FindSQLite3",
		"description": "SQLite ライブラリ (v3) の検索"
	},
	"FindSquish": {
		"name": "FindSquish",
		"description": "-- 一般的な使用"
	},
	"FindSubversion": {
		"name": "FindSubversion",
		"description": "サブバージョン作業コピーから情報を抽出する"
	},
	"FindSWIG": {
		"name": "FindSWIG",
		"description": "Simplified Wrapper and Interface Generator (SWIG) 実行可能ファイルを検索します。"
	},
	"FindTCL": {
		"name": "FindTCL",
		"description": "TK_INTERNAL_PATH は削除されました。"
	},
	"FindTclsh": {
		"name": "FindTclsh",
		"description": "tclsh を検索する"
	},
	"FindTclStub": {
		"name": "FindTclStub",
		"description": "TCL_STUB_LIBRARY_DEBUG と TK_STUB_LIBRARY_DEBUG が削除されました。"
	},
	"FindThreads": {
		"name": "FindThreads",
		"description": "このモジュールは、システムのスレッド ライブラリを決定します。"
	},
	"FindTIFF": {
		"name": "FindTIFF",
		"description": "TIFF ライブラリ (libtiff、https://libtiff.gitlab.io/libtiff/) を検索します。"
	},
	"FindUnixCommands": {
		"name": "FindUnixCommands",
		"description": "Cygwin のコマンドを含む Unix コマンドを検索する"
	},
	"FindVTK": {
		"name": "FindVTK",
		"description": "このモジュールはもう存在しません。"
	},
	"FindVulkan": {
		"name": "FindVulkan",
		"description": "Vulkan は、オーバーヘッドの少ないクロスプラットフォームの 3D グラフィックスおよびコンピューティング API です。"
	},
	"FindWget": {
		"name": "FindWget",
		"description": "wget を検索する"
	},
	"FindWish": {
		"name": "FindWish",
		"description": "欲しい物リストのインストールを検索する"
	},
	"FindwxWidgets": {
		"name": "FindwxWidgets",
		"description": "wxWidgets (別名、wxWindows) のインストールを検索します。"
	},
	"FindwxWindows": {
		"name": "FindwxWindows",
		"description": "wxWindows (wxWidgets) のインストールを検索する"
	},
	"FindX11": {
		"name": "FindX11",
		"description": "X11 インストールを検索する"
	},
	"FindXalanC": {
		"name": "FindXalanC",
		"description": "Apache Xalan-C++ XSL 変換プロセッサのヘッダーとライブラリを検索します。"
	},
	"FindXCTest": {
		"name": "FindXCTest",
		"description": "XCTest バンドルの作成と実行に役立つ関数。"
	},
	"FindXercesC": {
		"name": "FindXercesC",
		"description": "XML パーサーのヘッダーとライブラリを検証する Apache Xerces-C++ を検索します。"
	},
	"FindXMLRPC": {
		"name": "FindXMLRPC",
		"description": "xmlrpc を検索する"
	},
	"FindZLIB": {
		"name": "FindZLIB",
		"description": "ネイティブ ZLIB インクルードとライブラリを検索します。"
	},
	"FortranCInterface": {
		"name": "FortranCInterface",
		"description": "Fortran/C インターフェイスの検出"
	},
	"GenerateExportHeader": {
		"name": "GenerateExportHeader",
		"description": "ライブラリのエクスポート マクロを生成するための関数"
	},
	"GetPrerequisites": {
		"name": "GetPrerequisites",
		"description": "実行可能ファイルの前提条件を分析および一覧表示する関数。"
	},
	"GNUInstallDirs": {
		"name": "GNUInstallDirs",
		"description": "GNU 標準インストール ディレクトリを定義する"
	},
	"GoogleTest": {
		"name": "GoogleTest",
		"description": "このモジュールでは、Google Test インフラストラクチャの使用に役立つ関数を定義します。テストを追加するための 2 つのメカニズムが用意されています。gtest_add_tests は、もともと find_package(GTest) を介して、しばらくの間使用されています。gtest_discover_tests は CMake 3.10 で導入されました。"
	},
	"InstallRequiredSystemLibraries": {
		"name": "InstallRequiredSystemLibraries",
		"description": "コンパイラが提供するシステム ランタイム ライブラリを検索し、それらにインストール規則を追加するには、このモジュールを含めます。モジュールを含めて動作を調整する前に、いくつかの省略可能な変数を設定できます。"
	},
	"MacroAddFileDependencies": {
		"name": "MacroAddFileDependencies",
		"description": "新しいコードではこのコマンドを使用しないでください。これは単なるラッパーです。"
	},
	"ProcessorCount": {
		"name": "ProcessorCount",
		"description": "ProcessorCount(var)"
	},
	"SelectLibraryConfigurations": {
		"name": "SelectLibraryConfigurations",
		"description": "このマクロは、引数としてライブラリのベース名を受け取り、変数に適切な値を選択します"
	},
	"SquishTestScript": {
		"name": "SquishTestScript",
		"description": "このスクリプトは、Squish を使用して GUI テストを起動します。スクリプトを直接呼び出すべきではありません。代わりに、FindSquish.cmake で定義されている SQUISH_ADD_TEST マクロを使用してアクセスする必要があります。"
	},
	"TestBigEndian": {
		"name": "TestBigEndian",
		"description": "ターゲット アーキテクチャがビッグ エンディアンかリトル エンディアンかを確認します。"
	},
	"TestCXXAcceptsFlag": {
		"name": "TestCXXAcceptsFlag",
		"description": "CXX コンパイラがフラグを受け入れるかどうかを確認します。"
	},
	"TestForANSIForScope": {
		"name": "TestForANSIForScope",
		"description": "ANSI でスコープのサポートを確認する"
	},
	"TestForANSIStreamHeaders": {
		"name": "TestForANSIStreamHeaders",
		"description": "ANSI ストリーム ヘッダー iostream などのコンパイラ サポートをテストします。"
	},
	"TestForSSTREAM": {
		"name": "TestForSSTREAM",
		"description": "ANSI sstream ヘッダーのコンパイラ サポートのテスト"
	},
	"TestForSTDNamespace": {
		"name": "TestForSTDNamespace",
		"description": "std:: 名前空間のサポートのテスト"
	},
	"UseEcos": {
		"name": "UseEcos",
		"description": "このモジュールでは、eCos アプリケーションをビルドするために必要な変数とマクロを定義します。"
	},
	"UseJava": {
		"name": "UseJava",
		"description": "このファイルは Java のサポートを提供します。FindJava は既に読み込まれていると見なされます。CMake プロジェクトに Java を読み込む方法については、「FindJava」を参照してください。"
	},
	"UseJavaClassFilelist": {
		"name": "UseJavaClassFilelist",
		"description": "このモジュールは以前は誤って文書化されており、プロジェクト コードによる直接インクルードを意図したことはありませんでした。:module:`UseJava` モジュールを参照してください。"
	},
	"UseJavaSymlinks": {
		"name": "UseJavaSymlinks",
		"description": "このモジュールは以前は誤って文書化されており、プロジェクト コードによる直接インクルードを意図したことはありませんでした。:module:`UseJava` モジュールを参照してください。"
	},
	"UsePkgConfig": {
		"name": "UsePkgConfig",
		"description": "CMake 用の古い pkg-config モジュールでは、代わりに FindPkgConfig を使用してください。"
	},
	"UseSWIG": {
		"name": "UseSWIG",
		"description": "このファイルは、SWIG のサポートを提供します。FindSWIG モジュールが既に読み込まれているものと想定されます。"
	},
	"UsewxWidgets": {
		"name": "UsewxWidgets",
		"description": "利便性には、wxWidgets ライブラリの使用が含まれます。"
	},
	"Use_wxWindows": {
		"name": "Use_wxWindows",
		"description": "この利便性には、wxWindows がインストールされているかどうかを検出し、適切な libs、incdirs、フラグなどを設定します。作成者 Jan Woetzel <jw -at- mip.informatik.uni-kiel.de> (07/2003)"
	},
	"WriteBasicConfigVersionFile": {
		"name": "WriteBasicConfigVersionFile",
		"description": "バージョン 3.0 以降では非推奨: モジュール CMakePackageConfigHelpers の同じコマンド write_basic_package_version_file() を使用します。"
	},
	"WriteCompilerDetectionHeader": {
		"name": "WriteCompilerDetectionHeader",
		"description": "このモジュールは、関数 write_compiler_detection_header() を提供します。"
	}
}