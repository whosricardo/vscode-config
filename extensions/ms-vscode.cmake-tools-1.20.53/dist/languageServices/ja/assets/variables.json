{
	"ANDROID": {
		"name": "ANDROID",
		"description": "ターゲット システム (CMAKE_SYSTEM_NAME) が Android である場合は 1 に設定します。"
	},
	"APPLE": {
		"name": "APPLE",
		"description": "ターゲット システムが Apple プラットフォーム (macOS、iOS、tvOS、visionOS、watchOS) である場合は、true に設定します。"
	},
	"BORLAND": {
		"name": "BORLAND",
		"description": "Borland コンパイラが使用されている場合は true です。"
	},
	"BSD": {
		"name": "BSD",
		"description": "ターゲット システムが BSD の場合は文字列値に設定します。この値は、DragonFlyBSD、FreeBSD、OpenBSD、または NetBSD のいずれかになります。"
	},
	"BUILD_SHARED_LIBS": {
		"name": "BUILD_SHARED_LIBS",
		"description": "明示的なライブラリの種類を指定せずに呼び出された場合は、STATIC ライブラリではなく SHARED ライブラリを既定にするように add_library に指示します。"
	},
	"CACHE": {
		"name": "CACHE",
		"description": "キャッシュ変数を読み取る演算子。"
	},
	"CMAKE_ABSOLUTE_DESTINATION_FILES": {
		"name": "CMAKE_ABSOLUTE_DESTINATION_FILES",
		"description": "ABSOLUTE DESTINATION パスを使用してインストールされたファイルのリストです。"
	},
	"CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY": {
		"name": "CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY",
		"description": "add_custom_command で DEPENDS_EXPLICIT_ONLY オプションを既定で有効にするかどうかを指定します。"
	},
	"CMAKE_ADSP_ROOT": {
		"name": "CMAKE_ADSP_ROOT",
		"description": ":ref:`Cross Compiling for ADSP SHARC/Blackfin` の場合、この変数は最新の CCES または VDSP++ インストールへの絶対パスを保持します。ディレクトリには、cc21k.exe コンパイラと ccblkfn.exe コンパイラが含まれている必要があります。これは、CCES または VDSP++ の既定のインストールが見つかった場合に自動的に設定されます。"
	},
	"CMAKE_AIX_EXPORT_ALL_SYMBOLS": {
		"name": "CMAKE_AIX_EXPORT_ALL_SYMBOLS",
		"description": "AIX_EXPORT_ALL_SYMBOLS ターゲット プロパティの既定値。この変数は、ターゲットの作成時に各ターゲットのプロパティを初期化するために使用されます。"
	},
	"CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": {
		"name": "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS",
		"description": "ANDROID_ANT_ADDITIONAL_OPTIONS ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_API": {
		"name": "CMAKE_ANDROID_API",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、ANDROID_API ターゲット プロパティに既定値を指定するためにこの変数を設定できます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_API_MIN": {
		"name": "CMAKE_ANDROID_API_MIN",
		"description": "ANDROID_API_MIN ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_ARCH": {
		"name": "CMAKE_ANDROID_ARCH",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、ANDROID_ARCH ターゲット プロパティに既定値を指定するためにこの変数を設定できます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_ARCH_ABI": {
		"name": "CMAKE_ANDROID_ARCH_ABI",
		"description": "Android 用のクロス コンパイルを実行する場合、この変数は、使用するターゲット アーキテクチャと ABI を指定します。有効な値は次のとおりです。"
	},
	"CMAKE_ANDROID_ARM_MODE": {
		"name": "CMAKE_ANDROID_ARM_MODE",
		"description": "Android 用のクロス コンパイル時に、CMAKE_ANDROID_ARCH_ABI が armeabi アーキテクチャのいずれかに設定されている場合に、32 ビット ARM プロセッサ (-marm) をターゲットにするには、CMAKE_ANDROID_ARM_MODE を ON に設定します。それ以外の場合、既定により 16 ビット Thumb プロセッサ (-mthumb) がターゲットになります。"
	},
	"CMAKE_ANDROID_ARM_NEON": {
		"name": "CMAKE_ANDROID_ARM_NEON",
		"description": "Android 用のクロス コンパイル時に、CMAKE_ANDROID_ARCH_ABI が armeabi-v7a に設定されている場合、ARM NEON デバイスをターゲットにするには、CMAKE_ANDROID_ARM_NEON を ON に設定します。"
	},
	"CMAKE_ANDROID_ASSETS_DIRECTORIES": {
		"name": "CMAKE_ANDROID_ASSETS_DIRECTORIES",
		"description": "ANDROID_ASSETS_DIRECTORIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_EXCEPTIONS": {
		"name": "CMAKE_ANDROID_EXCEPTIONS",
		"description": "NDK を使用して Android 用のクロス コンパイルを行う場合、例外を有効にするかどうかを指定するためにこの変数を設定できます。"
	},
	"CMAKE_ANDROID_GUI": {
		"name": "CMAKE_ANDROID_GUI",
		"description": "実行可能ファイルの ANDROID_GUI ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_JAR_DEPENDENCIES": {
		"name": "CMAKE_ANDROID_JAR_DEPENDENCIES",
		"description": "ANDROID_JAR_DEPENDENCIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_JAR_DIRECTORIES": {
		"name": "CMAKE_ANDROID_JAR_DIRECTORIES",
		"description": "ANDROID_JAR_DIRECTORIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_JAVA_SOURCE_DIR": {
		"name": "CMAKE_ANDROID_JAVA_SOURCE_DIR",
		"description": "ANDROID_JAVA_SOURCE_DIR ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": {
		"name": "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES",
		"description": "ANDROID_NATIVE_LIB_DEPENDENCIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": {
		"name": "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES",
		"description": "ANDROID_NATIVE_LIB_DIRECTORIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_NDK": {
		"name": "CMAKE_ANDROID_NDK",
		"description": "NDK を使用して Android 用のクロス コンパイルを実行する場合、この変数は NDK のルート ディレクトリへの絶対パスを保持します。このディレクトリには、android-<api> ディレクトリを保持しているプラットフォーム サブディレクトリが含まれている必要があります。"
	},
	"CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": {
		"name": "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS",
		"description": "NDK を使用して Android 用のクロス コンパイルを実行する場合、統合されたヘッダーではなく、非推奨の API レベルごとのヘッダーを使用するかどうかを指定するためにこの変数を設定できます。"
	},
	"CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": {
		"name": "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG",
		"description": "NDK を使用して Android 用のクロス コンパイルを実行する場合、この変数は、ホスト上で実行する事前構築済みのツールチェーンへのパスを作成するために、NDK の \"ホスト タグ\" を提供します。"
	},
	"CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": {
		"name": "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION",
		"description": "NDK を使用して Android 用のクロス コンパイルを実行する場合、コンパイラとして使用するツールチェーンのバージョンを指定するためにこの変数を設定できます。"
	},
	"CMAKE_ANDROID_NDK_VERSION": {
		"name": "CMAKE_ANDROID_NDK_VERSION",
		"description": "NDK を使用して Android 用のクロス コンパイルを行うときに、Android NDK バージョン 11 以降を使用している場合は、NDK のバージョン番号を報告するために CMake によってこの変数が提供されます。"
	},
	"CMAKE_ANDROID_PROCESS_MAX": {
		"name": "CMAKE_ANDROID_PROCESS_MAX",
		"description": "ANDROID_PROCESS_MAX ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_PROGUARD": {
		"name": "CMAKE_ANDROID_PROGUARD",
		"description": "ANDROID_PROGUARD ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_PROGUARD_CONFIG_PATH": {
		"name": "CMAKE_ANDROID_PROGUARD_CONFIG_PATH",
		"description": "ANDROID_PROGUARD_CONFIG_PATH ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_RTTI": {
		"name": "CMAKE_ANDROID_RTTI",
		"description": "NDK を使用して Android 用のクロス コンパイルを行う場合、RTTI を有効にするかどうかを指定するためにこの変数を設定できます。"
	},
	"CMAKE_ANDROID_SECURE_PROPS_PATH": {
		"name": "CMAKE_ANDROID_SECURE_PROPS_PATH",
		"description": "ANDROID_SECURE_PROPS_PATH ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_SKIP_ANT_STEP": {
		"name": "CMAKE_ANDROID_SKIP_ANT_STEP",
		"description": "ANDROID_SKIP_ANT_STEP ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_ANDROID_STANDALONE_TOOLCHAIN": {
		"name": "CMAKE_ANDROID_STANDALONE_TOOLCHAIN",
		"description": "スタンドアロンのツールチェーンを使用して Android 用のクロス コンパイルを実行する場合、この変数はツールチェーンのルート ディレクトリへの絶対パスを保持します。指定されたディレクトリには、sysroot サブディレクトリが含まれている必要があります。"
	},
	"CMAKE_ANDROID_STL_TYPE": {
		"name": "CMAKE_ANDROID_STL_TYPE",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、ANDROID_STL_TYPE ターゲット プロパティに既定値を指定するためにこの変数を設定できます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_APPBUNDLE_PATH": {
		"name": "CMAKE_APPBUNDLE_PATH",
		"description": "find_program および find_package のコマンドで使用される、macOS アプリケーション バンドルの検索パスを指定するディレクトリをセミコロンで区切った一覧。"
	},
	"CMAKE_APPLE_SILICON_PROCESSOR": {
		"name": "CMAKE_APPLE_SILICON_PROCESSOR",
		"description": "macOS を実行している Apple シリコン ホストでは、CMAKE_HOST_SYSTEM_PROCESSOR のために使用するアーキテクチャを CMake に対して指定するために、この変数を設定してください。値は arm64 または x86_64 である必要があります。"
	},
	"CMAKE_AR": {
		"name": "CMAKE_AR",
		"description": "スタティック ライブラリ用のアーカイブ ツールの名前。"
	},
	"CMAKE_ARCHIVE_OUTPUT_DIRECTORY": {
		"name": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY",
		"description": "ビルド時にすべての ARCHIVE ターゲット ファイルを配置する場所。"
	},
	"CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "特定の構成用にビルドするときにすべての ARCHIVE ターゲット ファイルを配置する場所。"
	},
	"CMAKE_ARGC": {
		"name": "CMAKE_ARGC",
		"description": "スクリプト モードで CMake に渡されたコマンド ライン引数の数。"
	},
	"CMAKE_ARGV0": {
		"name": "CMAKE_ARGV0",
		"description": "スクリプト モードで CMake に渡されたコマンド ライン引数。"
	},
	"CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": {
		"name": "CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG",
		"description": "この変数は、すべてのターゲットの作成時にそれらに対し AUTOGEN_BETTER_GRAPH_MULTI_CONFIG プロパティを初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX": {
		"name": "CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX",
		"description": "コマンド ラインにすべての引数を渡すのではなく、Windows での応答ファイルの使用をトリガーする autogen ターゲット (moc または uic など) のコマンド ラインの長さの制限。"
	},
	"CMAKE_AUTOGEN_ORIGIN_DEPENDS": {
		"name": "CMAKE_AUTOGEN_ORIGIN_DEPENDS",
		"description": "元のターゲットの依存関係を対応する <ORIGIN>_autogen ターゲットに転送するためのスイッチ。"
	},
	"CMAKE_AUTOGEN_PARALLEL": {
		"name": "CMAKE_AUTOGEN_PARALLEL",
		"description": "AUTOMOC と AUTOUIC を使用しているときに開始する並列の moc または uic プロセスの数です。"
	},
	"CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE": {
		"name": "CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE",
		"description": "この変数は、AUTOGEN_USE_SYSTEM_INCLUDE プロパティを作成時にすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_AUTOGEN_VERBOSE": {
		"name": "CMAKE_AUTOGEN_VERBOSE",
		"description": "AUTOMOC、AUTOUIC、AUTORCC の詳細レベルを設定します。正の整数値またはブール値 true を指定すると、AUTO* ジェネレーターから追加の処理情報が出力されます。"
	},
	"CMAKE_AUTOMOC": {
		"name": "CMAKE_AUTOMOC",
		"description": "Qt ターゲットに対して自動的に moc を処理するかどうか。"
	},
	"CMAKE_AUTOMOC_COMPILER_PREDEFINES": {
		"name": "CMAKE_AUTOMOC_COMPILER_PREDEFINES",
		"description": "この変数は、すべてのターゲットで AUTOMOC_COMPILER_PREDEFINES プロパティを初期化するために使用します。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_AUTOMOC_DEPEND_FILTERS": {
		"name": "CMAKE_AUTOMOC_DEPEND_FILTERS",
		"description": "moc ファイルに対する追加の依存関係としてソース コードからファイル名を抽出するために CMAKE_AUTOMOC によって使用されるフィルター定義です。"
	},
	"CMAKE_AUTOMOC_EXECUTABLE": {
		"name": "CMAKE_AUTOMOC_EXECUTABLE",
		"description": "この変数は、AUTOMOC_EXECUTABLE プロパティをすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_AUTOMOC_MACRO_NAMES": {
		"name": "CMAKE_AUTOMOC_MACRO_NAMES",
		"description": "C++ ファイルを moc によって処理する必要があるかどうかを判断するために CMAKE_AUTOMOC によって使用される、マクロ名をセミコロンで区切った一覧。"
	},
	"CMAKE_AUTOMOC_MOC_OPTIONS": {
		"name": "CMAKE_AUTOMOC_MOC_OPTIONS",
		"description": "CMAKE_AUTOMOC 使用時の moc に対する追加のオプション。"
	},
	"CMAKE_AUTOMOC_PATH_PREFIX": {
		"name": "CMAKE_AUTOMOC_PATH_PREFIX",
		"description": "AUTOMOC が有効にされた Qt ターゲットで moc のために-p パス プレフィックス オプションを生成するかどうか。"
	},
	"CMAKE_AUTOMOC_RELAXED_MODE": {
		"name": "CMAKE_AUTOMOC_RELAXED_MODE",
		"description": "automoc モードを、厳密なものと厳密でないものとで切り替えます。"
	},
	"CMAKE_AUTORCC": {
		"name": "CMAKE_AUTORCC",
		"description": "Qt ターゲットに対して自動的に rcc を処理するかどうか。"
	},
	"CMAKE_AUTORCC_EXECUTABLE": {
		"name": "CMAKE_AUTORCC_EXECUTABLE",
		"description": "この変数は、AUTORCC_EXECUTABLE プロパティをすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_AUTORCC_OPTIONS": {
		"name": "CMAKE_AUTORCC_OPTIONS",
		"description": "CMAKE_AUTORCC 使用時の rcc に対する追加のオプション。"
	},
	"CMAKE_AUTOUIC": {
		"name": "CMAKE_AUTOUIC",
		"description": "Qt ターゲットに対して自動的に uic を処理するかどうか。"
	},
	"CMAKE_AUTOUIC_EXECUTABLE": {
		"name": "CMAKE_AUTOUIC_EXECUTABLE",
		"description": "この変数は、AUTOUIC_EXECUTABLE プロパティをすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_AUTOUIC_OPTIONS": {
		"name": "CMAKE_AUTOUIC_OPTIONS",
		"description": "CMAKE_AUTOUIC 使用時の uic に対する追加のオプション。"
	},
	"CMAKE_AUTOUIC_SEARCH_PATHS": {
		"name": "CMAKE_AUTOUIC_SEARCH_PATHS",
		"description": "含まれる .ui ファイルを検索するために CMAKE_AUTOUIC によって使用される検索パスの一覧。"
	},
	"CMAKE_BACKWARDS_COMPATIBILITY": {
		"name": "CMAKE_BACKWARDS_COMPATIBILITY",
		"description": "非推奨。CMake ポリシー CMP0001 のドキュメントをご覧ください。"
	},
	"CMAKE_BINARY_DIR": {
		"name": "CMAKE_BINARY_DIR",
		"description": "ビルド ツリーの最上位レベルのパス。"
	},
	"CMAKE_BUILD_RPATH": {
		"name": "CMAKE_BUILD_RPATH",
		"description": "ビルド ツリー内でリンクされるバイナリに追加するランタイム パス (RPATH) エントリを指定する、セミコロンで区切った一覧 (これをサポートするプラットフォームの場合)。これらのエントリは、インストール ツリー内のバイナリには使用されません。CMAKE_INSTALL_RPATH 変数も参照してください。"
	},
	"CMAKE_BUILD_RPATH_USE_ORIGIN": {
		"name": "CMAKE_BUILD_RPATH_USE_ORIGIN",
		"description": "ビルド RPATH に相対パスを使用するかどうか。"
	},
	"CMAKE_BUILD_TOOL": {
		"name": "CMAKE_BUILD_TOOL",
		"description": "この変数は下位互換性の目的でのみ存在します。CMAKE_MAKE_PROGRAM と同じ値が含まれています。代わりに、その変数を使用してください。"
	},
	"CMAKE_BUILD_TYPE": {
		"name": "CMAKE_BUILD_TYPE",
		"description": "単一構成ジェネレーター (Makefile Generators や Ninja など) のビルドの種類を指定します。一般的な値には、Debug、Release、RelWithDebInfo、MinSizeRel などがありますが、カスタム ビルドの種類を定義することもできます。"
	},
	"CMAKE_BUILD_WITH_INSTALL_NAME_DIR": {
		"name": "CMAKE_BUILD_WITH_INSTALL_NAME_DIR",
		"description": "ビルド ツリー内のターゲットで INSTALL_NAME_DIR を使用するかどうか。"
	},
	"CMAKE_BUILD_WITH_INSTALL_RPATH": {
		"name": "CMAKE_BUILD_WITH_INSTALL_RPATH",
		"description": "RPATH のインストール パスを使用します。"
	},
	"CMAKE_CACHEFILE_DIR": {
		"name": "CMAKE_CACHEFILE_DIR",
		"description": "この変数は CMake によって内部的に使用され、ビルド ツリーの最初の構成中に設定されることはありません。設定された場合、CMAKE_BINARY_DIR と同じ値になります。代わりにこの変数を使用してください。"
	},
	"CMAKE_CACHE_MAJOR_VERSION": {
		"name": "CMAKE_CACHE_MAJOR_VERSION",
		"description": "CMakeCache.txt ファイルを作成するために使用した CMake のメジャー バージョン"
	},
	"CMAKE_CACHE_MINOR_VERSION": {
		"name": "CMAKE_CACHE_MINOR_VERSION",
		"description": "CMakeCache.txt ファイルを作成するために使用した CMake のマイナー バージョン"
	},
	"CMAKE_CACHE_PATCH_VERSION": {
		"name": "CMAKE_CACHE_PATCH_VERSION",
		"description": "CMakeCache.txt ファイルを作成するために使用した CMake のパッチ バージョン"
	},
	"CMAKE_CFG_INTDIR": {
		"name": "CMAKE_CFG_INTDIR",
		"description": "構成ごとの出力サブディレクトリに対するビルド時参照。"
	},
	"CMAKE_CLANG_VFS_OVERLAY": {
		"name": "CMAKE_CLANG_VFS_OVERLAY",
		"description": "clang-cl を使用して Windows 用のクロス コンパイルを行う場合に、この変数は、clang 仮想ファイル システム yaml ファイルを指す絶対パスにすることができます。これにより、clang-cl では、大文字と小文字を区別するファイル システム上で Windows ヘッダー名を解決できるようになります。"
	},
	"CMAKE_CL_64": {
		"name": "CMAKE_CL_64",
		"description": "お勧めしません。代わりに CMAKE_SIZEOF_VOID_P を使用してください。"
	},
	"CMAKE_CODEBLOCKS_COMPILER_ID": {
		"name": "CMAKE_CODEBLOCKS_COMPILER_ID",
		"description": "生成された CodeBlocks プロジェクト ファイル内のコンパイラ ID を変更します。"
	},
	"CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": {
		"name": "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES",
		"description": "CodeBlocks ジェネレーターがプロジェクト ファイルを作成する方法を変更します。"
	},
	"CMAKE_CODELITE_USE_TARGETS": {
		"name": "CMAKE_CODELITE_USE_TARGETS",
		"description": "CodeLite ジェネレーターがプロジェクト ファイルを作成する方法を変更します。"
	},
	"CMAKE_COLOR_DIAGNOSTICS": {
		"name": "CMAKE_COLOR_DIAGNOSTICS",
		"description": "全体的な色診断を有効にします。"
	},
	"CMAKE_COLOR_MAKEFILE": {
		"name": "CMAKE_COLOR_MAKEFILE",
		"description": "Makefile ジェネレーターの使用時にカラー出力を有効にします。"
	},
	"CMAKE_COMMAND": {
		"name": "CMAKE_COMMAND",
		"description": "cmake 実行可能ファイルの完全なパス。"
	},
	"CMAKE_COMPILER_2005": {
		"name": "CMAKE_COMPILER_2005",
		"description": "Microsoft の Visual Studio 2005 コンパイラの使用"
	},
	"CMAKE_COMPILER_IS_GNUCC": {
		"name": "CMAKE_COMPILER_IS_GNUCC",
		"description": "C コンパイラが GNU の場合、true。"
	},
	"CMAKE_COMPILER_IS_GNUCXX": {
		"name": "CMAKE_COMPILER_IS_GNUCXX",
		"description": "C++ (CXX) コンパイラが GNU の場合、true。"
	},
	"CMAKE_COMPILER_IS_GNUG77": {
		"name": "CMAKE_COMPILER_IS_GNUG77",
		"description": "Fortran コンパイラが GNU の場合、true。"
	},
	"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": {
		"name": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY",
		"description": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの出力ディレクトリ。"
	},
	"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの、構成ごとの出力ディレクトリ。"
	},
	"CMAKE_COMPILE_WARNING_AS_ERROR": {
		"name": "CMAKE_COMPILE_WARNING_AS_ERROR",
		"description": "コンパイル時の警告をエラーとして扱うかどうかを指定します。"
	},
	"CMAKE_CONFIGURATION_TYPES": {
		"name": "CMAKE_CONFIGURATION_TYPES",
		"description": "セミコロン区切りリストとしてのマルチ構成ジェネレーター (Visual Studio、Xcode、Ninja Multi-Config など) で使用可能なビルドの種類 (構成) を指定します。一般的なエントリには、Debug、Release、RelWithDebInfo、MinSizeRel などがありますが、カスタム ビルドの種類を定義することもできます。"
	},
	"CMAKE_<CONFIG>_POSTFIX": {
		"name": "CMAKE_<CONFIG>_POSTFIX",
		"description": "構成 <CONFIG> の下にあるライブラリのファイル名の既定接尾語。"
	},
	"CMAKE_CPACK_COMMAND": {
		"name": "CMAKE_CPACK_COMMAND",
		"description": "CMake と一緒にインストールされた cpack コマンドへの完全なパス。"
	},
	"CMAKE_CROSSCOMPILING": {
		"name": "CMAKE_CROSSCOMPILING",
		"description": "この変数は、クロス コンパイルであるかどうかを示すために CMake によって設定されますが、以下で説明する制限事項に注意してください。"
	},
	"CMAKE_CROSSCOMPILING_EMULATOR": {
		"name": "CMAKE_CROSSCOMPILING_EMULATOR",
		"description": "この変数は、CMAKE_CROSSCOMPILING がオンの場合にのみ使用されます。ターゲット システム用にビルドされた実行可能ファイルを実行できる、ホスト システム上のコマンドを指す必要があります。"
	},
	"CMAKE_CROSS_CONFIGS": {
		"name": "CMAKE_CROSS_CONFIGS",
		"description": "Ninja マルチ構成ジェネレーターの build-<Config>.ninja ファイルから使用できる構成のセミコロンで区切った一覧を指定します。この変数により、クロス構成モードがアクティブになります。この変数で指定した各構成のターゲットは、任意の build-<Config>.ninja ファイルからビルドできます。カスタム コマンドでは、build-<Config>.ninja にネイティブな構成が使用されます。これを all に設定すると、CMAKE_CONFIGURATION_TYPES のすべての構成がクロス構成になります。これを指定しないか、空にすると、各 build-<Config>.ninja ファイルには、独自の構成のビルド規則のみが含められます。"
	},
	"CMAKE_CTEST_ARGUMENTS": {
		"name": "CMAKE_CTEST_ARGUMENTS",
		"description": "生成されたビルド システムのテスト (または RUN_TESTS) ターゲットを通じてテストを実行するときに ctest に渡すコマンド ライン引数のセミコロンで区切った一覧を設定します。"
	},
	"CMAKE_CTEST_COMMAND": {
		"name": "CMAKE_CTEST_COMMAND",
		"description": "CMake と一緒にインストールされた ctest コマンドへの完全なパス。"
	},
	"CMAKE_CUDA_ARCHITECTURES": {
		"name": "CMAKE_CUDA_ARCHITECTURES",
		"description": "ターゲットの CUDA_ARCHITECTURES プロパティの既定値。"
	},
	"CMAKE_CUDA_COMPILE_FEATURES": {
		"name": "CMAKE_CUDA_COMPILE_FEATURES",
		"description": "CUDA コンパイラに既知の機能の一覧"
	},
	"CMAKE_CUDA_EXTENSIONS": {
		"name": "CMAKE_CUDA_EXTENSIONS",
		"description": "ターゲットの作成時に設定する場合の、CUDA_EXTENSIONS ターゲット プロパティの既定値。"
	},
	"CMAKE_CUDA_HOST_COMPILER": {
		"name": "CMAKE_CUDA_HOST_COMPILER",
		"description": "これは、より一般的な CMAKE_<LANG>_HOST_COMPILER 変数の元の CUDA 固有の名前です。詳細については、後者を参照してください。"
	},
	"CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS": {
		"name": "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS",
		"description": "定義されている場合、CUDA_RESOLVE_DEVICE_SYMBOLS ターゲット プロパティ向けの既定値。既定では、この変数は定義されていません。"
	},
	"CMAKE_CUDA_RUNTIME_LIBRARY": {
		"name": "CMAKE_CUDA_RUNTIME_LIBRARY",
		"description": "CUDA のコンパイルとリンク時に使用するための CUDA ランタイム ライブラリを選択します。この変数は、ターゲットの作成時にすべてのターゲットの CUDA_RUNTIME_LIBRARY プロパティを初期化するために使用されます。"
	},
	"CMAKE_CUDA_SEPARABLE_COMPILATION": {
		"name": "CMAKE_CUDA_SEPARABLE_COMPILATION",
		"description": "CUDA_SEPARABLE_COMPILATION ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。"
	},
	"CMAKE_CUDA_STANDARD": {
		"name": "CMAKE_CUDA_STANDARD",
		"description": "ターゲットの作成時に設定する場合の、CUDA_STANDARD ターゲット プロパティの既定値。"
	},
	"CMAKE_CUDA_STANDARD_REQUIRED": {
		"name": "CMAKE_CUDA_STANDARD_REQUIRED",
		"description": "ターゲットの作成時に設定する場合の、CUDA_STANDARD_REQUIRED ターゲット プロパティの既定値。"
	},
	"CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES",
		"description": "CUDA 言語が有効になっているとき、これにより、CUDA ツールキットから提供される include ディレクトリのセミコロンで区切った一覧が提供されます。この値は、C++ ソース ファイルに CUDA ヘッダーをインクルードするために役立つ場合があります。"
	},
	"CMAKE_CURRENT_BINARY_DIR": {
		"name": "CMAKE_CURRENT_BINARY_DIR",
		"description": "現在処理されている binary ディレクトリへのパス。"
	},
	"CMAKE_CURRENT_FUNCTION": {
		"name": "CMAKE_CURRENT_FUNCTION",
		"description": "関数内でコードを実行するとき、この変数には現在の関数の名前が含まれています。これは、診断やデバッグのためのメッセージに役立つ場合があります。"
	},
	"CMAKE_CURRENT_FUNCTION_LIST_DIR": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_DIR",
		"description": "関数内でコードを実行するとき、この変数には、現在の関数を定義したリスト ファイルの完全なディレクトリが含まれています。"
	},
	"CMAKE_CURRENT_FUNCTION_LIST_FILE": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_FILE",
		"description": "関数内でコードを実行するとき、この変数には、現在の関数を定義したリスト ファイルへの完全なパスが含まれています。"
	},
	"CMAKE_CURRENT_FUNCTION_LIST_LINE": {
		"name": "CMAKE_CURRENT_FUNCTION_LIST_LINE",
		"description": "関数内でコードを実行するとき、この変数には、現在の関数が定義されたリスト ファイル内の行番号が含まれています。"
	},
	"CMAKE_CURRENT_LIST_DIR": {
		"name": "CMAKE_CURRENT_LIST_DIR",
		"description": "現在処理されているリスト ファイルの完全なディレクトリ。"
	},
	"CMAKE_CURRENT_LIST_FILE": {
		"name": "CMAKE_CURRENT_LIST_FILE",
		"description": "現在処理されているリスト ファイルへの完全なパス。"
	},
	"CMAKE_CURRENT_LIST_LINE": {
		"name": "CMAKE_CURRENT_LIST_LINE",
		"description": "現在処理されているファイルの行番号。"
	},
	"CMAKE_CURRENT_SOURCE_DIR": {
		"name": "CMAKE_CURRENT_SOURCE_DIR",
		"description": "現在処理されているソース ディレクトリへのパス。"
	},
	"CMAKE_CXX_COMPILER_IMPORT_STD": {
		"name": "CMAKE_CXX_COMPILER_IMPORT_STD",
		"description": "現在の C++ ツールチェーンに対してインポート std サポートが存在する C++ 標準レベルの一覧。C++<NN> のサポートは、if コマンドで <NN> IN_LIST CMAKE_CXX_COMPILER_IMPORT_STD 述語を使用して検出できます。"
	},
	"CMAKE_CXX_COMPILE_FEATURES": {
		"name": "CMAKE_CXX_COMPILE_FEATURES",
		"description": "C++ コンパイラに既知の機能の一覧"
	},
	"CMAKE_CXX_EXTENSIONS": {
		"name": "CMAKE_CXX_EXTENSIONS",
		"description": "ターゲットの作成時に設定する場合の、CXX_EXTENSIONS ターゲット プロパティの既定値。"
	},
	"CMAKE_CXX_MODULE_STD": {
		"name": "CMAKE_CXX_MODULE_STD",
		"description": "少なくとも cxx_std_23 を持つターゲットにユーティリティ ターゲットを依存関係として追加するかどうか。"
	},
	"CMAKE_CXX_SCAN_FOR_MODULES": {
		"name": "CMAKE_CXX_SCAN_FOR_MODULES",
		"description": "モジュールの依存関係について C++ ソース ファイルをスキャンするかどうか。"
	},
	"CMAKE_CXX_STANDARD": {
		"name": "CMAKE_CXX_STANDARD",
		"description": "ターゲットの作成時に設定する場合の、CXX_STANDARD ターゲット プロパティの既定値。"
	},
	"CMAKE_CXX_STANDARD_REQUIRED": {
		"name": "CMAKE_CXX_STANDARD_REQUIRED",
		"description": "ターゲットの作成時に設定する場合の、CXX_STANDARD_REQUIRED ターゲット プロパティの既定値。"
	},
	"CMAKE_C_COMPILE_FEATURES": {
		"name": "CMAKE_C_COMPILE_FEATURES",
		"description": "C コンパイラに対して既知の機能の一覧"
	},
	"CMAKE_C_EXTENSIONS": {
		"name": "CMAKE_C_EXTENSIONS",
		"description": "ターゲットの作成時に設定する場合の、C_EXTENSIONS ターゲット プロパティの既定値。"
	},
	"CMAKE_C_STANDARD": {
		"name": "CMAKE_C_STANDARD",
		"description": "ターゲットの作成時に設定する場合の、C_STANDARD ターゲット プロパティの既定値。"
	},
	"CMAKE_C_STANDARD_REQUIRED": {
		"name": "CMAKE_C_STANDARD_REQUIRED",
		"description": "ターゲットの作成時に設定する場合の、C_STANDARD_REQUIRED ターゲット プロパティの既定値。"
	},
	"CMAKE_DEBUG_POSTFIX": {
		"name": "CMAKE_DEBUG_POSTFIX",
		"description": "変数 CMAKE_<CONFIG>_POSTFIXの確認。"
	},
	"CMAKE_DEBUG_TARGET_PROPERTIES": {
		"name": "CMAKE_DEBUG_TARGET_PROPERTIES",
		"description": "ターゲット プロパティの出力のトレースを有効にします。"
	},
	"CMAKE_DEFAULT_BUILD_TYPE": {
		"name": "CMAKE_DEFAULT_BUILD_TYPE",
		"description": "Ninja マルチ構成ジェネレーターの build.ninja ファイル内の既定で使用される構成を指定します。この変数を指定した場合、build.ninja では既定で build-<Config>.ninja からのビルド規則が使用されます。すべてのカスタム コマンドは、この構成で実行されます。この変数を指定しない場合、CMAKE_CONFIGURATION_TYPES の最初の項目が代わりに使用されます。"
	},
	"CMAKE_DEFAULT_CONFIGS": {
		"name": "CMAKE_DEFAULT_CONFIGS",
		"description": "Ninja マルチ構成ジェネレーターで :<Config> サフィックスを指定しない場合に、build.ninja 内のターゲットに対してビルドする構成のセミコロンで区切った一覧を指定します。これを all に設定すると、CMAKE_CROSS_CONFIGS からのすべての構成が使用されます。これを指定しない場合は、既定で CMAKE_DEFAULT_BUILD_TYPE になります。"
	},
	"CMAKE_DEPENDS_IN_PROJECT_ONLY": {
		"name": "CMAKE_DEPENDS_IN_PROJECT_ONLY",
		"description": "ディレクトリで TRUE に設定した場合、Makefile ジェネレーターによって生成されるビルド システムは、ソース ディレクトリまたはバイナリ ディレクトリのどちらかにあるソース ファイルへの依存関係のみを考慮するようセットアップされます。これらのディレクトリ以外のソース ファイルを変更してもリビルドは行われません。"
	},
	"CMAKE_DEPENDS_USE_COMPILER": {
		"name": "CMAKE_DEPENDS_USE_COMPILER",
		"description": "メイクファイル ジェネレーターでは、いくつかのコンパイラで、ソースの依存関係がコンパイラ自体によって生成されるようになりました。この変数を FALSE 値を指定して定義すると、従来の動作 (依存関係の検出のために CMake を使用) を復元することができます。"
	},
	"CMAKE_DIRECTORY_LABELS": {
		"name": "CMAKE_DIRECTORY_LABELS",
		"description": "現在のディレクトリのラベルを指定します。"
	},
	"CMAKE_DISABLE_FIND_PACKAGE_<PackageName>": {
		"name": "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>",
		"description": "find_package 呼び出しを無効にするための変数。"
	},
	"CMAKE_DISABLE_PRECOMPILE_HEADERS": {
		"name": "CMAKE_DISABLE_PRECOMPILE_HEADERS",
		"description": "ターゲットの DISABLE_PRECOMPILE_HEADERS の既定値。"
	},
	"CMAKE_DLL_NAME_WITH_SOVERSION": {
		"name": "CMAKE_DLL_NAME_WITH_SOVERSION",
		"description": "この変数は、WIN32 変数が設定されるときに選択される Windows プラットフォームの共有ライブラリ ターゲットで DLL_NAME_WITH_SOVERSION プロパティを初期化するために使用されます。"
	},
	"CMAKE_DL_LIBS": {
		"name": "CMAKE_DL_LIBS",
		"description": "dlopen と dlclose が含まれるライブラリの名前。"
	},
	"CMAKE_DOTNET_SDK": {
		"name": "CMAKE_DOTNET_SDK",
		"description": "ターゲットの DOTNET_SDK プロパティの既定値。"
	},
	"CMAKE_DOTNET_TARGET_FRAMEWORK": {
		"name": "CMAKE_DOTNET_TARGET_FRAMEWORK",
		"description": "ターゲットの DOTNET_TARGET_FRAMEWORK プロパティの既定値。"
	},
	"CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": "ターゲットの DOTNET_TARGET_FRAMEWORK_VERSION プロパティの既定値。"
	},
	"CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": {
		"name": "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES",
		"description": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。"
	},
	"CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": {
		"name": "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT",
		"description": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。"
	},
	"CMAKE_ECLIPSE_MAKE_ARGUMENTS": {
		"name": "CMAKE_ECLIPSE_MAKE_ARGUMENTS",
		"description": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。"
	},
	"CMAKE_ECLIPSE_RESOURCE_ENCODING": {
		"name": "CMAKE_ECLIPSE_RESOURCE_ENCODING",
		"description": "このキャッシュ変数を使用すると、生成されるプロジェクト ファイル内の指定した値にリソースのエンコードを設定するように、Eclipse CDT4 プロジェクト ジェネレーターに指示できます。値を指定しない場合、エンコードは設定されません。"
	},
	"CMAKE_ECLIPSE_VERSION": {
		"name": "CMAKE_ECLIPSE_VERSION",
		"description": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。"
	},
	"CMAKE_EDIT_COMMAND": {
		"name": "CMAKE_EDIT_COMMAND",
		"description": "cmake-gui または ccmake への完全なパス。追加ジェネレーターを使用しない場合は、メイクファイル ジェネレーターと Ninja ジェネレーターに対してのみ定義されます。"
	},
	"CMAKE_ENABLE_EXPORTS": {
		"name": "CMAKE_ENABLE_EXPORTS",
		"description": "実行可能ファイルから、読み込み可能なモジュールのシンボルをエクスポートするかどうかを指定します。"
	},
	"CMAKE_ERROR_DEPRECATED": {
		"name": "CMAKE_ERROR_DEPRECATED",
		"description": "非推奨の機能に対してエラーを発行するかどうか。"
	},
	"CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "cmake_install.cmake スクリプトに対し、絶対 INSTALL DESTINATION を持つファイルが検出されたらすぐにエラーを出すよう指示します。"
	},
	"CMAKE_EXECUTABLE_ENABLE_EXPORTS": {
		"name": "CMAKE_EXECUTABLE_ENABLE_EXPORTS",
		"description": "実行可能ファイルから、読み込み可能なモジュールのシンボルをエクスポートするかどうかを指定します。"
	},
	"CMAKE_EXECUTABLE_SUFFIX": {
		"name": "CMAKE_EXECUTABLE_SUFFIX",
		"description": "このプラットフォーム上の実行可能ファイルのサフィックス。"
	},
	"CMAKE_EXECUTABLE_SUFFIX_<LANG>": {
		"name": "CMAKE_EXECUTABLE_SUFFIX_<LANG>",
		"description": "実行可能ファイルが存在する場合に、<LANG> コンパイラ ターゲット アーキテクチャに基づき、そのファイル名の末尾に使用するサフィックス。"
	},
	"CMAKE_EXECUTE_PROCESS_COMMAND_ECHO": {
		"name": "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO",
		"description": "この変数を STDERR または STDOUT に設定すると、execute_process 呼び出しに含まれるコマンドが stderr または stdout に出力されます。または、NONE に設定すると、何も出力されません。"
	},
	"CMAKE_EXE_LINKER_FLAGS": {
		"name": "CMAKE_EXE_LINKER_FLAGS",
		"description": "実行可能ファイルの作成に使用するリンカー フラグ。"
	},
	"CMAKE_EXE_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>",
		"description": "実行可能ファイルをリンクするときに使用するフラグ。"
	},
	"CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "ビルド ツリーを初めて構成するときに CMAKE_EXE_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_EXE_LINKER_FLAGS_INIT": {
		"name": "CMAKE_EXE_LINKER_FLAGS_INIT",
		"description": "ビルド ツリーを初めて構成するときに CMAKE_EXE_LINKER_FLAGS キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_EXPORT_COMPILE_COMMANDS": {
		"name": "CMAKE_EXPORT_COMPILE_COMMANDS",
		"description": "生成中にコンパイル コマンドの出力を有効または無効にします。"
	},
	"CMAKE_EXPORT_FIND_PACKAGE_NAME": {
		"name": "CMAKE_EXPORT_FIND_PACKAGE_NAME",
		"description": "EXPORT_FIND_PACKAGE_NAME の値を初期化します。"
	},
	"CMAKE_EXPORT_NO_PACKAGE_REGISTRY": {
		"name": "CMAKE_EXPORT_NO_PACKAGE_REGISTRY",
		"description": "CMP0090 が NEW に設定されていない場合に、エクスポート コマンドを無効にします。"
	},
	"CMAKE_EXPORT_PACKAGE_REGISTRY": {
		"name": "CMAKE_EXPORT_PACKAGE_REGISTRY",
		"description": "CMP0090 が NEW に設定されている場合に、エクスポート コマンドを有効にします。"
	},
	"CMAKE_EXTRA_GENERATOR": {
		"name": "CMAKE_EXTRA_GENERATOR",
		"description": "プロジェクトのビルドに使用される追加のジェネレーター。cmake-generators を参照してください。"
	},
	"CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": {
		"name": "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES",
		"description": "共有ライブラリの追加サフィックス。"
	},
	"CMAKE_FIND_APPBUNDLE": {
		"name": "CMAKE_FIND_APPBUNDLE",
		"description": "この変数は、find_* コマンドが macOS アプリケーション バンドルと unix スタイルのパッケージ コンポーネントをどのように選択するかに影響します。"
	},
	"CMAKE_FIND_DEBUG_MODE": {
		"name": "CMAKE_FIND_DEBUG_MODE",
		"description": "次のコマンドに関する追加の検索呼び出し情報を標準エラーに出力します:"
	},
	"CMAKE_FIND_FRAMEWORK": {
		"name": "CMAKE_FIND_FRAMEWORK",
		"description": "この変数は、find_* コマンドが macOS フレームワークと unix スタイルのパッケージ コンポーネントをどのように選択するかに影響します。"
	},
	"CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": {
		"name": "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX",
		"description": "通常検索される各 lib ディレクトリより前に lib <suffix> ディレクトリを検索するよう find_library コマンドに指示するには、<suffix> を指定します。"
	},
	"CMAKE_FIND_LIBRARY_PREFIXES": {
		"name": "CMAKE_FIND_LIBRARY_PREFIXES",
		"description": "ライブラリを探すときに先頭に追加するプレフィックス。"
	},
	"CMAKE_FIND_LIBRARY_SUFFIXES": {
		"name": "CMAKE_FIND_LIBRARY_SUFFIXES",
		"description": "ライブラリを探すときに末尾に追加するサフィックス。"
	},
	"CMAKE_FIND_NO_INSTALL_PREFIX": {
		"name": "CMAKE_FIND_NO_INSTALL_PREFIX",
		"description": "CMAKE_SYSTEM_PREFIX_PATH から CMAKE_INSTALL_PREFIX および CMAKE_STAGING_PREFIX 変数の値を除外します。CMake は、一連の依存パッケージをビルドしてそれらを共通のプレフィックスにインストールできるようにするために、既定でこれらのプロジェクトの宛先プレフィックスを CMAKE_SYSTEM_PREFIX_PATH に追加します。この動作を抑制するには、CMAKE_FIND_NO_INSTALL_PREFIX を TRUE に設定します。"
	},
	"CMAKE_FIND_PACKAGE_NAME": {
		"name": "CMAKE_FIND_PACKAGE_NAME",
		"description": "呼び出し元指定のパッケージ名を記録するための検索モジュールの読み込み中に、find_package コマンドによって定義されます。詳しくは、コマンドの資料を参照してください。"
	},
	"CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY",
		"description": "既定では、この変数は設定されません。CMAKE_FIND_USE_PACKAGE_REGISTRY と CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY のどちらも設定しない場合は、NO_CMAKE_PACKAGE_REGISTRY オプションを指定しない限り、find_package() ではユーザー パッケージ レジストリが使用されます。"
	},
	"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY",
		"description": "既定では、この変数は設定されません。CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY と CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY のどちらも設定しない場合は、NO_CMAKE_SYSTEM_PACKAGE_REGISTRY オプションを指定しない限り、find_package() ではシステム パッケージ レジストリが使用されます。"
	},
	"CMAKE_FIND_PACKAGE_PREFER_CONFIG": {
		"name": "CMAKE_FIND_PACKAGE_PREFER_CONFIG",
		"description": "モードが指定されていない場合は \"Module\" モードの前に \"Config\" モードを試すように find_package に指示します。"
	},
	"CMAKE_FIND_PACKAGE_REDIRECTS_DIR": {
		"name": "CMAKE_FIND_PACKAGE_REDIRECTS_DIR",
		"description": "この読み取り専用変数は、モジュールまたは構成パッケージ ファイルを他の場所で検索する前に、find_package コマンドが最初にチェックするディレクトリを指定します。このディレクトリ内の構成パッケージ ファイルは、他の Find モジュール ファイルまたは構成パッケージ ファイルよりも常に優先して検出されます。"
	},
	"CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS": {
		"name": "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS",
		"description": "<PackageName>_DIR の値に含まれるシンボリック リンクを解決するように find_package 呼び出しに指示する場合は、TRUE に設定します。"
	},
	"CMAKE_FIND_PACKAGE_SORT_DIRECTION": {
		"name": "CMAKE_FIND_PACKAGE_SORT_DIRECTION",
		"description": "CMAKE_FIND_PACKAGE_SORT_ORDER によって使用されるソートの方向。次のいずれかの値が想定されます。"
	},
	"CMAKE_FIND_PACKAGE_SORT_ORDER": {
		"name": "CMAKE_FIND_PACKAGE_SORT_ORDER",
		"description": "find_package を使用して見つかるパッケージをソートするための既定の順序。以下のいずれかの値が想定されます。"
	},
	"CMAKE_FIND_PACKAGE_TARGETS_GLOBAL": {
		"name": "CMAKE_FIND_PACKAGE_TARGETS_GLOBAL",
		"description": "true に設定すると、find_package によって検出されたすべての IMPORTED ターゲットが GLOBAL スコープに昇格されます。"
	},
	"CMAKE_FIND_PACKAGE_WARN_NO_MODULE": {
		"name": "CMAKE_FIND_PACKAGE_WARN_NO_MODULE",
		"description": "明示的なモードなしで呼び出された場合に警告するよう find_package に指示します。"
	},
	"CMAKE_FIND_ROOT_PATH": {
		"name": "CMAKE_FIND_ROOT_PATH",
		"description": "ファイル システム上で検索するルート パスのセミコロン区切りリスト。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE",
		"description": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY",
		"description": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE",
		"description": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。"
	},
	"CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": {
		"name": "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM",
		"description": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。"
	},
	"CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH",
		"description": "CMake 固有の環境変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:"
	},
	"CMAKE_FIND_USE_CMAKE_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_PATH",
		"description": "CMake 固有のキャッシュ変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:"
	},
	"CMAKE_FIND_USE_CMAKE_SYSTEM_PATH": {
		"name": "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH",
		"description": "プラットフォーム固有の CMake 変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:"
	},
	"CMAKE_FIND_USE_INSTALL_PREFIX": {
		"name": "CMAKE_FIND_USE_INSTALL_PREFIX",
		"description": "CMAKE_INSTALL_PREFIX 変数とCMAKE_STAGING_PREFIX 変数内の場所を検索するかどうかについて、次のコマンドの既定の動作を制御します。"
	},
	"CMAKE_FIND_USE_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_USE_PACKAGE_REGISTRY",
		"description": "ユーザー パッケージ レジストリによって指定されたパスを検索するかどうかについて、find_package コマンドの既定の動作を制御します。"
	},
	"CMAKE_FIND_USE_PACKAGE_ROOT_PATH": {
		"name": "CMAKE_FIND_USE_PACKAGE_ROOT_PATH",
		"description": "<PackageName>_ROOT 変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:"
	},
	"CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH": {
		"name": "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH",
		"description": "標準のシステム環境変数で指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:"
	},
	"CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY": {
		"name": "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY",
		"description": "find_package コマンドによるシステム パッケージ レジストリの検索を制御します。"
	},
	"CMAKE_FOLDER": {
		"name": "CMAKE_FOLDER",
		"description": "フォルダー名を設定します。IDE 内でターゲットを整理するために使用します。"
	},
	"CMAKE_Fortran_FORMAT": {
		"name": "CMAKE_Fortran_FORMAT",
		"description": "Fortran ソース レイアウトを示す FIXED または FREE に設定します。"
	},
	"CMAKE_Fortran_MODDIR_DEFAULT": {
		"name": "CMAKE_Fortran_MODDIR_DEFAULT",
		"description": "Fortran の既定のモジュール出力ディレクトリ。"
	},
	"CMAKE_Fortran_MODDIR_FLAG": {
		"name": "CMAKE_Fortran_MODDIR_FLAG",
		"description": "モジュール出力ディレクトリ用の Fortran フラグ。"
	},
	"CMAKE_Fortran_MODOUT_FLAG": {
		"name": "CMAKE_Fortran_MODOUT_FLAG",
		"description": "モジュール出力を有効にするための Fortran フラグ。"
	},
	"CMAKE_Fortran_MODULE_DIRECTORY": {
		"name": "CMAKE_Fortran_MODULE_DIRECTORY",
		"description": "Fortran のモジュール出力ディレクトリ。"
	},
	"CMAKE_Fortran_PREPROCESS": {
		"name": "CMAKE_Fortran_PREPROCESS",
		"description": "ターゲットの Fortran_PREPROCESS の既定値。"
	},
	"CMAKE_FRAMEWORK": {
		"name": "CMAKE_FRAMEWORK",
		"description": "ターゲットの FRAMEWORK の既定値。"
	},
	"CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>": {
		"name": "CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
		"description": "マルチ構成ジェネレーターを使用しているときの、構成 <CONFIG> の下の既定のフレームワーク ファイル名接尾辞です。"
	},
	"CMAKE_FRAMEWORK_PATH": {
		"name": "CMAKE_FRAMEWORK_PATH",
		"description": "find_library、find_package、find_path、find_file コマンドで使用される macOS フレームワークの検索パスを指定する、ディレクトリのセミコロン区切りリスト。"
	},
	"CMAKE_GENERATOR": {
		"name": "CMAKE_GENERATOR",
		"description": "プロジェクトのビルドに使用されるジェネレーター。cmake-generators を参照してください。"
	},
	"CMAKE_GENERATOR_INSTANCE": {
		"name": "CMAKE_GENERATOR_INSTANCE",
		"description": "ユーザーによって提供されるジェネレーター固有のインスタンス仕様。"
	},
	"CMAKE_GENERATOR_PLATFORM": {
		"name": "CMAKE_GENERATOR_PLATFORM",
		"description": "ユーザーによって提供されるジェネレーター固有のターゲット プラットフォーム仕様。"
	},
	"CMAKE_GENERATOR_TOOLSET": {
		"name": "CMAKE_GENERATOR_TOOLSET",
		"description": "ユーザー提供のネイティブ ビルド システム ツールセットの仕様。"
	},
	"CMAKE_GHS_NO_SOURCE_GROUP_FILE": {
		"name": "CMAKE_GHS_NO_SOURCE_GROUP_FILE",
		"description": "ターゲットのプロジェクト ファイルを 1 つのファイルにするか複数のファイルにするかを制御する ON/OFF ブール値です。詳細については、GHS_NO_SOURCE_GROUP_FILE をご覧ください。"
	},
	"CMAKE_GLOBAL_AUTOGEN_TARGET": {
		"name": "CMAKE_GLOBAL_AUTOGEN_TARGET",
		"description": "グローバル autogen ターゲットの生成を有効にするために切り替えます。"
	},
	"CMAKE_GLOBAL_AUTOGEN_TARGET_NAME": {
		"name": "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME",
		"description": "グローバル autogen ターゲットの名前を変更します。"
	},
	"CMAKE_GLOBAL_AUTORCC_TARGET": {
		"name": "CMAKE_GLOBAL_AUTORCC_TARGET",
		"description": "グローバル autorcc ターゲットの生成を有効にするために切り替えます。"
	},
	"CMAKE_GLOBAL_AUTORCC_TARGET_NAME": {
		"name": "CMAKE_GLOBAL_AUTORCC_TARGET_NAME",
		"description": "グローバル autorcc ターゲットの名前を変更します。"
	},
	"CMAKE_GNUtoMS": {
		"name": "CMAKE_GNUtoMS",
		"description": "GNU インポート ライブラリ (.dll.a) を MS 形式 (.lib) に変換します。"
	},
	"CMAKE_HIP_ARCHITECTURES": {
		"name": "CMAKE_HIP_ARCHITECTURES",
		"description": "デバイス コードを生成する GPU アーキテクチャの一覧。アーキテクチャ名は、CMAKE_HIP_PLATFORM に基づいて解釈されます。"
	},
	"CMAKE_HIP_COMPILE_FEATURES": {
		"name": "CMAKE_HIP_COMPILE_FEATURES",
		"description": "HIP コンパイラで認識されている機能の一覧"
	},
	"CMAKE_HIP_EXTENSIONS": {
		"name": "CMAKE_HIP_EXTENSIONS",
		"description": "ターゲットの作成時に設定する場合の、HIP_EXTENSIONS ターゲット プロパティの既定値。"
	},
	"CMAKE_HIP_PLATFORM": {
		"name": "CMAKE_HIP_PLATFORM",
		"description": "HIP 言語ソースをコンパイルする GPU プラットフォーム。"
	},
	"CMAKE_HIP_STANDARD": {
		"name": "CMAKE_HIP_STANDARD",
		"description": "ターゲットの作成時に設定する場合の、HIP_STANDARD ターゲット プロパティの既定値。"
	},
	"CMAKE_HIP_STANDARD_REQUIRED": {
		"name": "CMAKE_HIP_STANDARD_REQUIRED",
		"description": "ターゲットの作成時に設定する場合の、HIP_STANDARD_REQUIRED ターゲット プロパティの既定値。"
	},
	"CMAKE_HOME_DIRECTORY": {
		"name": "CMAKE_HOME_DIRECTORY",
		"description": "ソース ツリーの先頭へのパス。CMAKE_SOURCE_DIR と同じです。"
	},
	"CMAKE_HOST_APPLE": {
		"name": "CMAKE_HOST_APPLE",
		"description": "Apple macOS オペレーティング システムの場合は true。"
	},
	"CMAKE_HOST_BSD": {
		"name": "CMAKE_HOST_BSD",
		"description": "ホスト システムが BSD の場合は文字列値に設定します。この値は、DragonFlyBSD、FreeBSD、OpenBSD、または NetBSD のいずれかになります。"
	},
	"CMAKE_HOST_LINUX": {
		"name": "CMAKE_HOST_LINUX",
		"description": "ホスト システムが Linux の場合は true に設定します。"
	},
	"CMAKE_HOST_SOLARIS": {
		"name": "CMAKE_HOST_SOLARIS",
		"description": "Oracle Solaris オペレーティング システムの場合は true。"
	},
	"CMAKE_HOST_SYSTEM": {
		"name": "CMAKE_HOST_SYSTEM",
		"description": "CMake を実行する OS の複合名。"
	},
	"CMAKE_HOST_SYSTEM_NAME": {
		"name": "CMAKE_HOST_SYSTEM_NAME",
		"description": "CMake が実行されている OS の名前。"
	},
	"CMAKE_HOST_SYSTEM_PROCESSOR": {
		"name": "CMAKE_HOST_SYSTEM_PROCESSOR",
		"description": "CMake が実行されている CPU の名前。"
	},
	"CMAKE_HOST_SYSTEM_VERSION": {
		"name": "CMAKE_HOST_SYSTEM_VERSION",
		"description": "CMake が実行されている OS のバージョン。"
	},
	"CMAKE_HOST_UNIX": {
		"name": "CMAKE_HOST_UNIX",
		"description": "UNIX および UNIX 系のオペレーティング システムの場合は true。"
	},
	"CMAKE_HOST_WIN32": {
		"name": "CMAKE_HOST_WIN32",
		"description": "ホスト システムが Windows (Windows 64 ビットおよび MSYS を含む) を実行している場合は true。"
	},
	"CMAKE_IGNORE_PATH": {
		"name": "CMAKE_IGNORE_PATH",
		"description": "さまざまな find...() コマンドで無視されるディレクトリのセミコロン区切りの一覧。"
	},
	"CMAKE_IGNORE_PREFIX_PATH": {
		"name": "CMAKE_IGNORE_PREFIX_PATH",
		"description": "find_program、find_library、find_file、find_path コマンドで無視される検索プレフィックスのセミコロン区切りの一覧。プレフィックスは、find_package コマンドの構成モードでも無視されます (モジュール モードは影響を受けません)。代わりに特定のディレクトリを無視するには、CMAKE_IGNORE_NONPREFIX_VAR を参照してください。"
	},
	"CMAKE_IMPORT_LIBRARY_PREFIX": {
		"name": "CMAKE_IMPORT_LIBRARY_PREFIX",
		"description": "リンクしているインポート ライブラリのプレフィックス。"
	},
	"CMAKE_IMPORT_LIBRARY_SUFFIX": {
		"name": "CMAKE_IMPORT_LIBRARY_SUFFIX",
		"description": "リンクしているインポート ライブラリのサフィックス。"
	},
	"CMAKE_INCLUDE_CURRENT_DIR": {
		"name": "CMAKE_INCLUDE_CURRENT_DIR",
		"description": "現在のソース ディレクトリとビルド ディレクトリを自動的に include パスに追加します。"
	},
	"CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": {
		"name": "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE",
		"description": "現在のソース ディレクトリとビルド ディレクトリを自動的に INTERFACE_INCLUDE_DIRECTORIES ターゲット プロパティに追加します。"
	},
	"CMAKE_INCLUDE_DIRECTORIES_BEFORE": {
		"name": "CMAKE_INCLUDE_DIRECTORIES_BEFORE",
		"description": "既定で include_directories に末尾または先頭にディレクトリを追加するか。"
	},
	"CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": {
		"name": "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE",
		"description": "プロジェクトの include ディレクトリを強制的に先頭に追加するかどうか。"
	},
	"CMAKE_INCLUDE_PATH": {
		"name": "CMAKE_INCLUDE_PATH",
		"description": "find_file コマンドおよび find_path コマンドの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。"
	},
	"CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": {
		"name": "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME",
		"description": "インストール コマンドで使用される既定のコンポーネント。"
	},
	"CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": {
		"name": "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
		"description": "install および file によるファイルのインストール中に暗黙的に作成されるディレクトリに対する既定のアクセス許可。"
	},
	"CMAKE_INSTALL_MESSAGE": {
		"name": "CMAKE_INSTALL_MESSAGE",
		"description": "(file コマンドを使用して) install コマンドによって生成されたインストール スクリプト コードの詳細レベルを指定します。新しくインストールまたは更新されるパスの場合、インストールによって次のような行が表示されます。"
	},
	"CMAKE_INSTALL_NAME_DIR": {
		"name": "CMAKE_INSTALL_NAME_DIR",
		"description": "Apple プラットフォーム上にインストールされているターゲットのディレクトリ名。"
	},
	"CMAKE_INSTALL_PREFIX": {
		"name": "CMAKE_INSTALL_PREFIX",
		"description": "install で使用するインストール ディレクトリ。"
	},
	"CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": {
		"name": "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT",
		"description": "CMake は、CMAKE_INSTALL_PREFIX が既定値に初期化された直後、通常は新しいビルド ツリー内で CMake を初めて実行したときにこの変数を TRUE 値に設定し、CMake を初めて実行したときに CMAKE_INSTALL_PREFIX 環境変数が設定されていない場合にこの変数を設定します。これをプロジェクト コードで使用すると、ユーザー指定の値をオーバーライドせずに既定値を変更できます。"
	},
	"CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH": {
		"name": "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH",
		"description": "インストール中にツールチェーンで定義された rpath を削除するかどうかの既定値を設定します。"
	},
	"CMAKE_INSTALL_RPATH": {
		"name": "CMAKE_INSTALL_RPATH",
		"description": "インストール済みターゲットに使用する rpath。"
	},
	"CMAKE_INSTALL_RPATH_USE_LINK_PATH": {
		"name": "CMAKE_INSTALL_RPATH_USE_LINK_PATH",
		"description": "リンカー検索のパスとインストール済みの rpath を追加します。"
	},
	"CMAKE_INTERNAL_PLATFORM_ABI": {
		"name": "CMAKE_INTERNAL_PLATFORM_ABI",
		"description": "変更対象の内部変数です。"
	},
	"CMAKE_INTERPROCEDURAL_OPTIMIZATION": {
		"name": "CMAKE_INTERPROCEDURAL_OPTIMIZATION",
		"description": "ターゲットの INTERPROCEDURAL_OPTIMIZATION の既定値。"
	},
	"CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>": {
		"name": "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
		"description": "ターゲットの INTERPROCEDURAL_OPTIMIZATION_ の既定値。"
	},
	"CMAKE_IOS_INSTALL_COMBINED": {
		"name": "CMAKE_IOS_INSTALL_COMBINED",
		"description": "ターゲットの IOS_INSTALL_COMBINED の既定値。"
	},
	"CMAKE_ISPC_HEADER_DIRECTORY": {
		"name": "CMAKE_ISPC_HEADER_DIRECTORY",
		"description": "ISPC で生成されたヘッダー出力ディレクトリ。"
	},
	"CMAKE_ISPC_HEADER_SUFFIX": {
		"name": "CMAKE_ISPC_HEADER_SUFFIX",
		"description": "ISPC で生成されたヘッダーに使用する出力サフィックス。"
	},
	"CMAKE_ISPC_INSTRUCTION_SETS": {
		"name": "CMAKE_ISPC_INSTRUCTION_SETS",
		"description": "ターゲットの ISPC_INSTRUCTION_SETS プロパティの既定値。"
	},
	"CMAKE_JOB_POOLS": {
		"name": "CMAKE_JOB_POOLS",
		"description": "JOB_POOLS グローバルプロパティが設定されていない場合は、この変数の値が代わりに使用されます。追加情報については、JOB_POOLS を参照してください。"
	},
	"CMAKE_JOB_POOL_COMPILE": {
		"name": "CMAKE_JOB_POOL_COMPILE",
		"description": "この変数は、すべてのターゲットの JOB_POOL_COMPILE プロパティを初期化するために使用されます。追加情報については、JOB_POOL_COMPILE を参照してください。"
	},
	"CMAKE_JOB_POOL_LINK": {
		"name": "CMAKE_JOB_POOL_LINK",
		"description": "この変数は、すべてのターゲットの JOB_POOL_LINK プロパティを初期化するために使用されます。追加情報については、JOB_POOL_LINK を参照してください。"
	},
	"CMAKE_JOB_POOL_PRECOMPILE_HEADER": {
		"name": "CMAKE_JOB_POOL_PRECOMPILE_HEADER",
		"description": "この変数は、すべてのターゲットの JOB_POOL_PRECOMPILE_HEADER プロパティを初期化するために使用されます。追加情報については、JOB_POOL_PRECOMPILE_HEADER を参照してください。"
	},
	"CMAKE_KATE_FILES_MODE": {
		"name": "CMAKE_KATE_FILES_MODE",
		"description": "このキャッシュ変数は Kate プロジェクト ジェネレーターによって使用され、プロジェクト ファイル内のファイル エントリがどのモードに設定されるかを制御します。cmake-generators を参照してください。"
	},
	"CMAKE_KATE_MAKE_ARGUMENTS": {
		"name": "CMAKE_KATE_MAKE_ARGUMENTS",
		"description": "このキャッシュ変数は、Kate プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。"
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE",
		"description": "Android 用のクロス コンパイルの場合、この変数にはツールチェーン Binutils マシン名が含まれます (例: gcc -dumpmachine)。Binutils では通常、その名前に <machine> - というプレフィックスが付きます。"
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX",
		"description": "Android 用クロス コンパイルの場合、この変数にはツールチェーン GNU コンパイラとその Binutils にプレフィックスを付けた絶対パスが含まれます。"
	},
	"CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX": {
		"name": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX",
		"description": "Android 用クロス コンパイルの場合、この変数にはツールチェーン GNU コンパイラとその Binutils のホスト プラットフォームのサフィックスが含まれます。"
	},
	"CMAKE_<LANG>_ARCHIVE_APPEND": {
		"name": "CMAKE_<LANG>_ARCHIVE_APPEND",
		"description": "静的アーカイブに追加するための規則変数。"
	},
	"CMAKE_<LANG>_ARCHIVE_CREATE": {
		"name": "CMAKE_<LANG>_ARCHIVE_CREATE",
		"description": "新しい静的アーカイブを作成するための規則変数。"
	},
	"CMAKE_<LANG>_ARCHIVE_FINISH": {
		"name": "CMAKE_<LANG>_ARCHIVE_FINISH",
		"description": "既存の静的アーカイブを終了するための規則変数。"
	},
	"CMAKE_<LANG>_BYTE_ORDER": {
		"name": "CMAKE_<LANG>_BYTE_ORDER",
		"description": "<LANG> コンパイラのターゲット アーキテクチャのバイト順 (既知の場合)。定義されていて、空ではない場合、値は次のいずれかになります。"
	},
	"CMAKE_<LANG>_CLANG_TIDY": {
		"name": "CMAKE_<LANG>_CLANG_TIDY",
		"description": "<LANG> が C、CXX、OBJC、または OBJCXX の場合の <LANG>_CLANG_TIDY ターゲット プロパティの既定値。"
	},
	"CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR": {
		"name": "CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR",
		"description": "<LANG> が C、CXX、OBJC、または OBJCXX の場合の <LANG>_CLANG_TIDY_EXPORT_FIXES_DIR ターゲット プロパティの既定値。"
	},
	"CMAKE_<LANG>_COMPILER": {
		"name": "CMAKE_<LANG>_COMPILER",
		"description": "LANG 用コンパイラへの完全なパス。"
	},
	"CMAKE_<LANG>_COMPILER_ABI": {
		"name": "CMAKE_<LANG>_COMPILER_ABI",
		"description": "変更対象の内部変数です。"
	},
	"CMAKE_<LANG>_COMPILER_AR": {
		"name": "CMAKE_<LANG>_COMPILER_AR",
		"description": "コンパイラの適切な --plugin オプションを追加する ar のラッパー。"
	},
	"CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID": {
		"name": "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID",
		"description": "変更対象の内部変数です。"
	},
	"CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN": {
		"name": "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN",
		"description": "サポートされている場合は、クロスコンパイル用の外部ツールチェーン。"
	},
	"CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT": {
		"name": "CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT",
		"description": "コンパイラ フロントエンド バリアントの識別文字列。"
	},
	"CMAKE_<LANG>_COMPILER_ID": {
		"name": "CMAKE_<LANG>_COMPILER_ID",
		"description": "コンパイラの識別文字列。"
	},
	"CMAKE_<LANG>_COMPILER_LAUNCHER": {
		"name": "CMAKE_<LANG>_COMPILER_LAUNCHER",
		"description": "<LANG>_COMPILER_LAUNCHER ターゲット プロパティの既定値。この変数は、各ターゲットのプロパティを、その作成時に初期化するために使用されます。これは、<LANG> が C、CXX、Fortran、HIP、ISPC、OBJC、OBJCXX、または CUDA の場合にのみ実行されます。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER",
		"description": "LANG 用リンカーへの完全なパス。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT",
		"description": "リンカー フロントエンド バリアントの識別文字列。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER_ID": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_ID",
		"description": "リンカーの識別文字列。"
	},
	"CMAKE_<LANG>_COMPILER_LINKER_VERSION": {
		"name": "CMAKE_<LANG>_COMPILER_LINKER_VERSION",
		"description": "リンカーのバージョン文字列。"
	},
	"CMAKE_<LANG>_COMPILER_LOADED": {
		"name": "CMAKE_<LANG>_COMPILER_LOADED",
		"description": "言語が有効な場合は true に定義されます。"
	},
	"CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND": {
		"name": "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND",
		"description": "コンパイラの事前定義を出力するコマンド。"
	},
	"CMAKE_<LANG>_COMPILER_RANLIB": {
		"name": "CMAKE_<LANG>_COMPILER_RANLIB",
		"description": "コンパイラの適切な --plugin オプションを追加する ranlib のラッパー。"
	},
	"CMAKE_<LANG>_COMPILER_TARGET": {
		"name": "CMAKE_<LANG>_COMPILER_TARGET",
		"description": "サポートされている場合は、クロスコンパイル用のターゲット。"
	},
	"CMAKE_<LANG>_COMPILER_VERSION": {
		"name": "CMAKE_<LANG>_COMPILER_VERSION",
		"description": "コンパイラのバージョン文字列。"
	},
	"CMAKE_<LANG>_COMPILER_VERSION_INTERNAL": {
		"name": "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL",
		"description": "変更対象の内部変数です。"
	},
	"CMAKE_<LANG>_COMPILE_OBJECT": {
		"name": "CMAKE_<LANG>_COMPILE_OBJECT",
		"description": "単一のオブジェクト ファイルをコンパイルするための規則変数。"
	},
	"CMAKE_<LANG>_CPPCHECK": {
		"name": "CMAKE_<LANG>_CPPCHECK",
		"description": "<LANG>_CPPCHECK ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは <LANG> が C または CXX の場合にのみ行われます。"
	},
	"CMAKE_<LANG>_CPPLINT": {
		"name": "CMAKE_<LANG>_CPPLINT",
		"description": "<LANG>_CPPLINT ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは <LANG> が C または CXX の場合にのみ行われます。"
	},
	"CMAKE_<LANG>_CREATE_SHARED_LIBRARY": {
		"name": "CMAKE_<LANG>_CREATE_SHARED_LIBRARY",
		"description": "共有ライブラリを作成するための規則変数。"
	},
	"CMAKE_<LANG>_CREATE_SHARED_MODULE": {
		"name": "CMAKE_<LANG>_CREATE_SHARED_MODULE",
		"description": "共有モジュールを作成するための規則変数。"
	},
	"CMAKE_<LANG>_CREATE_STATIC_LIBRARY": {
		"name": "CMAKE_<LANG>_CREATE_STATIC_LIBRARY",
		"description": "スタティック ライブラリを作成するための規則変数。"
	},
	"CMAKE_<LANG>_EXTENSIONS": {
		"name": "CMAKE_<LANG>_EXTENSIONS",
		"description": "このバリエーションは次のとおりです。"
	},
	"CMAKE_<LANG>_EXTENSIONS_DEFAULT": {
		"name": "CMAKE_<LANG>_EXTENSIONS_DEFAULT",
		"description": "コンパイラの既定の拡張モード。CMAKE_<LANG>_EXTENSIONS が設定されていない場合に、<LANG>_EXTENSIONS ターゲット プロパティの既定値として使用します (CMP0128 を参照)。"
	},
	"CMAKE_<LANG>_FLAGS": {
		"name": "CMAKE_<LANG>_FLAGS",
		"description": "すべての構成でビルド時に使用される言語 <LANG> の言語共通フラグ。これらのフラグは、コンパイラのすべての呼び出しに渡されます。これには、コンパイルを実行する呼び出しと、リンクの設定を実行する呼び出しが含まれます。"
	},
	"CMAKE_<LANG>_FLAGS_<CONFIG>": {
		"name": "CMAKE_<LANG>_FLAGS_<CONFIG>",
		"description": "<CONFIG> 構成のビルド時に使用される言語 <LANG> の言語共通フラグ。これらのフラグは、対応する構成のコンパイラの、すべての呼び出しに渡されます。これには、コンパイルを実行する呼び出しと、リンクの設定を実行する呼び出しが含まれます。"
	},
	"CMAKE_<LANG>_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_<CONFIG>_INIT",
		"description": "言語 <LANG> のビルド ツリーを初めて構成するときに CMAKE_<LANG>_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_<LANG>_FLAGS_DEBUG": {
		"name": "CMAKE_<LANG>_FLAGS_DEBUG",
		"description": "この変数は CMAKE_<LANG>_FLAGS_ 変数の Debug のバリアントです。"
	},
	"CMAKE_<LANG>_FLAGS_DEBUG_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_DEBUG_INIT",
		"description": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の Debug のバリアントです。"
	},
	"CMAKE_<LANG>_FLAGS_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_INIT",
		"description": "言語 <LANG> についてビルド ツリーが初めて構成されたときに、CMAKE_<LANG>_FLAGS キャッシュ エントリを初期化するために使用する値です。この変数は、ツールチェーン ファイルによって設定することを意図しています。CMake では、環境とターゲット プラットフォームに基づいて、値の前後に内容を追加することができます。たとえば、xxxFLAGS 環境変数の内容は前に付加されます。ここで xxx は言語固有であり、また必ずしも <LANG> と同じである必要はありません (例: CXX の場合は CXXFLAGS、Fortran の場合は FFLAGS など)。この値はコマンドライン文字列のフラグメントです。従って、複数のオプションはスペース記号で区切られ、スペース付きのオプションはクォーテーションマークで囲われる必要があります。"
	},
	"CMAKE_<LANG>_FLAGS_MINSIZEREL": {
		"name": "CMAKE_<LANG>_FLAGS_MINSIZEREL",
		"description": "この変数は CMAKE_<LANG>_FLAGS_ 変数の MinSizeRel のバリアントです。"
	},
	"CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT",
		"description": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の MinSizeRel のバリアントです。"
	},
	"CMAKE_<LANG>_FLAGS_RELEASE": {
		"name": "CMAKE_<LANG>_FLAGS_RELEASE",
		"description": "この変数は CMAKE_<LANG>_FLAGS_ 変数の Release のバリアントです。"
	},
	"CMAKE_<LANG>_FLAGS_RELEASE_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_RELEASE_INIT",
		"description": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の Release のバリアントです。"
	},
	"CMAKE_<LANG>_FLAGS_RELWITHDEBINFO": {
		"name": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO",
		"description": "この変数は CMAKE_<LANG>_FLAGS_ 変数の RelWithDebInfo のバリアントです。"
	},
	"CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT": {
		"name": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT",
		"description": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の RelWithDebInfo のバリアントです。"
	},
	"CMAKE_<LANG>_HOST_COMPILER": {
		"name": "CMAKE_<LANG>_HOST_COMPILER",
		"description": "この変数は、<LANG> が CUDA または HIP の場合に使用できます。"
	},
	"CMAKE_<LANG>_IGNORE_EXTENSIONS": {
		"name": "CMAKE_<LANG>_IGNORE_EXTENSIONS",
		"description": "ビルドで無視されるファイル拡張子。"
	},
	"CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES",
		"description": "コンパイラがヘッダー ファイルを暗黙的に検索するディレクトリ。"
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES",
		"description": "言語 <LANG> で検出される暗黙のリンカー検索パス。"
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES",
		"description": "言語 <LANG> で検出される暗黙のリンカー フレームワーク検索パス。"
	},
	"CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES": {
		"name": "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES",
		"description": "言語 <LANG> で検出される暗黙のリンク ライブラリとフラグ。"
	},
	"CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE": {
		"name": "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE",
		"description": "<LANG>_INCLUDE_WHAT_YOU_USE ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは <LANG> が C または CXX の場合にのみ行われます。"
	},
	"CMAKE_<LANG>_LIBRARY_ARCHITECTURE": {
		"name": "CMAKE_<LANG>_LIBRARY_ARCHITECTURE",
		"description": "<LANG> で検出されるターゲット アーキテクチャ ライブラリ ディレクトリ名。"
	},
	"CMAKE_<LANG>_LINKER_LAUNCHER": {
		"name": "CMAKE_<LANG>_LINKER_LAUNCHER",
		"description": "<LANG>_COMPILER_LAUNCHER ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは、<LANG> が C、CXX、OBJC、OBJCXX の場合にのみ実行されます。"
	},
	"CMAKE_<LANG>_LINKER_PREFERENCE": {
		"name": "CMAKE_<LANG>_LINKER_PREFERENCE",
		"description": "変更対象の内部変数です。"
	},
	"CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES": {
		"name": "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES",
		"description": "変更対象の内部変数です。"
	},
	"CMAKE_<LANG>_LINKER_WRAPPER_FLAG": {
		"name": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG",
		"description": "オプションをリンカー ツールに渡すためのコンパイラ ドライバー オプションの構文を定義します。これはリンク オプションの LINKER: プレフィックスを変換するために使われます (add_link_options と target_link_options を参照してください)。"
	},
	"CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP": {
		"name": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP",
		"description": "この変数は、リンク オプションの LINKER: プレフィックスをフォーマットするために CMAKE_<LANG>_LINKER_WRAPPER_FLAG 変数とともに使用されます (add_link_options および target_link_options を参照)。"
	},
	"CMAKE_<LANG>_LINK_EXECUTABLE": {
		"name": "CMAKE_<LANG>_LINK_EXECUTABLE",
		"description": "実行可能ファイルをリンクするための規則変数。"
	},
	"CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>": {
		"name": "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>",
		"description": "この変数は、LINK_LIBRARY ジェネレーター式が使用され、ターゲットのリンク言語が <LANG> である場合に、指定された <FEATURE> のライブラリのグループをリンクする方法を定義します。この変数が効果を発揮するには、関連付けられた CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED 変数が、true に設定されている必要があります。"
	},
	"CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED",
		"description": "この変数は、<FEATURE> がリンク言語 <LANG> でサポートされているかどうかを指定します。この変数が true の場合、<FEATURE> はCMAKE_<LANG>_LINK_GROUP_USING_ で定義する必要があります。より一般的な CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED および CMAKE_LINK_GROUP_USING_ 変数は使用されません。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_<FEATURE>_ATTRIBUTES": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_<FEATURE>_ATTRIBUTES",
		"description": "この変数は、リンク言語 <LANG> を使用してリンクの設定をするときの、指定されたリンク ライブラリ <FEATURE> のセマンティクスを定義します。この変数は、同じ <FEATURE> に対して定義されている場合に CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES よりも優先されますが、それ以外の場合は同様の効果があります。詳細については、「CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES」を参照してください。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG",
		"description": "パスで指定されたライブラリをそのファイルにリンクするために使用される、言語に固有のフラグ。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_FLAG": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_FLAG",
		"description": "ライブラリを共有ライブラリまたは実行可能ファイルにリンクするために使用されるフラグ。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_SUFFIX": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_SUFFIX",
		"description": "リンクしているライブラリの言語固有のサフィックス。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>",
		"description": "この変数は、LINK_LIBRARY ジェネレーター式が使用され、ターゲットのリンク言語が <LANG> である場合に、指定された <FEATURE> のライブラリまたはフレームワークをリンクする方法を定義します。この変数が効果を発揮するには、関連付けられた CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED 変数が、true に設定されている必要があります。"
	},
	"CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED",
		"description": "変数 CMAKE_<LANG>_LINK_LIBRARY_USING_ で定義されている <FEATURE> がリンカー言語 <LANG> 向けにサポートされている場合は、true に設定されます。"
	},
	"CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG": {
		"name": "CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG",
		"description": "コマンド ラインで指定されたすべてのライブラリがターゲットにリンクされるようにリンカーを構成するために使用されるリンカー フラグです。"
	},
	"CMAKE_<LANG>_OUTPUT_EXTENSION": {
		"name": "CMAKE_<LANG>_OUTPUT_EXTENSION",
		"description": "単一ファイル用のコンパイルの出力用拡張機能。"
	},
	"CMAKE_<LANG>_PLATFORM_ID": {
		"name": "CMAKE_<LANG>_PLATFORM_ID",
		"description": "変更対象の内部変数です。"
	},
	"CMAKE_<LANG>_SIMULATE_ID": {
		"name": "CMAKE_<LANG>_SIMULATE_ID",
		"description": "「シミュレートされた」コンパイラの識別文字列。"
	},
	"CMAKE_<LANG>_SIMULATE_VERSION": {
		"name": "CMAKE_<LANG>_SIMULATE_VERSION",
		"description": "「シミュレートされた」コンパイラのバージョン文字列。"
	},
	"CMAKE_<LANG>_SIZEOF_DATA_PTR": {
		"name": "CMAKE_<LANG>_SIZEOF_DATA_PTR",
		"description": "言語 <LANG> の pointer-to-data 型のサイズ。"
	},
	"CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS": {
		"name": "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS",
		"description": "特定の言語のソース ファイルの拡張機能。"
	},
	"CMAKE_<LANG>_STANDARD": {
		"name": "CMAKE_<LANG>_STANDARD",
		"description": "このバリエーションは次のとおりです。"
	},
	"CMAKE_<LANG>_STANDARD_DEFAULT": {
		"name": "CMAKE_<LANG>_STANDARD_DEFAULT",
		"description": "言語 <LANG> のコンパイラの既定の標準です。コンパイラに標準レベルの概念がない場合は空です。"
	},
	"CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES",
		"description": "<LANG> コンパイラでコンパイルされるすべてのソース ファイルに使用されるディレクトリを含めます。これは、現在のプラットフォームの言語で必要とされるシステム include ディレクトリを指定するためのものです。ディレクトリは常に、コンパイラに渡された include パスの末尾に表示されます。"
	},
	"CMAKE_<LANG>_STANDARD_LATEST": {
		"name": "CMAKE_<LANG>_STANDARD_LATEST",
		"description": "この変数は、現在のコンパイラでサポートされている言語 <LANG> の最新バージョンと CMake でサポートされている最新バージョンの間の最小値を表します。その値は、対応する <LANG>_STANDARD ターゲット プロパティのサポートされている値のいずれかに設定されます。サポートされている言語の一覧については、そのプロパティのドキュメントを参照してください。"
	},
	"CMAKE_<LANG>_STANDARD_LIBRARIES": {
		"name": "CMAKE_<LANG>_STANDARD_LIBRARIES",
		"description": "言語 <LANG> でリンクされているすべての実行可能ファイルおよび共有ライブラリにリンクされているライブラリ。これは現在のプラットフォームの言語で必要なシステム ライブラリを指定するためのものです。"
	},
	"CMAKE_<LANG>_STANDARD_REQUIRED": {
		"name": "CMAKE_<LANG>_STANDARD_REQUIRED",
		"description": "このバリエーションは次のとおりです。"
	},
	"CMAKE_<LANG>_USING_LINKER_MODE": {
		"name": "CMAKE_<LANG>_USING_LINKER_MODE",
		"description": "これは、CMAKE_<LANG>_USING_LINKER_ 変数の値の解釈方法を制御します。サポートされているリンカー モードの値は次のとおりです:"
	},
	"CMAKE_<LANG>_USING_LINKER_<TYPE>": {
		"name": "CMAKE_<LANG>_USING_LINKER_<TYPE>",
		"description": "この変数は、CMAKE_LINKER_TYPE 変数または LINKER_TYPE ターゲット プロパティによって制御されるリンク ステップの <TYPE> リンカーを指定する方法を定義します。CMAKE_<LANG>_USING_LINKER_MODE 変数の値に応じて、CMAKE_<LANG>_USING_LINKER_<TYPE> はリンク ステップのコンパイラ フラグ、またはリンカー ツールに直接指定されるフラグを保持できます。"
	},
	"CMAKE_<LANG>_VISIBILITY_PRESET": {
		"name": "CMAKE_<LANG>_VISIBILITY_PRESET",
		"description": "ターゲット作成時の <LANG>_VISIBILITY_PRESET ターゲット プロパティの既定値。"
	},
	"CMAKE_LIBRARY_ARCHITECTURE": {
		"name": "CMAKE_LIBRARY_ARCHITECTURE",
		"description": "検出された場合、ターゲット アーキテクチャのライブラリ ディレクトリ名。"
	},
	"CMAKE_LIBRARY_ARCHITECTURE_REGEX": {
		"name": "CMAKE_LIBRARY_ARCHITECTURE_REGEX",
		"description": "可能なターゲット アーキテクチャのライブラリ ディレクトリ名と一致する Regex。"
	},
	"CMAKE_LIBRARY_OUTPUT_DIRECTORY": {
		"name": "CMAKE_LIBRARY_OUTPUT_DIRECTORY",
		"description": "ビルド時のすべての LIBRARY ターゲット ファイルの配置場所。"
	},
	"CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "特定の構成のためにビルドされたときの、すべての LIBRARY ターゲット ファイルの配置場所。"
	},
	"CMAKE_LIBRARY_PATH": {
		"name": "CMAKE_LIBRARY_PATH",
		"description": "find_library コマンドの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。"
	},
	"CMAKE_LIBRARY_PATH_FLAG": {
		"name": "CMAKE_LIBRARY_PATH_FLAG",
		"description": "ライブラリ検索パスをコンパイラに追加するために使用されるフラグ。"
	},
	"CMAKE_LINKER_TYPE": {
		"name": "CMAKE_LINKER_TYPE",
		"description": "リンク ステップに使用するリンカーを指定します。"
	},
	"CMAKE_LINK_DEF_FILE_FLAG": {
		"name": "CMAKE_LINK_DEF_FILE_FLAG",
		"description": "dll 作成用の .def ファイルを指定するために使用されるリンカー フラグ。"
	},
	"CMAKE_LINK_DEPENDS_NO_SHARED": {
		"name": "CMAKE_LINK_DEPENDS_NO_SHARED",
		"description": "共有ライブラリ ファイルへのリンクの依存関係をスキップするかどうか。"
	},
	"CMAKE_LINK_DEPENDS_USE_LINKER": {
		"name": "CMAKE_LINK_DEPENDS_USE_LINKER",
		"description": "Makefile ジェネレーターおよび Ninja ジェネレーターでは、一部のリンカーに対して、リンク依存関係がリンカー自体によって生成されるようになりました。この変数を値 FALSE で定義すると、この機能を非アクティブ化できます。"
	},
	"CMAKE_LINK_DIRECTORIES_BEFORE": {
		"name": "CMAKE_LINK_DIRECTORIES_BEFORE",
		"description": "既定で link_directories に末尾または先頭にディレクトリを追加するか。"
	},
	"CMAKE_LINK_GROUP_USING_<FEATURE>": {
		"name": "CMAKE_LINK_GROUP_USING_<FEATURE>",
		"description": "この変数は、LINK_GROUP ジェネレーター式を使用するときに、指定された <FEATURE> のライブラリのグループをリンクする方法を定義します。この変数が効果を発揮するには、次の両方の条件を満たす必要があります。"
	},
	"CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED",
		"description": "この変数は、リンク言語に関係なく、<FEATURE> がサポートされるかどうかを指定します。この変数が true の場合、<FEATURE> は CMAKE_LINK_GROUP_USING_ で定義される必要があります。"
	},
	"CMAKE_LINK_INTERFACE_LIBRARIES": {
		"name": "CMAKE_LINK_INTERFACE_LIBRARIES",
		"description": "ターゲットの LINK_INTERFACE_LIBRARIES の既定値。"
	},
	"CMAKE_LINK_LIBRARIES_ONLY_TARGETS": {
		"name": "CMAKE_LINK_LIBRARIES_ONLY_TARGETS",
		"description": "インポートされないターゲットの作成時にLINK_LIBRARIES_ONLY_TARGETS プロパティを初期化するために、この変数を設定します。この変数を true に設定すると、ターゲット名にすることができる target_link_libraries によって名前付けされたすべての項目が、実際には既存のターゲットの名前であることを確認できます。詳細については、ターゲット プロパティのドキュメントを参照してください。"
	},
	"CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES": {
		"name": "CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES",
		"description": "この変数により、指定されたリンク ライブラリ <FEATURE> の動作が定義されます。これは、<FEATURE> が他の機能とどのように相互作用するのか、<FEATURE> を適用すべきタイミング、CMake により最終的なリンカー コマンド ラインが組み立てられる際に <FEATURE> がどのように処理されるべきか (重複排除など) を指定します。"
	},
	"CMAKE_LINK_LIBRARY_FILE_FLAG": {
		"name": "CMAKE_LINK_LIBRARY_FILE_FLAG",
		"description": "パスで指定されたライブラリをそのファイルにリンクするために使用されるフラグ。"
	},
	"CMAKE_LINK_LIBRARY_FLAG": {
		"name": "CMAKE_LINK_LIBRARY_FLAG",
		"description": "ライブラリを実行可能ファイルにリンクするために使用されるフラグ。"
	},
	"CMAKE_LINK_LIBRARY_SUFFIX": {
		"name": "CMAKE_LINK_LIBRARY_SUFFIX",
		"description": "リンクしているライブラリのサフィックス。"
	},
	"CMAKE_LINK_LIBRARY_USING_<FEATURE>": {
		"name": "CMAKE_LINK_LIBRARY_USING_<FEATURE>",
		"description": "この変数は、LINK_LIBRARY ジェネレーター式を使用するときに、指定された <FEATURE> のライブラリまたはフレームワークをリンクする方法を定義します。この変数が効果を発揮するには、次の両方の条件を満たす必要があります。"
	},
	"CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED": {
		"name": "CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED",
		"description": "変数 CMAKE_LINK_LIBRARY_USING_ で定義されている <FEATURE> がリンカー言語に関係なくサポートされている場合は、true に設定されます。"
	},
	"CMAKE_LINK_SEARCH_END_STATIC": {
		"name": "CMAKE_LINK_SEARCH_END_STATIC",
		"description": "スタティック システム ライブラリが使用されるように、リンク行を終了します。"
	},
	"CMAKE_LINK_SEARCH_START_STATIC": {
		"name": "CMAKE_LINK_SEARCH_START_STATIC",
		"description": "既定で、リンカーはスタティック ライブラリを探すと仮定します。"
	},
	"CMAKE_LINK_WHAT_YOU_USE": {
		"name": "CMAKE_LINK_WHAT_YOU_USE",
		"description": "LINK_WHAT_YOU_USE ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。"
	},
	"CMAKE_LINK_WHAT_YOU_USE_CHECK": {
		"name": "CMAKE_LINK_WHAT_YOU_USE_CHECK",
		"description": "リンク ステップの後に実行されるコマンドを定義して、ライブラリの使用状況を確認します。このチェックは現在、値 ldd -u -r を持つ ELF プラットフォームでのみ定義されています。"
	},
	"CMAKE_MACOSX_BUNDLE": {
		"name": "CMAKE_MACOSX_BUNDLE",
		"description": "ターゲットの MACOSX_BUNDLE の既定値。"
	},
	"CMAKE_MACOSX_RPATH": {
		"name": "CMAKE_MACOSX_RPATH",
		"description": "macOS と iOS で rpath を使用するかどうか。"
	},
	"CMAKE_MAJOR_VERSION": {
		"name": "CMAKE_MAJOR_VERSION",
		"description": "CMAKE_VERSION 変数の最初のバージョン番号コンポーネント。"
	},
	"CMAKE_MAKE_PROGRAM": {
		"name": "CMAKE_MAKE_PROGRAM",
		"description": "ネイティブ ビルド システムを起動できるツール。この値は、実行可能ファイルへの完全なパスになることもあれば、PATH に含まれると予想される場合は単にツール名になることもあります。"
	},
	"CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>": {
		"name": "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>",
		"description": "ターゲットの MAP_IMPORTED_CONFIG_ の既定値。"
	},
	"CMAKE_MATCH_COUNT": {
		"name": "CMAKE_MATCH_COUNT",
		"description": "最後の正規表現との一致数。"
	},
	"CMAKE_MATCH_<n>": {
		"name": "CMAKE_MATCH_<n>",
		"description": "グループ 0 から 9 の、最後の正規表現で一致したキャプチャ グループ <n>。グループ 0 は完全一致です。グループ 1 から 9 は、() 構文で取り込まれた部分式です。"
	},
	"CMAKE_MAXIMUM_RECURSION_DEPTH": {
		"name": "CMAKE_MAXIMUM_RECURSION_DEPTH",
		"description": "CMake スクリプトの最大再帰深度です。これは、-DCMAKE_MAXIMUM_RECURSION_DEPTH=<x> としてコマンド ラインで設定するか、または、大きな再帰深度を必要とするプロジェクトによって CMakeLists.txt 内で設定します。この変数を設定するプロジェクトでは、これをオーバーライドする方法をユーザーに提供する必要があります。例:"
	},
	"CMAKE_MESSAGE_CONTEXT": {
		"name": "CMAKE_MESSAGE_CONTEXT",
		"description": "cmake --log-context コマンド ライン オプションまたは CMAKE_MESSAGE_CONTEXT_SHOW 変数によって有効にした場合、メッセージ コマンドによって CMAKE_MESSAGE_CONTEXT のリストがドット区切りの文字列に変換されて角かっこで囲まれ、ログ レベルが NOTICE 以下のメッセージで各行の前に付加されます。"
	},
	"CMAKE_MESSAGE_CONTEXT_SHOW": {
		"name": "CMAKE_MESSAGE_CONTEXT_SHOW",
		"description": "この変数を true に設定すると、メッセージ コマンドによって記録される各行にコンテキストを表示できるようになります (コンテキスト自体を指定する方法については、CMAKE_MESSAGE_CONTEXT を参照してください)。"
	},
	"CMAKE_MESSAGE_INDENT": {
		"name": "CMAKE_MESSAGE_INDENT",
		"description": "メッセージ コマンドでは、この一覧からの文字列を結合し、その結果の文字列を、ログ レベルが NOTICE 以下のメッセージで各行の前に付加します。"
	},
	"CMAKE_MESSAGE_LOG_LEVEL": {
		"name": "CMAKE_MESSAGE_LOG_LEVEL",
		"description": "設定した場合、この変数では、メッセージ コマンドで使用されるログ レベルを指定します。有効な値は、CMake プログラムの --log-level <cmake --log-level> コマンド ライン オプションのものと同じです。この変数が設定されており、--log-level <cmake --log-level> コマンド ライン オプションが指定されている場合は、コマンド ライン オプションのほうが優先されます。"
	},
	"CMAKE_MFC_FLAG": {
		"name": "CMAKE_MFC_FLAG",
		"description": "実行可能ファイルまたは dll 用に MFC ライブラリを使用します。"
	},
	"CMAKE_MINIMUM_REQUIRED_VERSION": {
		"name": "CMAKE_MINIMUM_REQUIRED_VERSION",
		"description": "現在の変数スコープまたは任意の親変数スコープ内で呼び出される直近の cmake_minimum_required コマンドにおける所定の CMake の <min> バージョン。"
	},
	"CMAKE_MINOR_VERSION": {
		"name": "CMAKE_MINOR_VERSION",
		"description": "CMAKE_VERSION 変数の 2 番目のバージョン番号コンポーネント。"
	},
	"CMAKE_MODULE_LINKER_FLAGS": {
		"name": "CMAKE_MODULE_LINKER_FLAGS",
		"description": "モジュールの作成に使用するリンカー フラグ。"
	},
	"CMAKE_MODULE_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>",
		"description": "モジュールをリンクするときに使用するフラグ。"
	},
	"CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "ビルド ツリーを初めて構成するときに CMAKE_MODULE_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_MODULE_LINKER_FLAGS_INIT": {
		"name": "CMAKE_MODULE_LINKER_FLAGS_INIT",
		"description": "ビルド ツリーを初めて構成するときに CMAKE_MODULE_LINKER_FLAGS キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_MODULE_PATH": {
		"name": "CMAKE_MODULE_PATH",
		"description": "CMake 付属の既定のモジュールをチェックする前に、include または find_package コマンドによって読み込まれ、スラッシュの数を使用して表される CMake モジュールの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。"
	},
	"CMAKE_MSVCIDE_RUN_PATH": {
		"name": "CMAKE_MSVCIDE_RUN_PATH",
		"description": "Visual Studio 12 2013 (またはそれ以降) のジェネレーターを使用する場合に add_custom_command または add_custom_target を実行するときに使用する必要がある追加の PATH の場所。これにより、コマンドを実行することや、IDE 環境で認識されない dll を使用することができます。"
	},
	"CMAKE_MSVC_DEBUG_INFORMATION_FORMAT": {
		"name": "CMAKE_MSVC_DEBUG_INFORMATION_FORMAT",
		"description": "MSVC ABI を対象とする MSVC デバッグ情報形式を選択します。この変数は、作成時にすべてのターゲットで MSVC_DEBUG_INFORMATION_FORMAT プロパティを初期化するために使用されます。また、try_compile コマンドの呼び出しによってテスト プロジェクトに伝達されます。"
	},
	"CMAKE_MSVC_RUNTIME_LIBRARY": {
		"name": "CMAKE_MSVC_RUNTIME_LIBRARY",
		"description": "MSVC ABI を対象とするコンパイラで使用する MSVC ランタイム ライブラリを選択します。この変数は、ターゲットの作成時にすべてのターゲットの MSVC_RUNTIME_LIBRARY プロパティを初期化するために使用されます。また、これは、try_compile コマンドの呼び出しによってテスト プロジェクトにも反映されます。"
	},
	"CMAKE_NETRC": {
		"name": "CMAKE_NETRC",
		"description": "この変数は、1 つ以上の file コマンドの NETRC オプションを初期化するために使用されます。追加情報については、それらのコマンドを参照してください。"
	},
	"CMAKE_NETRC_FILE": {
		"name": "CMAKE_NETRC_FILE",
		"description": "この変数は、1 つ以上の file コマンドの NETRC_FILE オプションを初期化するために使用されます。追加情報については、それらのコマンドを参照してください。"
	},
	"CMAKE_NINJA_OUTPUT_PATH_PREFIX": {
		"name": "CMAKE_NINJA_OUTPUT_PATH_PREFIX",
		"description": "Ninja ジェネレーターに、build.ninja のすべての出力パスにプレフィックスを追加するように指示します。プレフィックスがない場合は、末尾のスラッシュがプレフィックスにアペンドされます。"
	},
	"CMAKE_NOT_USING_CONFIG_FLAGS": {
		"name": "CMAKE_NOT_USING_CONFIG_FLAGS",
		"description": "true の場合、_BUILD_TYPE フラグをスキップします。"
	},
	"CMAKE_NO_BUILTIN_CHRPATH": {
		"name": "CMAKE_NO_BUILTIN_CHRPATH",
		"description": "インストール時にランタイム ライブラリの検索パスを修正するために、組み込みのバイナリ エディターを使用しないでください。"
	},
	"CMAKE_NO_SYSTEM_FROM_IMPORTED": {
		"name": "CMAKE_NO_SYSTEM_FROM_IMPORTED",
		"description": "ターゲットの NO_SYSTEM_FROM_IMPORTED の既定値。"
	},
	"CMAKE_OBJCXX_EXTENSIONS": {
		"name": "CMAKE_OBJCXX_EXTENSIONS",
		"description": "ターゲットの作成時に設定する場合の、OBJCXX_EXTENSIONS ターゲット プロパティの既定値。"
	},
	"CMAKE_OBJCXX_STANDARD": {
		"name": "CMAKE_OBJCXX_STANDARD",
		"description": "ターゲットの作成時に設定する場合の、OBJCXX_STANDARD ターゲット プロパティの既定値。"
	},
	"CMAKE_OBJCXX_STANDARD_REQUIRED": {
		"name": "CMAKE_OBJCXX_STANDARD_REQUIRED",
		"description": "ターゲットの作成時に設定する場合の、OBJCXX_STANDARD_REQUIRED ターゲット プロパティの既定値。"
	},
	"CMAKE_OBJC_EXTENSIONS": {
		"name": "CMAKE_OBJC_EXTENSIONS",
		"description": "ターゲットの作成時に設定する場合の、OBJC_EXTENSIONS ターゲット プロパティの既定値。"
	},
	"CMAKE_OBJC_STANDARD": {
		"name": "CMAKE_OBJC_STANDARD",
		"description": "ターゲットの作成時に設定する場合の、OBJC_STANDARD ターゲット プロパティの既定値。"
	},
	"CMAKE_OBJC_STANDARD_REQUIRED": {
		"name": "CMAKE_OBJC_STANDARD_REQUIRED",
		"description": "ターゲットの作成時に設定する場合の、OBJC_STANDARD_REQUIRED ターゲット プロパティの既定値。"
	},
	"CMAKE_OBJECT_PATH_MAX": {
		"name": "CMAKE_OBJECT_PATH_MAX",
		"description": "ネイティブ ビルド ツールで許可されているオブジェクト ファイルの完全なパスの最大長。"
	},
	"CMAKE_OPTIMIZE_DEPENDENCIES": {
		"name": "CMAKE_OPTIMIZE_DEPENDENCIES",
		"description": "OPTIMIZE_DEPENDENCIES ターゲット プロパティを初期化します。"
	},
	"CMAKE_OSX_ARCHITECTURES": {
		"name": "CMAKE_OSX_ARCHITECTURES",
		"description": "macOS と iOS のターゲットの特定のアーキテクチャ。"
	},
	"CMAKE_OSX_DEPLOYMENT_TARGET": {
		"name": "CMAKE_OSX_DEPLOYMENT_TARGET",
		"description": "ターゲット バイナリが配置されるターゲット プラットフォーム (たとえば、macOS または iOS) の最小バージョンを指定します。CMake は、この変数値を -mmacosx-version-min フラグ、またはそれぞれのターゲット プラットフォームのこれに相当するものに使用します。複数の macOS SDK を同梱していた前の Xcode バージョンでは、CMAKE_OSX_SYSROOT が設定されていない場合にこの変数によって SDK を選択できるようにもなります。"
	},
	"CMAKE_OSX_SYSROOT": {
		"name": "CMAKE_OSX_SYSROOT",
		"description": "使用される macOS プラットフォーム SDK の場所または名前を指定します。CMake はこの値を使用して -isysroot フラグまたはこれに相当するものの値を計算し、find_* コマンドで SDK 内のファイルを見つけられるようにします。"
	},
	"CMAKE_PARENT_LIST_FILE": {
		"name": "CMAKE_PARENT_LIST_FILE",
		"description": "現在のファイルが含まれている CMake ファイルへの完全なパス。"
	},
	"CMAKE_PATCH_VERSION": {
		"name": "CMAKE_PATCH_VERSION",
		"description": "CMAKE_VERSION 変数の 3 番目のバージョン番号コンポーネント。"
	},
	"CMAKE_PCH_INSTANTIATE_TEMPLATES": {
		"name": "CMAKE_PCH_INSTANTIATE_TEMPLATES",
		"description": "この変数は、ターゲットの PCH_INSTANTIATE_TEMPLATES プロパティを、その作成時に初期化するために使用されます。"
	},
	"CMAKE_PCH_WARN_INVALID": {
		"name": "CMAKE_PCH_WARN_INVALID",
		"description": "この変数は、ターゲットの作成時にターゲットの PCH_WARN_INVALID プロパティを初期化するために使用されます。"
	},
	"CMAKE_PDB_OUTPUT_DIRECTORY": {
		"name": "CMAKE_PDB_OUTPUT_DIRECTORY",
		"description": "実行可能ファイルおよび共有ライブラリ ターゲット用にリンカーによって生成された MS デバッグ シンボル .pdb ファイルの出力ディレクトリ。"
	},
	"CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "実行可能ファイルおよび共有ライブラリ ターゲット用にリンカーによって生成された MS デバッグ シンボル .pdb ファイルの構成ごとの出力ディレクトリ。"
	},
	"CMAKE_PLATFORM_NO_VERSIONED_SONAME": {
		"name": "CMAKE_PLATFORM_NO_VERSIONED_SONAME",
		"description": "この変数は、VERSION と SOVERSION のターゲット プロパティを共有ライブラリに使用するかどうかをグローバルに制御するために使用されます。true に設定すると、各共有ライブラリ ターゲットへのバージョン情報の追加は無効になります。"
	},
	"CMAKE_POLICY_DEFAULT_CMP<NNNN>": {
		"name": "CMAKE_POLICY_DEFAULT_CMP<NNNN>",
		"description": "CMake ポリシー CMP <NNNN> が未設定のままの場合の既定値。"
	},
	"CMAKE_POLICY_WARNING_CMP<NNNN>": {
		"name": "CMAKE_POLICY_WARNING_CMP<NNNN>",
		"description": "CMake Policy CMP<NNNN> が cmake_policy によって明示的に設定されていない場合、または cmake_minimum_required によって暗黙的に設定されていない場合に、警告を明示的に有効または無効にします。これは、既定で警告メッセージを表示しないポリシーに対してのみ意味があります。"
	},
	"CMAKE_POSITION_INDEPENDENT_CODE": {
		"name": "CMAKE_POSITION_INDEPENDENT_CODE",
		"description": "ターゲットの POSITION_INDEPENDENT_CODE の既定値。"
	},
	"CMAKE_PREFIX_PATH": {
		"name": "CMAKE_PREFIX_PATH",
		"description": "find_package、find_program、find_library、find_file、find_path コマンドで検索するインストール プレフィックスを指定するディレクトリのセミコロン区切りリスト。各コマンドは自らのドキュメントで指定されているように、適切なサブディレクトリ (bin、lib、include など) を追加します。"
	},
	"CMAKE_PROGRAM_PATH": {
		"name": "CMAKE_PROGRAM_PATH",
		"description": "find_program コマンドの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。"
	},
	"CMAKE_PROJECT_DESCRIPTION": {
		"name": "CMAKE_PROJECT_DESCRIPTION",
		"description": "最上位プロジェクトの説明。"
	},
	"CMAKE_PROJECT_HOMEPAGE_URL": {
		"name": "CMAKE_PROJECT_HOMEPAGE_URL",
		"description": "最上位プロジェクトのホーム ページ URL。"
	},
	"CMAKE_PROJECT_INCLUDE": {
		"name": "CMAKE_PROJECT_INCLUDE",
		"description": "すべてのプロジェクト コマンド呼び出しの最後のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。"
	},
	"CMAKE_PROJECT_INCLUDE_BEFORE": {
		"name": "CMAKE_PROJECT_INCLUDE_BEFORE",
		"description": "すべてのプロジェクト コマンド呼び出しの最初のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。"
	},
	"CMAKE_PROJECT_NAME": {
		"name": "CMAKE_PROJECT_NAME",
		"description": "最上位プロジェクトの名前。"
	},
	"CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE": {
		"name": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE",
		"description": "プロジェクト名として <PROJECT-NAME> を指定するプロジェクト コマンド呼び出しの最後のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。"
	},
	"CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE": {
		"name": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE",
		"description": "プロジェクト名として <PROJECT-NAME> を指定するプロジェクト コマンド呼び出しの最初のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。"
	},
	"CMAKE_PROJECT_TOP_LEVEL_INCLUDES": {
		"name": "CMAKE_PROJECT_TOP_LEVEL_INCLUDES",
		"description": "セミコロンで区切られた、最初のプロジェクト呼び出しの一部として含める CMake 言語ファイルの一覧。ファイルは、ツールチェーン ファイルが読み取られた直後 (指定されている場合) およびプラットフォーム変数の設定後、すべての言語が有効になる前に含まれます。したがって、言語固有の変数 (CMAKE_<LANG>_COMPILER など) が設定されない可能性があります。プロジェクト呼び出し中に含まれる可能性のあるファイルに関する詳細については、コード インジェクションを参照してください。"
	},
	"CMAKE_PROJECT_VERSION": {
		"name": "CMAKE_PROJECT_VERSION",
		"description": "最上位プロジェクトのバージョン。"
	},
	"CMAKE_PROJECT_VERSION_MAJOR": {
		"name": "CMAKE_PROJECT_VERSION_MAJOR",
		"description": "最上位プロジェクトのメジャー バージョン。"
	},
	"CMAKE_PROJECT_VERSION_MINOR": {
		"name": "CMAKE_PROJECT_VERSION_MINOR",
		"description": "最上位プロジェクトのマイナー バージョン。"
	},
	"CMAKE_PROJECT_VERSION_PATCH": {
		"name": "CMAKE_PROJECT_VERSION_PATCH",
		"description": "最上位プロジェクトのパッチのバージョン。"
	},
	"CMAKE_PROJECT_VERSION_TWEAK": {
		"name": "CMAKE_PROJECT_VERSION_TWEAK",
		"description": "最上位プロジェクトの調整バージョン。"
	},
	"CMAKE_RANLIB": {
		"name": "CMAKE_RANLIB",
		"description": "スタティック ライブラリ用のランダム化ツールの名前。"
	},
	"CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>": {
		"name": "CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>",
		"description": "find_package 呼び出しを行うための変数は必須です。"
	},
	"CMAKE_ROOT": {
		"name": "CMAKE_ROOT",
		"description": "cmake を実行するためのインストール ディレクトリ。"
	},
	"CMAKE_RULE_MESSAGES": {
		"name": "CMAKE_RULE_MESSAGES",
		"description": "make 規則ごとにメッセージを報告するかどうかを指定します。"
	},
	"CMAKE_RUNTIME_OUTPUT_DIRECTORY": {
		"name": "CMAKE_RUNTIME_OUTPUT_DIRECTORY",
		"description": "ビルド時のすべての RUNTIME ターゲット ファイルの配置場所。"
	},
	"CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "特定の構成のためにビルドされたときの、すべての RUNTIME ターゲット ファイルの配置場所。"
	},
	"CMAKE_SCRIPT_MODE_FILE": {
		"name": "CMAKE_SCRIPT_MODE_FILE",
		"description": "現在処理されている cmake -P スクリプト ファイルへの完全なパス。"
	},
	"CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS": {
		"name": "CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS",
		"description": "共有ライブラリでインポート ファイルを生成するかどうかを指定します。"
	},
	"CMAKE_SHARED_LIBRARY_PREFIX": {
		"name": "CMAKE_SHARED_LIBRARY_PREFIX",
		"description": "リンクしている共有ライブラリのプレフィックス。"
	},
	"CMAKE_SHARED_LIBRARY_SUFFIX": {
		"name": "CMAKE_SHARED_LIBRARY_SUFFIX",
		"description": "リンクしている共有ライブラリのサフィックス。"
	},
	"CMAKE_SHARED_LINKER_FLAGS": {
		"name": "CMAKE_SHARED_LINKER_FLAGS",
		"description": "共有ライブラリの作成に使用するリンカー フラグ。"
	},
	"CMAKE_SHARED_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>",
		"description": "共有ライブラリをリンクするときに使用するフラグ。"
	},
	"CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "ビルド ツリーを初めて構成するときに CMAKE_SHARED_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_SHARED_LINKER_FLAGS_INIT": {
		"name": "CMAKE_SHARED_LINKER_FLAGS_INIT",
		"description": "ビルド ツリーを初めて構成するときに CMAKE_SHARED_LINKER_FLAGS キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_SHARED_MODULE_PREFIX": {
		"name": "CMAKE_SHARED_MODULE_PREFIX",
		"description": "リンクする読み込み可能モジュールのプレフィックス。"
	},
	"CMAKE_SHARED_MODULE_SUFFIX": {
		"name": "CMAKE_SHARED_MODULE_SUFFIX",
		"description": "リンクしている共有ライブラリのサフィックス。"
	},
	"CMAKE_SIZEOF_VOID_P": {
		"name": "CMAKE_SIZEOF_VOID_P",
		"description": "void ポインターのサイズ。"
	},
	"CMAKE_SKIP_BUILD_RPATH": {
		"name": "CMAKE_SKIP_BUILD_RPATH",
		"description": "ビルド ツリーには RPATH を含めないでください。"
	},
	"CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": {
		"name": "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY",
		"description": "すべてのターゲットに依存するインストール ターゲットは作成しないでください。"
	},
	"CMAKE_SKIP_INSTALL_RPATH": {
		"name": "CMAKE_SKIP_INSTALL_RPATH",
		"description": "インストール ツリーには RPATH を含めないでください。"
	},
	"CMAKE_SKIP_INSTALL_RULES": {
		"name": "CMAKE_SKIP_INSTALL_RULES",
		"description": "インストール 規則の生成を無効にするかどうか。"
	},
	"CMAKE_SKIP_RPATH": {
		"name": "CMAKE_SKIP_RPATH",
		"description": "true の場合、実行時パス情報を追加しません。"
	},
	"CMAKE_SKIP_TEST_ALL_DEPENDENCY": {
		"name": "CMAKE_SKIP_TEST_ALL_DEPENDENCY",
		"description": "テスト ターゲットがすべてのターゲットに依存するかどうかを制御します。"
	},
	"CMAKE_SOURCE_DIR": {
		"name": "CMAKE_SOURCE_DIR",
		"description": "ソース ツリーの最上位レベルのパス。"
	},
	"CMAKE_STAGING_PREFIX": {
		"name": "CMAKE_STAGING_PREFIX",
		"description": "この変数には、クロス コンパイルするときのインストール先のパスを設定することができます。CMAKE_SYSROOT のパスが読み取り専用であるか、または何かの理由で初期状態のままにしなければならない場合に便利です。"
	},
	"CMAKE_STATIC_LIBRARY_PREFIX": {
		"name": "CMAKE_STATIC_LIBRARY_PREFIX",
		"description": "リンクするスタティック ライブラリのプレフィックス。"
	},
	"CMAKE_STATIC_LIBRARY_SUFFIX": {
		"name": "CMAKE_STATIC_LIBRARY_SUFFIX",
		"description": "リンクするスタティック ライブラリのサフィックス。"
	},
	"CMAKE_STATIC_LINKER_FLAGS": {
		"name": "CMAKE_STATIC_LINKER_FLAGS",
		"description": "スタティック ライブラリを作成するために使用されるフラグ。これらのフラグは、スタティック ライブラリを作成するときに、アーカイバーに渡されます。"
	},
	"CMAKE_STATIC_LINKER_FLAGS_<CONFIG>": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>",
		"description": "スタティック ライブラリを作成するために使用されるフラグ。これらのフラグは、<CONFIG> 構成でスタティック ライブラリを作成するときに、アーカイバーに渡されます。"
	},
	"CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT",
		"description": "ビルド ツリーが初めて構成されるときに CMAKE_STATIC_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用する値。この変数は、ツールチェーン ファイルで設定することを想定したものです。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_STATIC_LINKER_FLAGS_INIT": {
		"name": "CMAKE_STATIC_LINKER_FLAGS_INIT",
		"description": "ビルド ツリーが初めて構成されるときに CMAKE_STATIC_LINKER_FLAGS キャッシュ エントリを初期化するために使用する値。この変数は、ツールチェーン ファイルで設定することを想定したものです。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。"
	},
	"CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": {
		"name": "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS",
		"description": "この変数には、環境変数の一覧が、構文 var=value のトークンの一覧という形式で入ります。"
	},
	"CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": {
		"name": "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE",
		"description": "最上位レベルの CMakeLists.txt ファイルの末尾でこの変数が ON に評価されると、Sublime Text 2 追加ジェネレーターは、ソース ツリーの内側にあるビルド ツリーを .sublime-project から除外します。"
	},
	"CMAKE_SUPPRESS_REGENERATION": {
		"name": "CMAKE_SUPPRESS_REGENERATION",
		"description": "CMAKE_SUPPRESS_REGENERATION が OFF の場合 (これが既定値)、CMake は、他のすべてのターゲットが依存する特殊なターゲットを追加することで、ビルド システムをチェックし、必要に応じて、ターゲットの仕様のソースが変更された場合に CMake を再実行してビルド システムを再生成します。"
	},
	"CMAKE_Swift_COMPILATION_MODE": {
		"name": "CMAKE_Swift_COMPILATION_MODE",
		"description": "Swift によるターゲットのコンパイル方法を指定します。この変数は、ターゲットの作成時にターゲットの Swift_COMPILATION_MODE プロパティを初期化するために使用されます。"
	},
	"CMAKE_Swift_LANGUAGE_VERSION": {
		"name": "CMAKE_Swift_LANGUAGE_VERSION",
		"description": "Swift 言語のバージョン番号に設定します。設定されていない場合、ホスト Xcode バージョンで使用可能であることが判明している最も古いバージョンが想定されます。"
	},
	"CMAKE_Swift_MODULE_DIRECTORY": {
		"name": "CMAKE_Swift_MODULE_DIRECTORY",
		"description": "Swift のモジュール出力ディレクトリ。"
	},
	"CMAKE_Swift_NUM_THREADS": {
		"name": "CMAKE_Swift_NUM_THREADS",
		"description": "Swift ターゲットの並列コンパイルのスレッド数。"
	},
	"CMAKE_SYSROOT": {
		"name": "CMAKE_SYSROOT",
		"description": "--sysroot フラグでコンパイラに渡すパス。"
	},
	"CMAKE_SYSROOT_COMPILE": {
		"name": "CMAKE_SYSROOT_COMPILE",
		"description": "ソース ファイルのコンパイル中に --sysroot フラグでコンパイラに渡すパス。これは CMAKE_SYSROOT と同じですが、ソースのコンパイル時にのみ使用され、リンク時には使用されません。"
	},
	"CMAKE_SYSROOT_LINK": {
		"name": "CMAKE_SYSROOT_LINK",
		"description": "リンク時に --sysroot フラグでコンパイラに渡すパス。これは CMAKE_SYSROOT と同じですが、リンク時にのみ使用され、ソースのコンパイル時には使用されません。"
	},
	"CMAKE_SYSTEM": {
		"name": "CMAKE_SYSTEM",
		"description": "CMake がコンパイルの対象にしているオペレーティング システムの複合名。"
	},
	"CMAKE_SYSTEM_APPBUNDLE_PATH": {
		"name": "CMAKE_SYSTEM_APPBUNDLE_PATH",
		"description": "find_program および find_package のコマンドで使用される、macOS アプリケーション バンドルの検索パス。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_APPBUNDLE_PATH を使用してください。"
	},
	"CMAKE_SYSTEM_FRAMEWORK_PATH": {
		"name": "CMAKE_SYSTEM_FRAMEWORK_PATH",
		"description": "find_library、find_package、find_path、find_file のコマンドで使用される、macOS フレームワークの検索パス。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_FRAMEWORK_PATH を使用してください。"
	},
	"CMAKE_SYSTEM_IGNORE_PATH": {
		"name": "CMAKE_SYSTEM_IGNORE_PATH",
		"description": "さまざまな find...() コマンドで無視されるディレクトリのセミコロン区切りの一覧。"
	},
	"CMAKE_SYSTEM_IGNORE_PREFIX_PATH": {
		"name": "CMAKE_SYSTEM_IGNORE_PREFIX_PATH",
		"description": "find_program、find_library、find_file、find_path コマンドで無視される検索プレフィックスのセミコロン区切りの一覧。プレフィックスは、find_package コマンドの構成モードでも無視されます (モジュール モードは影響を受けません)。代わりに特定のディレクトリを無視するには、CMAKE_IGNORE_NONPREFIX_VAR を参照してください。"
	},
	"CMAKE_SYSTEM_INCLUDE_PATH": {
		"name": "CMAKE_SYSTEM_INCLUDE_PATH",
		"description": "find_file および find_path のコマンドの検索パスを指定するディレクトリをセミコロンで区切った一覧。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_INCLUDE_PATH を使用してください。CMAKE_SYSTEM_PREFIX_PATH もご覧ください。"
	},
	"CMAKE_SYSTEM_LIBRARY_PATH": {
		"name": "CMAKE_SYSTEM_LIBRARY_PATH",
		"description": "find_library コマンドの検索パスを指定するディレクトリをセミコロンで区切った一覧。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_LIBRARY_PATH を使用してください。CMAKE_SYSTEM_PREFIX_PATH もご覧ください。"
	},
	"CMAKE_SYSTEM_NAME": {
		"name": "CMAKE_SYSTEM_NAME",
		"description": "CMake がビルドの対象にしているオペレーティング システムの名前。OS のバージョンについては CMAKE_SYSTEM_VERSION 変数をご覧ください。"
	},
	"CMAKE_SYSTEM_PREFIX_PATH": {
		"name": "CMAKE_SYSTEM_PREFIX_PATH",
		"description": "find_package、find_program、find_library、find_file、find_path コマンドで検索するインストール プレフィックスを指定するディレクトリのセミコロン区切りリスト。各コマンドは自らのドキュメントで指定されているように、適切なサブディレクトリ (bin、lib、include など) を追加します。"
	},
	"CMAKE_SYSTEM_PROCESSOR": {
		"name": "CMAKE_SYSTEM_PROCESSOR",
		"description": "クロス コンパイルではない場合、この変数は CMAKE_HOST_SYSTEM_PROCESSOR 変数と同じ値になります。多くの場合、これはビルドのターゲット アーキテクチャに対応していますが、これは保証されていません。(例: Windows では、32 ビットのターゲットで MSVC cl コンパイラを使用している場合でも、ホストが AMD64 である場合があります)。"
	},
	"CMAKE_SYSTEM_PROGRAM_PATH": {
		"name": "CMAKE_SYSTEM_PROGRAM_PATH",
		"description": "find_program コマンドの検索パスを指定するディレクトリをセミコロンで区切った一覧。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_PROGRAM_PATH を使用してください。CMAKE_SYSTEM_PREFIX_PATH もご覧ください。"
	},
	"CMAKE_SYSTEM_VERSION": {
		"name": "CMAKE_SYSTEM_VERSION",
		"description": "CMake がビルドの対象にしているオペレーティング システムのバージョン。OS の名前については CMAKE_SYSTEM_NAME 変数をご覧ください。"
	},
	"CMAKE_TASKING_TOOLSET": {
		"name": "CMAKE_TASKING_TOOLSET",
		"description": "コンパイラを提供するタスク ツールセットを選択する"
	},
	"CMAKE_TEST_LAUNCHER": {
		"name": "CMAKE_TEST_LAUNCHER",
		"description": "この変数は、実行可能ターゲットの TEST_LAUNCHER ターゲット プロパティの作成時に初期化するために使用されます。これは、実行可能ターゲットを実行するテストを実行するための起動ツールを指定するために使用され、add_test コマンドによって追加されます。"
	},
	"CMAKE_TLS_CAINFO": {
		"name": "CMAKE_TLS_CAINFO",
		"description": "file と file コマンドの TLS_CAINFO オプションの既定値を指定します。既定では設定が解除されています。"
	},
	"CMAKE_TLS_VERIFY": {
		"name": "CMAKE_TLS_VERIFY",
		"description": "ファイル およびファイル コマンドのTLS_VERIFY オプションの既定値を指定します。この変数が設定されていない場合、コマンドにより CMAKE_TLS_VERIFY 環境変数がチェックされます。どちらも設定されていない場合、既定はオフになります。"
	},
	"CMAKE_TLS_VERSION": {
		"name": "CMAKE_TLS_VERSION",
		"description": "ファイル およびファイル コマンドの TLS_VERSION オプションの既定値を指定します。この変数が設定されていない場合、コマンドにより CMAKE_TLS_VERSION 環境変数がチェックされます。"
	},
	"CMAKE_TOOLCHAIN_FILE": {
		"name": "CMAKE_TOOLCHAIN_FILE",
		"description": "cmake に指定されたツールチェーン ファイルのパス。"
	},
	"CMAKE_TRY_COMPILE_CONFIGURATION": {
		"name": "CMAKE_TRY_COMPILE_CONFIGURATION",
		"description": "try_compile および try_run のプロジェクトで使用されるビルド構成。"
	},
	"CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES": {
		"name": "CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES",
		"description": "テスト プロジェクトにプラットフォーム変数を伝播させないように try_compile コマンドに伝達するには、true 値に設定します。"
	},
	"CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": {
		"name": "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES",
		"description": "ホスト プロジェクトと同じプラットフォームをターゲットとするために、try_compile コマンドのソース ファイル シグネチャがテスト プロジェクトに伝達する必要のある変数の一覧。"
	},
	"CMAKE_TRY_COMPILE_TARGET_TYPE": {
		"name": "CMAKE_TRY_COMPILE_TARGET_TYPE",
		"description": "ソース ファイル シグネチャを使用する try_compile 呼び出しに対して生成されるターゲットの種類。有効な値は次のとおりです。"
	},
	"CMAKE_TWEAK_VERSION": {
		"name": "CMAKE_TWEAK_VERSION",
		"description": "より大きい値を定義していた可能性のある古い CMake バージョン用に作成されたコードとの互換性のため、0 に定義されています。"
	},
	"CMAKE_UNITY_BUILD": {
		"name": "CMAKE_UNITY_BUILD",
		"description": "この変数は、ターゲットの作成時にターゲットの UNITY_BUILD プロパティを初期化するために使用されます。これを true に設定すると、各ターゲット内で複数のソースをバッチ コンパイルできるようになります。この機能は Unity または Jumbo ビルドとして知られています。"
	},
	"CMAKE_UNITY_BUILD_BATCH_SIZE": {
		"name": "CMAKE_UNITY_BUILD_BATCH_SIZE",
		"description": "この変数は、ターゲットの作成時にターゲットの UNITY_BUILD_BATCH_SIZE プロパティを初期化するために使用されます。これは、unity ビルドがターゲットに対して有効になっているときに、1 つの unity ソース ファイルで結合できるソース ファイル数に対する既定の上限を指定します。"
	},
	"CMAKE_UNITY_BUILD_UNIQUE_ID": {
		"name": "CMAKE_UNITY_BUILD_UNIQUE_ID",
		"description": "この変数は、ターゲットの UNITY_BUILD_UNIQUE_ID プロパティを、その作成時に初期化するために使用されます。これにより、Unity ビルドでファイルごとに生成される一意識別子の名前が指定されます。"
	},
	"CMAKE_USER_MAKE_RULES_OVERRIDE": {
		"name": "CMAKE_USER_MAKE_RULES_OVERRIDE",
		"description": "プラットフォームの情報をオーバーライドする CMake ファイルを指定します。"
	},
	"CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>": {
		"name": "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>",
		"description": "<LANG> についてプラットフォームの情報をオーバーライドする CMake ファイルを指定します。"
	},
	"CMAKE_USE_RELATIVE_PATHS": {
		"name": "CMAKE_USE_RELATIVE_PATHS",
		"description": "この変数には効果がありません。以前のリリースで部分的に実装されていた効果は、CMake 3.4 で削除されました。"
	},
	"CMAKE_VERBOSE_MAKEFILE": {
		"name": "CMAKE_VERBOSE_MAKEFILE",
		"description": "Makefile のビルドからの詳細出力を有効にします。"
	},
	"CMAKE_VERIFY_INTERFACE_HEADER_SETS": {
		"name": "CMAKE_VERIFY_INTERFACE_HEADER_SETS",
		"description": "この変数は、ターゲットの作成時にターゲットの VERIFY_INTERFACE_HEADER_SETS プロパティを初期化するために使用されます。true に設定すると、ヘッダー セットの検証が有効になります。"
	},
	"CMAKE_VERSION": {
		"name": "CMAKE_VERSION",
		"description": "CMake のバージョン文字列。3 つの負でない整数コンポーネントが \".\" で区切られて並びます。その後に \"-\" とその他の情報が続くことがあります。最初の 2 つのコンポーネントは機能レベルを表し、3 つ目のコンポーネントはバグ修正レベルまたは開発日付のどちらかを表します。"
	},
	"CMAKE_VISIBILITY_INLINES_HIDDEN": {
		"name": "CMAKE_VISIBILITY_INLINES_HIDDEN",
		"description": "ターゲットが作成される時点での VISIBILITY_INLINES_HIDDEN ターゲット プロパティの既定値。"
	},
	"CMAKE_VS_DEBUGGER_COMMAND": {
		"name": "CMAKE_VS_DEBUGGER_COMMAND",
		"description": "この変数は、VS_DEBUGGER_COMMAND プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS": {
		"name": "CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS",
		"description": "この変数は、VS_DEBUGGER_COMMAND_ARGUMENTS プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_VS_DEBUGGER_ENVIRONMENT": {
		"name": "CMAKE_VS_DEBUGGER_ENVIRONMENT",
		"description": "この変数は、VS_DEBUGGER_ENVIRONMENT プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_VS_DEBUGGER_WORKING_DIRECTORY": {
		"name": "CMAKE_VS_DEBUGGER_WORKING_DIRECTORY",
		"description": "この変数は、VS_DEBUGGER_WORKING_DIRECTORY プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。"
	},
	"CMAKE_VS_DEVENV_COMMAND": {
		"name": "CMAKE_VS_DEVENV_COMMAND",
		"description": "Visual Studio 12 2013 以降のジェネレーターでは、この変数に、対応するバージョンの Visual Studio と共にインストールされた devenv.com コマンドが設定されます。Visual Studio Express エディションではこのツールが提供されていないため、この変数が空になる可能性があることにご注意ください。"
	},
	"CMAKE_VS_GLOBALS": {
		"name": "CMAKE_VS_GLOBALS",
		"description": "Key=Value レコードの一覧。ターゲットごとに、変数が Key で値が Value のターゲット プロパティ VS_GLOBAL_ が設定されます。"
	},
	"CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": {
		"name": "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD",
		"description": "既定のビルドにターゲットの INSTALL を含めます。"
	},
	"CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": {
		"name": "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD",
		"description": "既定のビルドにターゲットの PACKAGE を含めます。"
	},
	"CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": {
		"name": "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION",
		"description": "Intel Fortran プラグインがインストールされた Visual Studio 12 2013 以降向けに生成する場合、これにより .vfproj プロジェクト ファイル形式のバージョンが指定されます。これは CMake による内部使用を意図したものであるため、プロジェクト コードでは使用しないでください。"
	},
	"CMAKE_VS_JUST_MY_CODE_DEBUGGING": {
		"name": "CMAKE_VS_JUST_MY_CODE_DEBUGGING",
		"description": "Visual Studio デバッガーで [マイコードのみ] を有効にします。"
	},
	"CMAKE_VS_MSBUILD_COMMAND": {
		"name": "CMAKE_VS_MSBUILD_COMMAND",
		"description": "Visual Studio 12 2013 以上向けのジェネレーターでは、この変数に、対応するバージョンの Visual Studio と共にインストールされた MSBuild.exe コマンドが設定されます。"
	},
	"CMAKE_VS_NO_COMPILE_BATCHING": {
		"name": "CMAKE_VS_NO_COMPILE_BATCHING",
		"description": "Visual Studio ジェネレーターを使用する場合は、コンパイル バッチをオフにします。"
	},
	"CMAKE_VS_NsightTegra_VERSION": {
		"name": "CMAKE_VS_NsightTegra_VERSION",
		"description": "CMAKE_SYSTEM_NAME 変数を Android に設定して Visual Studio ジェネレーターを使用した場合、この変数には、インストールされている NVIDIA Nsight Tegra Visual Studio Edition のバージョン番号が含まれます。"
	},
	"CMAKE_VS_NUGET_PACKAGE_RESTORE": {
		"name": "CMAKE_VS_NUGET_PACKAGE_RESTORE",
		"description": "Visual Studio ジェネレーターを使用する場合、このキャッシュ変数は、msbuild がビルドの前に NuGet パッケージの復元を自動的に試行するかどうかを制御します。NuGet パッケージは、ターゲットの VS_PACKAGE_REFERENCES プロパティを使用して定義できます。パッケージ参照が定義されていない場合、この設定を行うことはありません。"
	},
	"CMAKE_VS_PLATFORM_NAME": {
		"name": "CMAKE_VS_PLATFORM_NAME",
		"description": "現在のジェネレーターで使用されている Visual Studio ターゲット プラットフォーム名です。"
	},
	"CMAKE_VS_PLATFORM_NAME_DEFAULT": {
		"name": "CMAKE_VS_PLATFORM_NAME_DEFAULT",
		"description": "CMAKE_GENERATOR_PLATFORM 変数の値を考慮に入れない、現在のジェネレーターの Visual Studio ターゲット プラットフォーム名の既定値。VS 2017 以下の Visual Studio ジェネレーターの場合、これは常に Win32 です。VS 2019 以上の場合は、ホスト プラットフォームに基づいて決まります。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET",
		"description": "Visual Studio のプラットフォーム ツールセット名。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_CUDA": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_CUDA",
		"description": "Visual Studio ツールセットで使用する NVIDIA CUDA ツールキットのバージョン。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR",
		"description": "スタンドアロン NVIDIA CUDA ツールキット (たとえば、インストーラーから抽出されたものなど) へのパスです。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_FORTRAN": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_FORTRAN",
		"description": "Visual Studio プロジェクトで使用される Fortran コンパイラ。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE",
		"description": "Visual Studio の優先されるツール アーキテクチャ。"
	},
	"CMAKE_VS_PLATFORM_TOOLSET_VERSION": {
		"name": "CMAKE_VS_PLATFORM_TOOLSET_VERSION",
		"description": "Visual Studio のプラットフォーム ツールセットのバージョン。"
	},
	"CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES",
		"description": "この変数では、Visual Studio の既定の除外ディレクトリをオーバーライドできます。"
	},
	"CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES",
		"description": "この変数では、Visual Studio の既定の実行可能ファイル ディレクトリをオーバーライドできます。"
	},
	"CMAKE_VS_SDK_INCLUDE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_INCLUDE_DIRECTORIES",
		"description": "この変数では、Visual Studio の既定のインクルード ディレクトリをオーバーライドできます。"
	},
	"CMAKE_VS_SDK_LIBRARY_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_LIBRARY_DIRECTORIES",
		"description": "この変数では、Visual Studio の既定のライブラリ ディレクトリをオーバーライドできます。"
	},
	"CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES",
		"description": "この変数では、Visual Studio の既定のライブラリ WinRT ディレクトリをオーバーライドできます。"
	},
	"CMAKE_VS_SDK_REFERENCE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_REFERENCE_DIRECTORIES",
		"description": "この変数では、Visual Studio の既定の参照ディレクトリをオーバーライドできます。"
	},
	"CMAKE_VS_SDK_SOURCE_DIRECTORIES": {
		"name": "CMAKE_VS_SDK_SOURCE_DIRECTORIES",
		"description": "この変数では、Visual Studio の既定のソース ディレクトリをオーバーライドできます。"
	},
	"CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER",
		"description": "Visual Studio ターゲット フレームワーク識別子。"
	},
	"CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION",
		"description": "Visual Studio ターゲット フレームワーク対象バージョン。"
	},
	"CMAKE_VS_TARGET_FRAMEWORK_VERSION": {
		"name": "CMAKE_VS_TARGET_FRAMEWORK_VERSION",
		"description": "Visual Studio ターゲット フレームワーク バージョン。"
	},
	"CMAKE_VS_USE_DEBUG_LIBRARIES": {
		"name": "CMAKE_VS_USE_DEBUG_LIBRARIES",
		"description": "Visual Studio ジェネレーターに、どの構成がデバッグ構成と見なされるかを指示します。これにより、.vcxproj ファイルの各構成の UseDebugLibraries 設定が制御されます。"
	},
	"CMAKE_VS_VERSION_BUILD_NUMBER": {
		"name": "CMAKE_VS_VERSION_BUILD_NUMBER",
		"description": "Visual Studio のバージョン。"
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION",
		"description": "指定された Windows ターゲット プラットフォームの最小バージョンを使用するように Visual Studio ジェネレーターに指示します。"
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION",
		"description": "Visual Studio の Windows ターゲット プラットフォームのバージョン。"
	},
	"CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM": {
		"name": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM",
		"description": "VS 2015 以降の Windows 10 SDK の最大バージョンをオーバーライドします。"
	},
	"CMAKE_VS_WINRT_BY_DEFAULT": {
		"name": "CMAKE_VS_WINRT_BY_DEFAULT",
		"description": "ターゲット プラットフォームで既定により WinRT コンパイルが有効になっており、/ZW または VS_WINRT_COMPONENT を省略した場合には、それを明示的に無効にする必要があることを VS 2010 以上の Visual Studio ジェネレーターに通知します (なお、これらのオプションのどちらかが存在する場合には、これは有効になります)"
	},
	"CMAKE_WARN_DEPRECATED": {
		"name": "CMAKE_WARN_DEPRECATED",
		"description": "非推奨の機能に対して警告を発行するかどうか。"
	},
	"CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "cmake_install.cmake スクリプトに対し、絶対 INSTALL DESTINATION を持つファイルが検出されるたびに警告するよう指示します。"
	},
	"CMAKE_WATCOM_RUNTIME_LIBRARY": {
		"name": "CMAKE_WATCOM_RUNTIME_LIBRARY",
		"description": "Watcom ABI を対象とするコンパイラで使用する Watcom ランタイム ライブラリを選択します。この変数は、ターゲットの作成時にすべてのターゲットの WATCOM_RUNTIME_LIBRARY プロパティを初期化するために使用されます。また、これは、try_compile コマンドの呼び出しによってテスト プロジェクトにも反映されます。"
	},
	"CMAKE_WIN32_EXECUTABLE": {
		"name": "CMAKE_WIN32_EXECUTABLE",
		"description": "ターゲットの WIN32_EXECUTABLE の既定値。"
	},
	"CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": {
		"name": "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS",
		"description": "WINDOWS_EXPORT_ALL_SYMBOLS ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに各ターゲット プロパティを初期化するために使用します。"
	},
	"CMAKE_XCODE_ATTRIBUTE_<an-attribute>": {
		"name": "CMAKE_XCODE_ATTRIBUTE_<an-attribute>",
		"description": "Xcode のターゲット属性を直接設定します。"
	},
	"CMAKE_XCODE_BUILD_SYSTEM": {
		"name": "CMAKE_XCODE_BUILD_SYSTEM",
		"description": "Xcode ビルド システムの選択です。"
	},
	"CMAKE_XCODE_GENERATE_SCHEME": {
		"name": "CMAKE_XCODE_GENERATE_SCHEME",
		"description": "これが有効な場合、Xcode ジェネレーターによってスキーマ ファイルが生成されます。これらは、コマンド ラインからの分析の起動、アーカイブ、テスト目的のビルド、テスト アクションのために役立ちます。"
	},
	"CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": {
		"name": "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY",
		"description": "これが有効な場合、Xcode ジェネレーターは、すべての project() コマンドに対して Xcode プロジェクト ファイルを 1 つずつ生成するのではなく、最上位の project() コマンドに対して単一の Xcode プロジェクト ファイルのみを生成します。"
	},
	"CMAKE_XCODE_LINK_BUILD_PHASE_MODE": {
		"name": "CMAKE_XCODE_LINK_BUILD_PHASE_MODE",
		"description": "この変数は、ターゲットの XCODE_LINK_BUILD_PHASE_MODE プロパティを初期化するために使用されます。これは、Xcode ジェネレーターがさまざまな種類のライブラリをリンクするために使用する方法に影響します。既定値は NONE です。"
	},
	"CMAKE_XCODE_PLATFORM_TOOLSET": {
		"name": "CMAKE_XCODE_PLATFORM_TOOLSET",
		"description": "Xcode コンパイラの選択。"
	},
	"CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Address Sanitizer] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": {
		"name": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Detect use of stack after return] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": {
		"name": "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
		"description": "生成される Xcode スキームの [オプション] セクションでドキュメントのバージョン ブラウザーを使用しているときに、デバッグを許可するかどうか。"
	},
	"CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": {
		"name": "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] を無効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": {
		"name": "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Library Loads] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": {
		"name": "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Linker API usage] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION",
		"description": "生成された Xcode スキームの Options セクションの Metal: API Validation のプロパティ値。"
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE",
		"description": "生成された Xcode スキームの [オプション] セクションにある GPU フレーム キャプチャのプロパティ値。値の例は Metal と Disabled です。"
	},
	"CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": {
		"name": "CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION",
		"description": "生成された Xcode スキームの Options セクションの Metal: Shader Validation のプロパティ値。"
	},
	"CMAKE_XCODE_SCHEME_ENVIRONMENT": {
		"name": "CMAKE_XCODE_SCHEME_ENVIRONMENT",
		"description": "生成された Xcode スキームの [引数] セクションに追加する必要のある環境変数を指定します。"
	},
	"CMAKE_XCODE_SCHEME_GUARD_MALLOC": {
		"name": "CMAKE_XCODE_SCHEME_GUARD_MALLOC",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Guard Malloc] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION": {
		"name": "CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION",
		"description": "ターゲットを実行するようにビルド構成を設定します。"
	},
	"CMAKE_XCODE_SCHEME_LAUNCH_MODE": {
		"name": "CMAKE_XCODE_SCHEME_LAUNCH_MODE",
		"description": "生成された Xcode スキームの Info セクションの Launch のプロパティ値。"
	},
	"CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] オプションの [Pause on issues] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Guard Edges] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Scribble] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_MALLOC_STACK": {
		"name": "CMAKE_XCODE_SCHEME_MALLOC_STACK",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Stack] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_THREAD_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] - [Pause on issues] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": {
		"name": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": {
		"name": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] オプションの [Pause on issues] を有効にするかどうか。"
	},
	"CMAKE_XCODE_SCHEME_WORKING_DIRECTORY": {
		"name": "CMAKE_XCODE_SCHEME_WORKING_DIRECTORY",
		"description": "生成される Xcode スキーム内に、実行およびプロファイル操作の作業ディレクトリを指定します。"
	},
	"CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": {
		"name": "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Zombie Objects] を有効にするかどうか。"
	},
	"CMAKE_XCODE_XCCONFIG": {
		"name": "CMAKE_XCODE_XCCONFIG",
		"description": "設定されている場合、Xcode ジェネレーターは指定されたファイルをグローバル XCConfig ファイルとして登録します。ターゲット レベルの XCConfig ファイルについては、XCODE_XCCONFIG ターゲット プロパティを参照してください。"
	},
	"CPACK_ABSOLUTE_DESTINATION_FILES": {
		"name": "CPACK_ABSOLUTE_DESTINATION_FILES",
		"description": "ABSOLUTE DESTINATION パスを使用してインストールされたファイルのリストです。"
	},
	"CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": {
		"name": "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY",
		"description": "最上位レベルのディレクトリの包含または除外を切り替えるブール値トグル (コンポーネントの場合)。"
	},
	"CPACK_CUSTOM_INSTALL_VARIABLES": {
		"name": "CPACK_CUSTOM_INSTALL_VARIABLES",
		"description": "CPack 変数 (例: cpack -D、CPackConfig.cmake、CPACK_PROJECT_CONFIG_FILE scripts) は、インストール スクリプトで明示的に表現されません。代わりに、CPACK_CUSTOM_INSTALL_VARIABLES 変数に varName = value ペアのリストを渡すことができます。インストール時に、リストの各項目は指定する名前 (varName) を与えられた値に設定します。空の値を用いる場合は、= を省略できます。"
	},
	"CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": " CPack に対し、絶対 INSTALL DESTINATION を持つファイルが検出されたらすぐにエラーを出すよう指示します。"
	},
	"CPACK_INCLUDE_TOPLEVEL_DIRECTORY": {
		"name": "CPACK_INCLUDE_TOPLEVEL_DIRECTORY",
		"description": "最上位レベルのディレクトリの包含または除外を切り替えるブール値トグル。"
	},
	"CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": {
		"name": "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
		"description": "パッケージ化の間に暗黙的に作成されるディレクトリの既定のアクセス許可。"
	},
	"CPACK_PACKAGING_INSTALL_PREFIX": {
		"name": "CPACK_PACKAGING_INSTALL_PREFIX",
		"description": "ビルドされたパッケージ内で使用するプレフィックス。"
	},
	"CPACK_SET_DESTDIR": {
		"name": "CPACK_SET_DESTDIR",
		"description": "パッケージ化するときに CPack が DESTDIR メカニズムを使用するかどうかを示すブール値トグル。"
	},
	"CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": {
		"name": "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
		"description": "CPack に対し、絶対 INSTALL DESTINATION を持つファイルが検出されるたびに警告するよう指示します。"
	},
	"CTEST_BINARY_DIRECTORY": {
		"name": "CTEST_BINARY_DIRECTORY",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest BuildDirectory 設定を指定します。"
	},
	"CTEST_BUILD_COMMAND": {
		"name": "CTEST_BUILD_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest MakeCommand 設定を指定します。"
	},
	"CTEST_BUILD_NAME": {
		"name": "CTEST_BUILD_NAME",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest BuildName 設定を指定します。"
	},
	"CTEST_BZR_COMMAND": {
		"name": "CTEST_BZR_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest BZRCommand 設定を指定します。"
	},
	"CTEST_BZR_UPDATE_OPTIONS": {
		"name": "CTEST_BZR_UPDATE_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest BZRUpdateOptions 設定を指定します。"
	},
	"CTEST_CHANGE_ID": {
		"name": "CTEST_CHANGE_ID",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest ChangeId 設定を指定します。"
	},
	"CTEST_CHECKOUT_COMMAND": {
		"name": "CTEST_CHECKOUT_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトで、ソース ディレクトリをチェックアウトまたは初期化する方法を ctest_start コマンドに伝えます。"
	},
	"CTEST_CONFIGURATION_TYPE": {
		"name": "CTEST_CONFIGURATION_TYPE",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest DefaultCTestConfigurationType 設定を指定します。"
	},
	"CTEST_CONFIGURE_COMMAND": {
		"name": "CTEST_CONFIGURE_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest ConfigureCommand 設定を指定します。"
	},
	"CTEST_COVERAGE_COMMAND": {
		"name": "CTEST_COVERAGE_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest CoverageCommand 設定を指定します。"
	},
	"CTEST_COVERAGE_EXTRA_FLAGS": {
		"name": "CTEST_COVERAGE_EXTRA_FLAGS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest CoverageExtraFlags 設定を指定します。"
	},
	"CTEST_CURL_OPTIONS": {
		"name": "CTEST_CURL_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest CurlOptions 設定を指定します。"
	},
	"CTEST_CUSTOM_COVERAGE_EXCLUDE": {
		"name": "CTEST_CUSTOM_COVERAGE_EXCLUDE",
		"description": "ファイルのパスにより、ctest_coverage コマンドによるカバレッジ出力からファイルを除外するために使用される正規表現の一覧。"
	},
	"CTEST_CUSTOM_ERROR_EXCEPTION": {
		"name": "CTEST_CUSTOM_ERROR_EXCEPTION",
		"description": "エラー メッセージが検出されたときに、ctest_build コマンドによるビルド出力から除外するために使用される正規表現の一覧。"
	},
	"CTEST_CUSTOM_ERROR_MATCH": {
		"name": "CTEST_CUSTOM_ERROR_MATCH",
		"description": "ctest_build コマンドによるビルド出力からエラー メッセージを検出するために使用される正規表現の一覧。"
	},
	"CTEST_CUSTOM_ERROR_POST_CONTEXT": {
		"name": "CTEST_CUSTOM_ERROR_POST_CONTEXT",
		"description": "ctest_build コマンドでエラー メッセージの後にコンテキストとして含める行の数。既定値は 10 です。"
	},
	"CTEST_CUSTOM_ERROR_PRE_CONTEXT": {
		"name": "CTEST_CUSTOM_ERROR_PRE_CONTEXT",
		"description": "ctest_build コマンドでエラー メッセージの前にコンテキストとして含める行の数。既定値は 10 です。"
	},
	"CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": {
		"name": "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE",
		"description": "失敗したテストの出力を保存するとき、これが、ctest_test コマンドによって収集される最大サイズ (バイト) になります。既定値は 307200 (300 KiB) です。実行可能なトランザクション モードについては、「CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION」を参照してください。"
	},
	"CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": {
		"name": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS",
		"description": "1 つのビルド ステップで検出されるエラーの最大数。ctest_test コマンドでは、これより後の出力が切り捨てられます。既定値は 50 です。"
	},
	"CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": {
		"name": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS",
		"description": "1 つのビルド ステップで検出される警告の最大数。ctest_test コマンドでは、これより後の出力が切り捨てられます。既定値は 50 です。"
	},
	"CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": {
		"name": "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE",
		"description": "合格したテストの出力を保存するとき、これが、ctest_test コマンドによって収集される最大サイズ (バイト) になります。既定値は 1024 (1 KiB) です。実行可能なトランザクション モードについては、「CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION」を参照してください。"
	},
	"CTEST_CUSTOM_MEMCHECK_IGNORE": {
		"name": "CTEST_CUSTOM_MEMCHECK_IGNORE",
		"description": "ctest_memcheck コマンドの実行中に、テストを除外するために使用される正規表現の一覧。"
	},
	"CTEST_CUSTOM_POST_MEMCHECK": {
		"name": "CTEST_CUSTOM_POST_MEMCHECK",
		"description": "ctest_memcheck コマンドの最後に実行するコマンドの一覧。"
	},
	"CTEST_CUSTOM_POST_TEST": {
		"name": "CTEST_CUSTOM_POST_TEST",
		"description": "ctest_test コマンドの最後に実行するコマンドの一覧。"
	},
	"CTEST_CUSTOM_PRE_MEMCHECK": {
		"name": "CTEST_CUSTOM_PRE_MEMCHECK",
		"description": "ctest_memcheck コマンドの最初に実行するコマンドの一覧。"
	},
	"CTEST_CUSTOM_PRE_TEST": {
		"name": "CTEST_CUSTOM_PRE_TEST",
		"description": "ctest_test コマンドの最初に実行するコマンドの一覧。"
	},
	"CTEST_CUSTOM_TESTS_IGNORE": {
		"name": "CTEST_CUSTOM_TESTS_IGNORE",
		"description": "ctest_test コマンドで実行されるテストのセットから除外されるテスト名の一覧。"
	},
	"CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION": {
		"name": "CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION",
		"description": "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE または CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 変数を介して最大サイズが構成されている場合に備えて、テスト出力切り捨てモードを設定します。既定では、出力のテールは切り捨てられます。その他の使用可能な値は middle と head です。"
	},
	"CTEST_CUSTOM_WARNING_EXCEPTION": {
		"name": "CTEST_CUSTOM_WARNING_EXCEPTION",
		"description": "ctest_build コマンドによるビルド出力での警告メッセージの検出時に除外するために使用される正規表現の一覧。"
	},
	"CTEST_CUSTOM_WARNING_MATCH": {
		"name": "CTEST_CUSTOM_WARNING_MATCH",
		"description": "ctest_build コマンドによるビルド出力から警告メッセージを検出するために使用される正規表現の一覧。"
	},
	"CTEST_CVS_CHECKOUT": {
		"name": "CTEST_CVS_CHECKOUT",
		"description": "非推奨。代わりに CTEST_CHECKOUT_COMMAND を使用してください。"
	},
	"CTEST_CVS_COMMAND": {
		"name": "CTEST_CVS_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest CVSCommand 設定を指定します。"
	},
	"CTEST_CVS_UPDATE_OPTIONS": {
		"name": "CTEST_CVS_UPDATE_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest CVSUpdateOptions 設定を指定します。"
	},
	"CTEST_DROP_LOCATION": {
		"name": "CTEST_DROP_LOCATION",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest DropLocation 設定を指定します。"
	},
	"CTEST_DROP_METHOD": {
		"name": "CTEST_DROP_METHOD",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest DropMethod 設定を指定します。"
	},
	"CTEST_DROP_SITE": {
		"name": "CTEST_DROP_SITE",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest DropSite 設定を指定します。"
	},
	"CTEST_DROP_SITE_CDASH": {
		"name": "CTEST_DROP_SITE_CDASH",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest IsCDash 設定を指定します。"
	},
	"CTEST_DROP_SITE_PASSWORD": {
		"name": "CTEST_DROP_SITE_PASSWORD",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest DropSitePassword 設定を指定します。"
	},
	"CTEST_DROP_SITE_USER": {
		"name": "CTEST_DROP_SITE_USER",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest DropSiteUser 設定を指定します。"
	},
	"CTEST_EXTRA_COVERAGE_GLOB": {
		"name": "CTEST_EXTRA_COVERAGE_GLOB",
		"description": "ctest_coverage コマンドでカバーする必要のあるファイルを検索するために使用される正規表現の一覧。"
	},
	"CTEST_GIT_COMMAND": {
		"name": "CTEST_GIT_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest GITCommand 設定を指定します。"
	},
	"CTEST_GIT_INIT_SUBMODULES": {
		"name": "CTEST_GIT_INIT_SUBMODULES",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest GITInitSubmodules 設定を指定します。"
	},
	"CTEST_GIT_UPDATE_CUSTOM": {
		"name": "CTEST_GIT_UPDATE_CUSTOM",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest GITUpdateCustom 設定を指定します。"
	},
	"CTEST_GIT_UPDATE_OPTIONS": {
		"name": "CTEST_GIT_UPDATE_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest GITUpdateOptions 設定を指定します。"
	},
	"CTEST_HG_COMMAND": {
		"name": "CTEST_HG_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest HGCommand 設定を指定します。"
	},
	"CTEST_HG_UPDATE_OPTIONS": {
		"name": "CTEST_HG_UPDATE_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest HGUpdateOptions 設定を指定します。"
	},
	"CTEST_LABELS_FOR_SUBPROJECTS": {
		"name": "CTEST_LABELS_FOR_SUBPROJECTS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest LabelsForSubprojects 設定を指定します。"
	},
	"CTEST_MEMORYCHECK_COMMAND": {
		"name": "CTEST_MEMORYCHECK_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckCommand 設定を指定します。"
	},
	"CTEST_MEMORYCHECK_COMMAND_OPTIONS": {
		"name": "CTEST_MEMORYCHECK_COMMAND_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckCommandOptions 設定を指定します。"
	},
	"CTEST_MEMORYCHECK_SANITIZER_OPTIONS": {
		"name": "CTEST_MEMORYCHECK_SANITIZER_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckSanitizerOptions 設定を指定します。"
	},
	"CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": {
		"name": "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckSuppressionFile 設定を指定します。"
	},
	"CTEST_MEMORYCHECK_TYPE": {
		"name": "CTEST_MEMORYCHECK_TYPE",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckType 設定を指定します。有効な値は、Valgrind、Purify、BoundsChecker、DrMemory、CudaSanitizer、ThreadSanitizer、AddressSanitizer、LeakSanitizer、MemorySanitizer、UndefinedBehaviorSanitizer です。"
	},
	"CTEST_NIGHTLY_START_TIME": {
		"name": "CTEST_NIGHTLY_START_TIME",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest NightlyStartTime 設定を指定します。"
	},
	"CTEST_P4_CLIENT": {
		"name": "CTEST_P4_CLIENT",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest P4Client 設定を指定します。"
	},
	"CTEST_P4_COMMAND": {
		"name": "CTEST_P4_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest P4Command 設定を指定します。"
	},
	"CTEST_P4_OPTIONS": {
		"name": "CTEST_P4_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest P4Options 設定を指定します。"
	},
	"CTEST_P4_UPDATE_OPTIONS": {
		"name": "CTEST_P4_UPDATE_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest P4UpdateOptions 設定を指定します。"
	},
	"CTEST_RESOURCE_SPEC_FILE": {
		"name": "CTEST_RESOURCE_SPEC_FILE",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest ResourceSpecFile 設定を指定します。"
	},
	"CTEST_RUN_CURRENT_SCRIPT": {
		"name": "CTEST_RUN_CURRENT_SCRIPT",
		"description": "この値を 0 に設定すると、ctest の実行がスクリプトの最後に到達した時点で ctest -S を呼び出しても ctest がもう一度実行されません。"
	},
	"CTEST_SCP_COMMAND": {
		"name": "CTEST_SCP_COMMAND",
		"description": "レガシー オプション。使用されていません。"
	},
	"CTEST_SCRIPT_DIRECTORY": {
		"name": "CTEST_SCRIPT_DIRECTORY",
		"description": "トップレベルの CTest スクリプトを含むディレクトリです。その概念は CMAKE_SOURCE_DIR と同様です。"
	},
	"CTEST_SITE": {
		"name": "CTEST_SITE",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest Site 設定を指定します。"
	},
	"CTEST_SOURCE_DIRECTORY": {
		"name": "CTEST_SOURCE_DIRECTORY",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest SourceDirectory 設定を指定します。"
	},
	"CTEST_SUBMIT_INACTIVITY_TIMEOUT": {
		"name": "CTEST_SUBMIT_INACTIVITY_TIMEOUT",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest SubmitInactivityTimeout 設定を指定します。"
	},
	"CTEST_SUBMIT_URL": {
		"name": "CTEST_SUBMIT_URL",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest SubmitURL 設定を指定します。"
	},
	"CTEST_SVN_COMMAND": {
		"name": "CTEST_SVN_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest SVNCommand 設定を指定します。"
	},
	"CTEST_SVN_OPTIONS": {
		"name": "CTEST_SVN_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest SVNOptions 設定を指定します。"
	},
	"CTEST_SVN_UPDATE_OPTIONS": {
		"name": "CTEST_SVN_UPDATE_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest SVNUpdateOptions 設定を指定します。"
	},
	"CTEST_TEST_LOAD": {
		"name": "CTEST_TEST_LOAD",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest テスト ステップに TestLoad 設定を指定します。ctest_test コマンドの TEST_LOAD オプションの既定値を設定します。"
	},
	"CTEST_TEST_TIMEOUT": {
		"name": "CTEST_TEST_TIMEOUT",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest TimeOut 設定を指定します。"
	},
	"CTEST_TLS_VERIFY": {
		"name": "CTEST_TLS_VERIFY",
		"description": "CTest モジュールを含める前に、ctest ダッシュボード クライアント スクリプトまたはプロジェクト CMakeLists.txt コードで CTest TLSVerify 設定を指定してください。この値は、https:// URL を使用してダッシュボードに送信するときにサーバー証明書を検証するかどうかを示すブール値です。"
	},
	"CTEST_TLS_VERSION": {
		"name": "CTEST_TLS_VERSION",
		"description": "CTest モジュールを含める前に、ctest ダッシュボード クライアント スクリプトまたはプロジェクト CMakeLists.txt コードで CTest TLSVersion 設定を指定してください。この値は、HTTPS:// URL を使用してダッシュボードに送信するときに許可される最小の TLS バージョンです。"
	},
	"CTEST_TRIGGER_SITE": {
		"name": "CTEST_TRIGGER_SITE",
		"description": "レガシー オプション。使用されていません。"
	},
	"CTEST_UPDATE_COMMAND": {
		"name": "CTEST_UPDATE_COMMAND",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateCommand 設定を指定します。"
	},
	"CTEST_UPDATE_OPTIONS": {
		"name": "CTEST_UPDATE_OPTIONS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateOptions 設定を指定します。"
	},
	"CTEST_UPDATE_VERSION_ONLY": {
		"name": "CTEST_UPDATE_VERSION_ONLY",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateVersionOnly 設定を指定します。"
	},
	"CTEST_UPDATE_VERSION_OVERRIDE": {
		"name": "CTEST_UPDATE_VERSION_OVERRIDE",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateVersionOverride  設定を指定します。"
	},
	"CTEST_USE_LAUNCHERS": {
		"name": "CTEST_USE_LAUNCHERS",
		"description": "ctest ダッシュボードのクライアント スクリプトの CTest UseLaunchers 設定を指定します。"
	},
	"CYGWIN": {
		"name": "CYGWIN",
		"description": "Cygwin の場合は true。"
	},
	"ENV": {
		"name": "ENV",
		"description": "環境変数を読み取る演算子です。"
	},
	"EXECUTABLE_OUTPUT_PATH": {
		"name": "EXECUTABLE_OUTPUT_PATH",
		"description": "以前の実行可能ファイルの場所の変数です。"
	},
	"GHSMULTI": {
		"name": "GHSMULTI",
		"description": "Green Hills MULTI ジェネレーターを使用している場合は 1 です。"
	},
	"IOS": {
		"name": "IOS",
		"description": "ターゲット システム (CMAKE_SYSTEM_NAME) が iOS である場合は 1 に設定します。"
	},
	"LIBRARY_OUTPUT_PATH": {
		"name": "LIBRARY_OUTPUT_PATH",
		"description": "以前のライブラリの場所の変数。"
	},
	"LINUX": {
		"name": "LINUX",
		"description": "ターゲット システムが Linux の場合は true に設定します。"
	},
	"MINGW": {
		"name": "MINGW",
		"description": "Windows 上の GNU ABI (MinGW) をターゲットとするコンパイラで少なくとも 1 つの言語が有効になっている場合は、true 値に設定します。"
	},
	"MSVC": {
		"name": "MSVC",
		"description": "コンパイラが Microsoft Visual C++ のいずれかのバージョンであるか、Visual C++ cl コマンド ライン構文をシミュレートする別のコンパイラである場合は、true に設定します。"
	},
	"MSVC10": {
		"name": "MSVC10",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC11": {
		"name": "MSVC11",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC12": {
		"name": "MSVC12",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC14": {
		"name": "MSVC14",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC60": {
		"name": "MSVC60",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC70": {
		"name": "MSVC70",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC71": {
		"name": "MSVC71",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC80": {
		"name": "MSVC80",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC90": {
		"name": "MSVC90",
		"description": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。"
	},
	"MSVC_IDE": {
		"name": "MSVC_IDE",
		"description": "Microsoft Visual C++ IDE を使用している場合は true です。"
	},
	"MSVC_TOOLSET_VERSION": {
		"name": "MSVC_TOOLSET_VERSION",
		"description": "使用されている Microsoft Visual C/C++ のツールセット バージョンです。MSVC 系が使用されている場合、この変数は、MSVC_VERSION 変数で指定されているコンパイラのバージョンに基づいて設定されます。"
	},
	"MSVC_VERSION": {
		"name": "MSVC_VERSION",
		"description": "Microsoft Visual C/C++ が使用されている場合、そのバージョンです。Visual C++ をシミュレートするコンパイラが使用されている場合、この変数は _MSC_VER プリプロセッサ定義で指定されたとおりにシミュレートされたツールセット バージョンに設定されます。"
	},
	"MSYS": {
		"name": "MSYS",
		"description": "MSYS Makefile ジェネレーターを使用する場合は True です。"
	},
	"<PackageName>_ROOT": {
		"name": "<PackageName>_ROOT",
		"description": "find_package (<PackageName>) を呼び出すと、<PackageName>_ROOT CMake 変数で指定されたプレフィックスが検索されます。ここで、<PackageName> は find_package の呼び出しで指定された (大文字と小文字が区別された) 名前であり、_ROOT はリテラルです。たとえば、find_package (Foo) は、Foo_ROOT CMake 変数で指定されたプレフィックスを検索します (設定されている場合)。ポリシー CMP0074 を参照してください。"
	},
	"<PROJECT-NAME>_BINARY_DIR": {
		"name": "<PROJECT-NAME>_BINARY_DIR",
		"description": "指定されたプロジェクトの最上位レベルのバイナリ ディレクトリです。"
	},
	"<PROJECT-NAME>_DESCRIPTION": {
		"name": "<PROJECT-NAME>_DESCRIPTION",
		"description": "プロジェクト名が <PROJECT-NAME> であるプロジェクト コマンドの最新の呼び出しの DESCRIPTION オプションに指定された値です (存在する場合)。"
	},
	"<PROJECT-NAME>_HOMEPAGE_URL": {
		"name": "<PROJECT-NAME>_HOMEPAGE_URL",
		"description": "プロジェクト名が <PROJECT-NAME> であるプロジェクト コマンドの最新の呼び出しの HOMEPAGE_URL オプションに指定された値です (存在する場合)。"
	},
	"<PROJECT-NAME>_IS_TOP_LEVEL": {
		"name": "<PROJECT-NAME>_IS_TOP_LEVEL",
		"description": "名前付きプロジェクトが最上位レベルの CMakeLists.txt ファイルで呼び出されたかどうかを示すブール変数。"
	},
	"<PROJECT-NAME>_SOURCE_DIR": {
		"name": "<PROJECT-NAME>_SOURCE_DIR",
		"description": "指定されたプロジェクトの最上位レベルのソース ディレクトリです。"
	},
	"<PROJECT-NAME>_VERSION": {
		"name": "<PROJECT-NAME>_VERSION",
		"description": "プロジェクト名が <PROJECT-NAME> であるプロジェクト コマンドの最新の呼び出しの VERSION オプションに指定された値です (存在する場合)。"
	},
	"<PROJECT-NAME>_VERSION_MAJOR": {
		"name": "<PROJECT-NAME>_VERSION_MAJOR",
		"description": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の最初のバージョン番号コンポーネントです。"
	},
	"<PROJECT-NAME>_VERSION_MINOR": {
		"name": "<PROJECT-NAME>_VERSION_MINOR",
		"description": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の 2 番目のバージョン番号コンポーネントです。"
	},
	"<PROJECT-NAME>_VERSION_PATCH": {
		"name": "<PROJECT-NAME>_VERSION_PATCH",
		"description": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の 3 番目のバージョン番号コンポーネントです。"
	},
	"<PROJECT-NAME>_VERSION_TWEAK": {
		"name": "<PROJECT-NAME>_VERSION_TWEAK",
		"description": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の 4 番目のバージョン番号コンポーネントです。"
	},
	"PROJECT_BINARY_DIR": {
		"name": "PROJECT_BINARY_DIR",
		"description": "プロジェクト用のディレクトリをビルドするための完全なパスです。"
	},
	"PROJECT_DESCRIPTION": {
		"name": "PROJECT_DESCRIPTION",
		"description": "project コマンドに与えられるプロジェクトの簡単な説明です。"
	},
	"PROJECT_HOMEPAGE_URL": {
		"name": "PROJECT_HOMEPAGE_URL",
		"description": "プロジェクトのホームページ URL です。"
	},
	"PROJECT_IS_TOP_LEVEL": {
		"name": "PROJECT_IS_TOP_LEVEL",
		"description": "現在のスコープまたはその上位における直近で呼び出したプロジェクトコマンドが、最上位の CMakeLists.txt ファイルに含まれているかどうかを示すブール変数。"
	},
	"PROJECT_NAME": {
		"name": "PROJECT_NAME",
		"description": "project コマンドに指定されたプロジェクトの名前です。"
	},
	"PROJECT_SOURCE_DIR": {
		"name": "PROJECT_SOURCE_DIR",
		"description": "これは、現在のディレクトリ スコープまたはそのいずれかの親によって実行されたプロジェクト コマンドへの最後の呼び出しのソース ディレクトリです。子ディレクトリ スコープ内で実行されたプロジェクトへの呼び出しの影響は受けません (現在のスコープからの add_subdirectory への呼び出し内からなど)。"
	},
	"PROJECT_VERSION": {
		"name": "PROJECT_VERSION",
		"description": "プロジェクト コマンドの最新の呼び出しの VERSION オプションに指定された値です (存在する場合)。"
	},
	"PROJECT_VERSION_MAJOR": {
		"name": "PROJECT_VERSION_MAJOR",
		"description": "project コマンドで設定された PROJECT_VERSION 変数の最初のバージョン番号コンポーネントです。"
	},
	"PROJECT_VERSION_MINOR": {
		"name": "PROJECT_VERSION_MINOR",
		"description": "project コマンドで設定された PROJECT_VERSION 変数の 2 番目のバージョン番号コンポーネントです。"
	},
	"PROJECT_VERSION_PATCH": {
		"name": "PROJECT_VERSION_PATCH",
		"description": "project コマンドで設定された PROJECT_VERSION 変数の 3 番目のバージョン番号コンポーネントです。"
	},
	"PROJECT_VERSION_TWEAK": {
		"name": "PROJECT_VERSION_TWEAK",
		"description": "project コマンドで設定された PROJECT_VERSION 変数の 4 番目のバージョン番号コンポーネントです。"
	},
	"UNIX": {
		"name": "UNIX",
		"description": "ターゲット システムが UNIX または UNIX 系の場合 (例: APPLE および CYGWIN) は true に設定します。ターゲット システムについてより詳細に理解しなければならない場合は、CMAKE_SYSTEM_NAME 変数を照会する必要があります。"
	},
	"WIN32": {
		"name": "WIN32",
		"description": "ターゲット システムが Win64 などの Windows である場合は、True に設定します。"
	},
	"WINCE": {
		"name": "WINCE",
		"description": "Windows CE に CMAKE_SYSTEM_NAME 変数が設定されている場合は true です。"
	},
	"WINDOWS_PHONE": {
		"name": "WINDOWS_PHONE",
		"description": "WindowsPhone に CMAKE_SYSTEM_NAME 変数が設定されている場合は true です。"
	},
	"WINDOWS_STORE": {
		"name": "WINDOWS_STORE",
		"description": "WindowsStore に CMAKE_SYSTEM_NAME 変数が設定されている場合は true です。"
	},
	"XCODE": {
		"name": "XCODE",
		"description": "Xcode ジェネレーターを使用している場合は true です。"
	},
	"XCODE_VERSION": {
		"name": "XCODE_VERSION",
		"description": "Xcode (Xcode ジェネレーターのみ) のバージョン。"
	},
	"ADVANCED": {
		"name": "ADVANCED",
		"description": "GUI でエントリを既定で非表示にする場合に true にします。"
	},
	"HELPSTRING": {
		"name": "HELPSTRING",
		"description": "GUI のエントリに関連付けられているヘルプです。"
	},
	"MODIFIED": {
		"name": "MODIFIED",
		"description": "内部管理プロパティです。設定または取得しないでください。"
	},
	"STRINGS": {
		"name": "STRINGS",
		"description": "GUI 選択で可能な文字列エントリの値を列挙します。"
	},
	"TYPE": {
		"name": "TYPE",
		"description": "GUI のエントリのウィジェットの種類。"
	},
	"VALUE": {
		"name": "VALUE",
		"description": "キャッシュ エントリの値。"
	},
	"ADDITIONAL_CLEAN_FILES": {
		"name": "ADDITIONAL_CLEAN_FILES",
		"description": "ターゲットのグローバル クリーンの一環として削除されるファイルまたはディレクトリをセミコロンで区切った一覧。複数のターゲットや CMake 自体によって使用される、またはカスタム コマンドの出力または副産物としてキャプチャできない方法で生成される生成ファイルやディレクトリを指定するのに役立ちます。"
	},
	"ADDITIONAL_MAKE_CLEAN_FILES": {
		"name": "ADDITIONAL_MAKE_CLEAN_FILES",
		"description": "clean ステージで削除する追加のファイル。"
	},
	"BINARY_DIR": {
		"name": "BINARY_DIR",
		"description": "この読み取り専用ディレクトリのプロパティは、読み取るソースに対応するバイナリ ディレクトリへの絶対パスを報告します。"
	},
	"BUILDSYSTEM_TARGETS": {
		"name": "BUILDSYSTEM_TARGETS",
		"description": "この読み取り専用のディレクトリのプロパティには、add_library、add_executable、add_custom_target のコマンドの呼び出しでディレクトリに追加されたビルド システム ターゲットの、セミコロンで区切られた一覧が含まれています。この一覧には、インポートされたターゲットやエイリアス ターゲットは含まれていませんが、インターフェイス ライブラリは含まれています。一覧の中の各エントリは、get_property コマンドの TARGET オプションに渡すのに適している、ターゲットの適切な論理名です。"
	},
	"CACHE_VARIABLES": {
		"name": "CACHE_VARIABLES",
		"description": "現在のディレクトリで利用できるキャッシュ変数の一覧。"
	},
	"CLEAN_NO_CUSTOM": {
		"name": "CLEAN_NO_CUSTOM",
		"description": "make clean 操作中にこのディレクトリに対するカスタム コマンドの出力を削除しないように Makefile ジェネレーターに指示する場合は、true に設定します。その他のジェネレーターではこれを実装できないため、この設定は無視されます。"
	},
	"CMAKE_CONFIGURE_DEPENDS": {
		"name": "CMAKE_CONFIGURE_DEPENDS",
		"description": "構成プロセスへの追加の入力ファイルについて CMake に指示します。何らかの名前付きファイルが変更された場合、ビルド システムは CMake を再実行してファイルを再構成し、ビルド システムを再生成します。"
	},
	"COMPILE_DEFINITIONS": {
		"name": "COMPILE_DEFINITIONS",
		"description": "ディレクトリのソースをコンパイルするためのプリプロセッサ定義。"
	},
	"COMPILE_DEFINITIONS_<CONFIG>": {
		"name": "COMPILE_DEFINITIONS_<CONFIG>",
		"description": "無視されます。CMake ポリシー CMP0043 をご覧ください。"
	},
	"COMPILE_OPTIONS": {
		"name": "COMPILE_OPTIONS",
		"description": "コンパイラに渡すオプションの一覧。"
	},
	"DEFINITIONS": {
		"name": "DEFINITIONS",
		"description": "CMake 2.4 互換性の目的でのみ使用するものです。代わりに、COMPILE_DEFINITIONS を使用してください。"
	},
	"EXCLUDE_FROM_ALL": {
		"name": "EXCLUDE_FROM_ALL",
		"description": "サブディレクトリでこのディレクトリ プロパティを true の値に設定すると、そのターゲットがその先祖の \"すべて\" のターゲットから除外されます。除外されている場合、親ディレクトリで make などを実行すると、既定でそのサブディレクトリのターゲットはビルドされません。これは、そのサブディレクトリ自体の \"すべて\" のターゲットには影響しません。サブディレクトリ内で make などを実行すると、そのターゲットはビルドされます。"
	},
	"IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": {
		"name": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM",
		"description": "ディレクトリ内の依存関係に #include 行変換を指定します。"
	},
	"IMPORTED_TARGETS": {
		"name": "IMPORTED_TARGETS",
		"description": "この読み取り専用のディレクトリのプロパティには、add_library、add_executable コマンドの呼び出しでディレクトリに追加された、インポートされたセミコロン区切りのターゲット一覧が含まれています。この一覧の各エントリーは、同じディレクトリ内で呼び出されたときに get_property コマンドの TARGET オプションに渡す際の、ターゲットの論理名です。"
	},
	"INCLUDE_DIRECTORIES": {
		"name": "INCLUDE_DIRECTORIES",
		"description": "プリプロセッサのインクルード ファイルの検索ディレクトリの一覧です。"
	},
	"INCLUDE_REGULAR_EXPRESSION": {
		"name": "INCLUDE_REGULAR_EXPRESSION",
		"description": "ファイル スキャンの正規表現を含めます。"
	},
	"INTERPROCEDURAL_OPTIMIZATION": {
		"name": "INTERPROCEDURAL_OPTIMIZATION",
		"description": "このディレクトリ プロパティは既に存在していません。"
	},
	"INTERPROCEDURAL_OPTIMIZATION_<CONFIG>": {
		"name": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
		"description": "このディレクトリ プロパティは既に存在していません。"
	},
	"LABELS": {
		"name": "LABELS",
		"description": "ディレクトリとそのすべてのサブディレクトリに関連付けられたテキスト ラベルの一覧を指定します。これは、現在のディレクトリおよびサブディレクトリ内のすべてのターゲットとテストに対して、LABELS ターゲット プロパティと LABELS テスト プロパティを設定することと同じです。注: ラベルをターゲットに伝達するには、ランチャーを有効にする必要があります。"
	},
	"LINK_DIRECTORIES": {
		"name": "LINK_DIRECTORIES",
		"description": "リンカー検索のディレクトリの一覧です。"
	},
	"LINK_OPTIONS": {
		"name": "LINK_OPTIONS",
		"description": "共有ライブラリ、モジュール、実行可能ファイル ターゲットのリンク手順、およびデバイスのリンク手順に使用するオプションの一覧。"
	},
	"LISTFILE_STACK": {
		"name": "LISTFILE_STACK",
		"description": "処理中の listfiles の現在のスタックです。"
	},
	"MACROS": {
		"name": "MACROS",
		"description": "現在のディレクトリで使用可能な macro コマンドの一覧です。"
	},
	"PARENT_DIRECTORY": {
		"name": "PARENT_DIRECTORY",
		"description": "現在のサブディレクトリを追加したソース ディレクトリです。"
	},
	"RULE_LAUNCH_COMPILE": {
		"name": "RULE_LAUNCH_COMPILE",
		"description": "コンパイル規則のランチャーを指定します。"
	},
	"RULE_LAUNCH_CUSTOM": {
		"name": "RULE_LAUNCH_CUSTOM",
		"description": "カスタム規則のランチャーを指定します。"
	},
	"RULE_LAUNCH_LINK": {
		"name": "RULE_LAUNCH_LINK",
		"description": "リンク規則のランチャーを指定します。"
	},
	"SOURCE_DIR": {
		"name": "SOURCE_DIR",
		"description": "この読み取り専用のディレクトリ プロパティは、読み取るソース ディレクトリへの絶対パスを報告します。"
	},
	"SUBDIRECTORIES": {
		"name": "SUBDIRECTORIES",
		"description": "この読み取り専用のディレクトリのプロパティには、これまで add_subdirectory または subdirs コマンドによって処理されたサブディレクトリのセミコロンで区切った一覧が含まれています。各エントリは、ソース ディレクトリ (CMakeLists.txt ファイルなど) への絶対パスです。これは get_property コマンドの DIRECTORY オプションに渡すのに適しています。"
	},
	"SYSTEM": {
		"name": "SYSTEM",
		"description": "このディレクトリ プロパティは、そのディレクトリで作成されたインポートされたものではないターゲットの SYSTEM ターゲット プロパティを初期化するために使用されます。SYSTEM オプションがこれらのコマンドの引数として指定されると、add_subdirectory と FetchContent_Declare によって true に設定されます。"
	},
	"TESTS": {
		"name": "TESTS",
		"description": "テストの一覧。"
	},
	"TEST_INCLUDE_FILE": {
		"name": "TEST_INCLUDE_FILE",
		"description": "非推奨です。代わりに、TEST_INCLUDE_FILES を使用してください。"
	},
	"TEST_INCLUDE_FILES": {
		"name": "TEST_INCLUDE_FILES",
		"description": "CTest の実行時に含まれる CMake ファイルの一覧。"
	},
	"VARIABLES": {
		"name": "VARIABLES",
		"description": "現在のディレクトリで定義された変数の一覧です。"
	},
	"VS_GLOBAL_SECTION_POST_<section>": {
		"name": "VS_GLOBAL_SECTION_POST_<section>",
		"description": "Visual Studio で postSolution グローバル セクションを指定します。"
	},
	"VS_GLOBAL_SECTION_PRE_<section>": {
		"name": "VS_GLOBAL_SECTION_PRE_<section>",
		"description": "Visual Studio で preSolution グローバル セクションを指定します。"
	},
	"VS_STARTUP_PROJECT": {
		"name": "VS_STARTUP_PROJECT",
		"description": "Visual Studio ソリューションの既定のスタートアップ プロジェクトを指定します。"
	},
	"ALLOW_DUPLICATE_CUSTOM_TARGETS": {
		"name": "ALLOW_DUPLICATE_CUSTOM_TARGETS",
		"description": "重複したカスタム ターゲットの作成を許可します。"
	},
	"AUTOGEN_SOURCE_GROUP": {
		"name": "AUTOGEN_SOURCE_GROUP",
		"description": "AUTOMOC と AUTORCC、AUTOUIC によって生成されたファイルの source_group の名前。"
	},
	"AUTOGEN_TARGETS_FOLDER": {
		"name": "AUTOGEN_TARGETS_FOLDER",
		"description": "AUTOMOC が有効になっているターゲット用に CMake によって自動的に追加される *_autogen ターゲットのフォルダーの名前。"
	},
	"AUTOMOC_SOURCE_GROUP": {
		"name": "AUTOMOC_SOURCE_GROUP",
		"description": "AUTOMOC によって生成されるファイルの source_group の名前。"
	},
	"AUTOMOC_TARGETS_FOLDER": {
		"name": "AUTOMOC_TARGETS_FOLDER",
		"description": "AUTOMOC が有効になっているターゲット用に CMake によって自動的に追加される *_autogen ターゲットのフォルダーの名前。"
	},
	"AUTORCC_SOURCE_GROUP": {
		"name": "AUTORCC_SOURCE_GROUP",
		"description": "AUTORCC によって生成されるファイルの source_group の名前。"
	},
	"AUTOUIC_SOURCE_GROUP": {
		"name": "AUTOUIC_SOURCE_GROUP",
		"description": "AUTOUIC によって生成されるファイルの source_group の名前。"
	},
	"CMAKE_CUDA_KNOWN_FEATURES": {
		"name": "CMAKE_CUDA_KNOWN_FEATURES",
		"description": "このバージョンの CMake に既知の CUDA 機能の一覧。"
	},
	"CMAKE_CXX_KNOWN_FEATURES": {
		"name": "CMAKE_CXX_KNOWN_FEATURES",
		"description": "このバージョンの CMake に既知の C++ 機能の一覧。"
	},
	"CMAKE_C_KNOWN_FEATURES": {
		"name": "CMAKE_C_KNOWN_FEATURES",
		"description": "このバージョンの CMake に対して既知の C 機能の一覧。"
	},
	"CMAKE_HIP_KNOWN_FEATURES": {
		"name": "CMAKE_HIP_KNOWN_FEATURES",
		"description": "このバージョンの CMake で認識されている HIP 機能の一覧。"
	},
	"CMAKE_ROLE": {
		"name": "CMAKE_ROLE",
		"description": "現在実行中のスクリプトがどのモードであるかを示します。次のいずれかの値である可能性があります:"
	},
	"DEBUG_CONFIGURATIONS": {
		"name": "DEBUG_CONFIGURATIONS",
		"description": "デバッグの構成を指定します。"
	},
	"DISABLED_FEATURES": {
		"name": "DISABLED_FEATURES",
		"description": "CMake の実行中に無効になる機能の一覧です。"
	},
	"ECLIPSE_EXTRA_CPROJECT_CONTENTS": {
		"name": "ECLIPSE_EXTRA_CPROJECT_CONTENTS",
		"description": "生成された Eclipse cproject ファイルに挿入される追加の内容です。"
	},
	"ECLIPSE_EXTRA_NATURES": {
		"name": "ECLIPSE_EXTRA_NATURES",
		"description": "生成された Eclipse プロジェクト ファイルに追加する特性の一覧です。"
	},
	"ENABLED_FEATURES": {
		"name": "ENABLED_FEATURES",
		"description": "CMake の実行中に有効になる機能の一覧です。"
	},
	"ENABLED_LANGUAGES": {
		"name": "ENABLED_LANGUAGES",
		"description": "現在有効な言語の一覧を含む読み取り専用のプロパティ"
	},
	"FIND_LIBRARY_USE_LIB32_PATHS": {
		"name": "FIND_LIBRARY_USE_LIB32_PATHS",
		"description": "find_library コマンドが lib32 ディレクトリを自動的に検索するかどうかを示します。"
	},
	"FIND_LIBRARY_USE_LIB64_PATHS": {
		"name": "FIND_LIBRARY_USE_LIB64_PATHS",
		"description": "find_library が lib64 ディレクトリを自動的に検索するかどうかを示します。"
	},
	"FIND_LIBRARY_USE_LIBX32_PATHS": {
		"name": "FIND_LIBRARY_USE_LIBX32_PATHS",
		"description": "find_library コマンドが libx32 ディレクトリを自動的に検索するかどうかを示します。"
	},
	"FIND_LIBRARY_USE_OPENBSD_VERSIONING": {
		"name": "FIND_LIBRARY_USE_OPENBSD_VERSIONING",
		"description": "find_library が OpenBSD 形式の共有ライブラリを自動的に検索するかどうかを指定します。"
	},
	"GENERATOR_IS_MULTI_CONFIG": {
		"name": "GENERATOR_IS_MULTI_CONFIG",
		"description": "複数構成のジェネレーターで true になる読み取り専用のプロパティです。"
	},
	"GLOBAL_DEPENDS_DEBUG_MODE": {
		"name": "GLOBAL_DEPENDS_DEBUG_MODE",
		"description": "グローバル ターゲットの依存関係グラフのデバッグ モードを有効にします。"
	},
	"GLOBAL_DEPENDS_NO_CYCLES": {
		"name": "GLOBAL_DEPENDS_NO_CYCLES",
		"description": "グローバル ターゲットの依存関係グラフのサイクルを無効にします。"
	},
	"INSTALL_PARALLEL": {
		"name": "INSTALL_PARALLEL",
		"description": "Ninja ジェネレーターの並列インストール オプションを有効にします。"
	},
	"IN_TRY_COMPILE": {
		"name": "IN_TRY_COMPILE",
		"description": "try-compile の構成中に true になる読み取り専用のプロパティです。"
	},
	"JOB_POOLS": {
		"name": "JOB_POOLS",
		"description": "Ninja のみ: 使用可能なプールの一覧です。"
	},
	"PACKAGES_FOUND": {
		"name": "PACKAGES_FOUND",
		"description": "CMake の実行中に検出されたパッケージの一覧です。"
	},
	"PACKAGES_NOT_FOUND": {
		"name": "PACKAGES_NOT_FOUND",
		"description": "CMake の実行中に検出されなかったパッケージの一覧です。"
	},
	"PREDEFINED_TARGETS_FOLDER": {
		"name": "PREDEFINED_TARGETS_FOLDER",
		"description": "CMake によって自動的に追加されたターゲットのフォルダーの名前です。"
	},
	"PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE": {
		"name": "PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE",
		"description": "このグローバル プロパティが \"true\" に設定されている場合、CMAKE_PROJECT_TOP_LEVEL_INCLUDES 変数は、プロジェクト全体のシグネチャを使用する try_compile 呼び出しに伝達されます。ソース ファイル シグネチャの呼び出しは、このプロパティの影響を受けません。PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE は既定では設定されていません。"
	},
	"REPORT_UNDEFINED_PROPERTIES": {
		"name": "REPORT_UNDEFINED_PROPERTIES",
		"description": "設定されている場合、このファイルへの未定義のプロパティをすべて報告します。"
	},
	"RULE_MESSAGES": {
		"name": "RULE_MESSAGES",
		"description": "make 規則ごとにメッセージを報告するかどうかを指定します。"
	},
	"TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": {
		"name": "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS",
		"description": "共有ライブラリにアーカイブのように名前を付けることができるかどうかを設定します。"
	},
	"TARGET_MESSAGES": {
		"name": "TARGET_MESSAGES",
		"description": "各ターゲットの完了を報告するかどうかを指定します。"
	},
	"TARGET_SUPPORTS_SHARED_LIBS": {
		"name": "TARGET_SUPPORTS_SHARED_LIBS",
		"description": "ターゲット プラットフォームは共有ライブラリをサポートします。"
	},
	"USE_FOLDERS": {
		"name": "USE_FOLDERS",
		"description": "FOLDER ターゲット プロパティを使用してターゲットをフォルダーに整理するかどうかを制御します。最上位レベルの CMakeLists.txt ファイルの最後にある USE_FOLDERS の値は、動作を決定します。"
	},
	"XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": {
		"name": "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME",
		"description": "Xcode ジェネレーターによる EFFECTIVE_PLATFORM_NAME の出力を制御します。"
	},
	"CPACK_DESKTOP_SHORTCUTS": {
		"name": "CPACK_DESKTOP_SHORTCUTS",
		"description": "このファイルに対してデスクトップ上に作成するショートカット名の一覧を指定します。"
	},
	"CPACK_NEVER_OVERWRITE": {
		"name": "CPACK_NEVER_OVERWRITE",
		"description": "インストールまたは再インストール時にこのファイルがオーバーライドされないことを要求します。"
	},
	"CPACK_PERMANENT": {
		"name": "CPACK_PERMANENT",
		"description": "このファイルが削除またはアンインストールされないことを要求します。"
	},
	"CPACK_STARTUP_SHORTCUTS": {
		"name": "CPACK_STARTUP_SHORTCUTS",
		"description": "このファイルに対してスタートアップ フォルダー内に作成するショートカット名の一覧を指定します。"
	},
	"CPACK_START_MENU_SHORTCUTS": {
		"name": "CPACK_START_MENU_SHORTCUTS",
		"description": "このファイルに対してスタート メニュー内に作成するショートカット名の一覧を指定します。"
	},
	"CPACK_WIX_ACL": {
		"name": "CPACK_WIX_ACL",
		"description": "WiX インストーラーでインストールしたファイルまたはディレクトリのアクセス許可を指定します。"
	},
	"ABSTRACT": {
		"name": "ABSTRACT",
		"description": "このソース ファイルは抽象クラスです。"
	},
	"AUTORCC_OPTIONS": {
		"name": "AUTORCC_OPTIONS",
		"description": "AUTORCC 使用時の rcc に対する追加のオプション"
	},
	"AUTOUIC_OPTIONS": {
		"name": "AUTOUIC_OPTIONS",
		"description": "AUTOUIC 使用時の uic に対する追加のオプション"
	},
	"COMPILE_FLAGS": {
		"name": "COMPILE_FLAGS",
		"description": "このソース ファイルをコンパイルするときに追加する追加のフラグ。"
	},
	"CXX_SCAN_FOR_MODULES": {
		"name": "CXX_SCAN_FOR_MODULES",
		"description": "CXX_SCAN_FOR_MODULES は、CMake が C++ モジュールの依存関係のソースをスキャンするかどうかを指定するブール値です。ターゲット全体の設定向けの CXX_SCAN_FOR_MODULES も参照してください。"
	},
	"EXTERNAL_OBJECT": {
		"name": "EXTERNAL_OBJECT",
		"description": "true に設定されている場合、これはオブジェクト ファイルです。"
	},
	"Fortran_FORMAT": {
		"name": "Fortran_FORMAT",
		"description": "Fortran ソース レイアウトを示す FIXED または FREE に設定します。"
	},
	"Fortran_PREPROCESS": {
		"name": "Fortran_PREPROCESS",
		"description": "Fortran のソース ファイルを無条件に前処理する必要があるかどうかを制御します。"
	},
	"GENERATED": {
		"name": "GENERATED",
		"description": "このソース ファイルは、ビルドまたは CMake プロセスの一部として生成されます。"
	},
	"HEADER_FILE_ONLY": {
		"name": "HEADER_FILE_ONLY",
		"description": "このソース ファイルは単なるヘッダー ファイルです。"
	},
	"KEEP_EXTENSION": {
		"name": "KEEP_EXTENSION",
		"description": "出力ファイルがソース ファイルと同じ拡張子を持つようにしてください。"
	},
	"LANGUAGE": {
		"name": "LANGUAGE",
		"description": "ソース ファイルが記述されているプログラミング言語を指定します。"
	},
	"LOCATION": {
		"name": "LOCATION",
		"description": "ソース ファイルへの完全パスです。"
	},
	"MACOSX_PACKAGE_LOCATION": {
		"name": "MACOSX_PACKAGE_LOCATION",
		"description": "ソース ファイルをアプリケーション バンドル (MACOSX_BUNDLE)、コア ファンデーション バンドル (BUNDLE)、またはフレームワーク バンドル (FRAMEWORK) 内に配置します。これは macOS と iOS で適用されます。"
	},
	"OBJECT_DEPENDS": {
		"name": "OBJECT_DEPENDS",
		"description": "コンパイルされたオブジェクト ファイルが依存する追加のファイルです。"
	},
	"OBJECT_OUTPUTS": {
		"name": "OBJECT_OUTPUTS",
		"description": "Ninja または Makefile ジェネレーターの規則の追加の出力です。"
	},
	"SKIP_AUTOGEN": {
		"name": "SKIP_AUTOGEN",
		"description": "ソース ファイルを AUTOMOC、AUTOUIC、AUTORCC 処理から除外します (Qt プロジェクトの場合)。"
	},
	"SKIP_AUTOMOC": {
		"name": "SKIP_AUTOMOC",
		"description": "ソース ファイルを AUTOMOC 処理から除外します (Qt プロジェクトの場合)。"
	},
	"SKIP_AUTORCC": {
		"name": "SKIP_AUTORCC",
		"description": "ソース ファイルを AUTORCC 処理から除外します (Qt プロジェクトの場合)。"
	},
	"SKIP_AUTOUIC": {
		"name": "SKIP_AUTOUIC",
		"description": "ソース ファイルを AUTOUIC 処理から除外します (Qt プロジェクトの場合)。"
	},
	"SKIP_LINTING": {
		"name": "SKIP_LINTING",
		"description": "このプロパティを使用すると、リンティング プロセスから特定のソース ファイルを除外できます。リンティング プロセスでは、<LANG>_CPPLINT、<LANG>_CLANG_TIDY、<LANG>_CPPCHECK、<LANG>_INCLUDE_WHAT_YOU_USE などのツールをソース ファイルに対して実行したり、VERIFY_INTERFACE_HEADER_SETS の一部としてヘッダー ファイルをコンパイルしたりします。ソース ファイルに SKIP_LINTING を設定すると、指定されたリンティング ツールはその特定のファイルに対して実行されません。"
	},
	"SKIP_PRECOMPILE_HEADERS": {
		"name": "SKIP_PRECOMPILE_HEADERS",
		"description": "このソース ファイルは、PRECOMPILE_HEADERS 機能によってスキップされています。"
	},
	"SKIP_UNITY_BUILD_INCLUSION": {
		"name": "SKIP_UNITY_BUILD_INCLUSION",
		"description": "このプロパティを true に設定すると、関連付けられたターゲットで UNITY_BUILD プロパティが true に設定されている場合に、Unity ビルドによってソース ファイルがスキップされるようになります。ソース ファイルは、Unity ビルドが無効になっている場合と同じように、自動的にコンパイルされます。"
	},
	"Swift_DEPENDENCIES_FILE": {
		"name": "Swift_DEPENDENCIES_FILE",
		"description": "このプロパティは、ソースの Swift 依存関係ファイル (swiftdeps) のパスを設定します。指定しない場合、既定では <OBJECT>.swiftdeps が使用されます。"
	},
	"Swift_DIAGNOSTICS_FILE": {
		"name": "Swift_DIAGNOSTICS_FILE",
		"description": "このプロパティは、Swift 診断をシリアル化する場所を制御します。"
	},
	"SYMBOLIC": {
		"name": "SYMBOLIC",
		"description": "これは単なる規則の名前です。"
	},
	"UNITY_GROUP": {
		"name": "UNITY_GROUP",
		"description": "このプロパティでは、UNITY_BUILD_MODE が GROUP に設定されたときにソースがどのバケットに含まれるかが制御されます。"
	},
	"VS_COPY_TO_OUT_DIR": {
		"name": "VS_COPY_TO_OUT_DIR",
		"description": "Visual Studio プロジェクト ファイルのソース ファイルに <CopyToOutputDirectory> タグを設定します。有効な値は、Never、Always、PreserveNewest です。"
	},
	"VS_CSHARP_<tagname>": {
		"name": "VS_CSHARP_<tagname>",
		"description": "Visual Studio と CSharp のソース ファイル固有の構成。"
	},
	"VS_DEPLOYMENT_CONTENT": {
		"name": "VS_DEPLOYMENT_CONTENT",
		"description": "Visual Studio ジェネレーター <cmake-generators(7)> を使用してビルドした場合は、ソース ファイルを Windows Phone または Windows ストア アプリケーションによる配置のためのコンテンツとしてマークします。値は 1 または 0 に評価される必要があり、ビルド構成に基づいて選択を行うためにジェネレーター式 <cmake-generator-expressions(7)> を使用することができます。ソース ファイルの .vcxproj ファイル エントリは、値 1 および 0 に対してそれぞれ DeploymentContent および ExcludedFromBuild とマークされます。"
	},
	"VS_DEPLOYMENT_LOCATION": {
		"name": "VS_DEPLOYMENT_LOCATION",
		"description": "Visual Studio ジェネレーター <cmake-generators(7)> を使用してビルドされた場合に、Windows Phone または Windows ストア アプリケーションを使用してコンテンツ ソース ファイルの配置場所を指定します。このプロパティは、VS_DEPLOYMENT_CONTENT を使用している場合にのみ適用されます。値はアプリ パッケージへの相対パスを表し、すべての構成に適用されます。"
	},
	"VS_INCLUDE_IN_VSIX": {
		"name": "VS_INCLUDE_IN_VSIX",
		"description": "ファイルを VSIX (Visual Studio Integration Extension) 拡張パッケージに含める必要がある場合に指定するブール値プロパティです。これは、Visual Studio 拡張機能の開発に必要です。"
	},
	"VS_RESOURCE_GENERATOR": {
		"name": "VS_RESOURCE_GENERATOR",
		"description": "このプロパティを使用すると、このファイルに使用されるリソース ジェネレーターを指定できます。設定しない場合は、PublicResXFileCodeGenerator が既定値になります。"
	},
	"VS_SETTINGS": {
		"name": "VS_SETTINGS",
		"description": "ファイルに任意の項目メタデータを設定します。"
	},
	"VS_SHADER_DISABLE_OPTIMIZATIONS": {
		"name": "VS_SHADER_DISABLE_OPTIMIZATIONS",
		"description": ".hlsl ソース ファイルのコンパイラの最適化を無効にします。これにより、FxCompiler ツールのコマンド ラインに -Od フラグが追加されます。コンパイラの最適化を無効にするには、このプロパティに値 true を指定します。"
	},
	"VS_SHADER_ENABLE_DEBUG": {
		"name": "VS_SHADER_ENABLE_DEBUG",
		"description": ".hlsl ソース ファイルのデバッグ情報を有効にします。これにより、-Zi フラグが FxCompiler ツールのコマンドラインに追加されます。コンパイル済みシェーダーのデバッグ情報を生成するには、値 true を指定します。"
	},
	"VS_SHADER_ENTRYPOINT": {
		"name": "VS_SHADER_ENTRYPOINT",
		"description": ".hlsl ソース ファイルのシェーダーのエントリ ポイントの名前を指定します。"
	},
	"VS_SHADER_FLAGS": {
		"name": "VS_SHADER_FLAGS",
		"description": ".hlsl ソース ファイルの追加の Visual Studio シェーダー フラグを設定します。"
	},
	"VS_SHADER_MODEL": {
		"name": "VS_SHADER_MODEL",
		"description": ".hlsl ソース ファイルのシェーダー モデルを指定します。いくつかのシェーダーの種類は最新のシェーダー モデルでしか使用できません"
	},
	"VS_SHADER_OBJECT_FILE_NAME": {
		"name": "VS_SHADER_OBJECT_FILE_NAME",
		"description": ".hlsl ソース ファイルのコンパイル済みシェーダー オブジェクト ファイルのファイル名を指定します。これにより、FxCompiler ツールのコマンド ラインに -Fo フラグが追加されます。"
	},
	"VS_SHADER_OUTPUT_HEADER_FILE": {
		"name": "VS_SHADER_OUTPUT_HEADER_FILE",
		"description": ".hlsl ソース ファイルのオブジェクト コードを含む出力ヘッダー ファイルのファイル名を設定します。"
	},
	"VS_SHADER_TYPE": {
		"name": "VS_SHADER_TYPE",
		"description": ".hlsl ソース ファイルの Visual Studio シェーダーの種類を設定します。"
	},
	"VS_SHADER_VARIABLE_NAME": {
		"name": "VS_SHADER_VARIABLE_NAME",
		"description": ".hlsl ソース ファイルのオブジェクト コードを含むヘッダー ファイルに変数の名前を設定します。"
	},
	"VS_TOOL_OVERRIDE": {
		"name": "VS_TOOL_OVERRIDE",
		"description": "ファイルの拡張機能に基づいていない新しいツールを使用して、ソース ファイルに適用される既定の Visual Studio ツールをオーバーライドします。"
	},
	"VS_XAML_TYPE": {
		"name": "VS_XAML_TYPE",
		"description": "Extensible Application Markup Language (XAML) ソース ファイルを、既定のページとは異なる種類としてマークします。最も一般的な使い方は、既定の App.xaml ファイルを ApplicationDefinition として設定することです。"
	},
	"WRAP_EXCLUDE": {
		"name": "WRAP_EXCLUDE",
		"description": "このソース ファイルをすべてのコードの折り返し手法から除外します。"
	},
	"XCODE_EXPLICIT_FILE_TYPE": {
		"name": "XCODE_EXPLICIT_FILE_TYPE",
		"description": "ソース ファイルへの参照に Xcode explicitFileType 属性を設定します。CMake ではファイル拡張子に基づいて既定値が算出されますが、このプロパティを使用することで明示的に指示することができます。"
	},
	"XCODE_FILE_ATTRIBUTES": {
		"name": "XCODE_FILE_ATTRIBUTES",
		"description": "ソース ファイルへの参照の Xcode ATTRIBUTES 設定に値を追加します。特に、これは .mig ファイルにロールを設定するために使用できます:"
	},
	"XCODE_LAST_KNOWN_FILE_TYPE": {
		"name": "XCODE_LAST_KNOWN_FILE_TYPE",
		"description": "ソース ファイルへの参照に Xcode lastKnownFileType 属性を設定します。CMake はファイル拡張子に基づいて既定値を算出しますが、このプロパティを使用することで明示的に指示することができます。"
	},
	"ATTACHED_FILES": {
		"name": "ATTACHED_FILES",
		"description": "ファイルの一覧をダッシュボードの送信に添付します。"
	},
	"ATTACHED_FILES_ON_FAIL": {
		"name": "ATTACHED_FILES_ON_FAIL",
		"description": "テストが失敗した場合は、ファイルの一覧をダッシュボードの送信に添付します。"
	},
	"COST": {
		"name": "COST",
		"description": "このプロパティは、テストのコストを示します。並列テストが有効になっている場合、テスト セット内のテストはコストの降順で実行されます。プロジェクトでは、このプロパティを浮動小数点値に設定することにより、テストのコストを明示的に定義できます。"
	},
	"DEPENDS": {
		"name": "DEPENDS",
		"description": "このテストを指定されたテスト一覧の後にのみ実行するように指定します。"
	},
	"DISABLED": {
		"name": "DISABLED",
		"description": "True に設定されている場合、テストはスキップされ、ステータスは [未実行] になります。無効なテストはテストの総数には含まれず、完了ステータスは [無効] として CDash に報告されます。"
	},
	"ENVIRONMENT": {
		"name": "ENVIRONMENT",
		"description": "テストを実行するために定義する必要がある環境変数を指定します。"
	},
	"ENVIRONMENT_MODIFICATION": {
		"name": "ENVIRONMENT_MODIFICATION",
		"description": "テストを実行するために変更する環境変数を指定します。このプロパティで実行する操作は、ENVIRONMENT プロパティが既に適用された後に実行されることに注意してください。"
	},
	"FAIL_REGULAR_EXPRESSION": {
		"name": "FAIL_REGULAR_EXPRESSION",
		"description": "テスト出力 (stdout または stderr) がこの正規表現と一致する場合、プロセス終了コードに関係なく、テストは失敗します。TIMEOUT で指定されたタイムアウトを超えるテストは、FAIL_REGULAR_EXPRESSION に関係なく失敗します。ゼロ以外のリターン コードまたはシステム レベルのテスト エラー (セグメント化エラー、シグナル中止、ヒープ エラーなど) は、正規表現が一致しない場合でもテストに失敗します。"
	},
	"FIXTURES_CLEANUP": {
		"name": "FIXTURES_CLEANUP",
		"description": "テストがクリーンアップ テストとして扱われるフィクスチャの一覧を指定します。これらのフィクスチャ名はテスト ケース名とは異なり、それらに関連するテストの名前に類似する必要はありません。"
	},
	"FIXTURES_REQUIRED": {
		"name": "FIXTURES_REQUIRED",
		"description": "テストに必要なフィクスチャの一覧を指定します。フィクスチャ名は大文字と小文字が区別され、テスト名に類似する必要はありません。"
	},
	"FIXTURES_SETUP": {
		"name": "FIXTURES_SETUP",
		"description": "テストがセットアップ テストとして扱われるフィクスチャの一覧を指定します。これらのフィクスチャ名はテスト ケース名とは異なり、それらに関連するテストの名前に類似する必要はありません。"
	},
	"GENERATED_RESOURCE_SPEC_FILE": {
		"name": "GENERATED_RESOURCE_SPEC_FILE",
		"description": "このテストによって生成される、動的に生成されたリソース仕様ファイル <ctest-resource-dynamically-generated-spec-file> へのパス。"
	},
	"MEASUREMENT": {
		"name": "MEASUREMENT",
		"description": "テスト時に報告される CDASH の測定と値を指定します。"
	},
	"PASS_REGULAR_EXPRESSION": {
		"name": "PASS_REGULAR_EXPRESSION",
		"description": "テスト出力 (stdout または stderr) がテストに合格するには、この正規表現と一致する必要があります。プロセス終了コードは無視されます。TIMEOUT で指定されたタイムアウトを超えるテストは、PASS_REGULAR_EXPRESSION に関係なく失敗します。セグメント化エラー、シグナル中止、ヒープ エラーを含むシステム レベルのテスト エラーは、PASS_REGULAR_EXPRESSION が一致した場合でもテストに失敗する可能性があります。"
	},
	"PROCESSORS": {
		"name": "PROCESSORS",
		"description": "このテストに必要なプロセス スロット数を指定するように設定します。設定しない場合、既定値は 1 プロセッサです。"
	},
	"PROCESSOR_AFFINITY": {
		"name": "PROCESSOR_AFFINITY",
		"description": "CTest に、あるプロセッサのセットの CPU アフィニティを使用してテスト プロセスを起動するように依頼するには、true 値に設定します。現在のプラットフォームで有効化され、サポートされている場合、テストプロセスの起動時に、CTest は CPU アフィニティ マスクに配置するプロセッサのセットを選択します。セット内のプロセッサ数は、PROCESSORS テスト プロパティまたは CTest で使用可能なプロセッサ数のうち、どちらか小さい方によって決まります。選択されたプロセッサのセットは、PROCESSOR_AFFINITY プロパティも有効化されている他の同時実行中のテストに割り当てられているプロセッサから分離されます。"
	},
	"REQUIRED_FILES": {
		"name": "REQUIRED_FILES",
		"description": "テストの実行に必要なファイルの一覧です。ファイル名は、絶対パスが指定されていない限り、テスト WORKING_DIRECTORY を基準としています。"
	},
	"RESOURCE_GROUPS": {
		"name": "RESOURCE_GROUPS",
		"description": "テストに必要なリソースを指定して、テストに有用な方法でグループ化します。このプロパティを CTest リソース割り当て機能に統合する方法の詳細については、リソース割り当て <ctest-resource-allocation> を参照してください。"
	},
	"RESOURCE_LOCK": {
		"name": "RESOURCE_LOCK",
		"description": "このテストでロックされているリソースの一覧を指定します。"
	},
	"RUN_SERIAL": {
		"name": "RUN_SERIAL",
		"description": "このテストは、他のテストと同時に実行しないでください。"
	},
	"SKIP_REGULAR_EXPRESSION": {
		"name": "SKIP_REGULAR_EXPRESSION",
		"description": "テスト出力 (stderr または stdout) がこの正規表現と一致する場合、プロセス終了コードに関係なく、テストはスキップ済みとしてマークされます。TIMEOUT で指定されたタイムアウトを超えるテストは、SKIP_REGULAR_EXPRESSION に関係なく失敗します。セグメント化エラー、シグナル中止、ヒープ エラーを含むシステム レベルのテスト エラーは、正規表現が一致した場合でもテストに失敗する可能性があります。"
	},
	"SKIP_RETURN_CODE": {
		"name": "SKIP_RETURN_CODE",
		"description": "テストを skipped (スキップ対象) としてマークするためのリターン コードです。"
	},
	"TIMEOUT": {
		"name": "TIMEOUT",
		"description": "このテストに与えられた秒数。"
	},
	"TIMEOUT_AFTER_MATCH": {
		"name": "TIMEOUT_AFTER_MATCH",
		"description": "一致する行が出力に見つかった後のテストのタイムアウト期間を変更します。"
	},
	"TIMEOUT_SIGNAL_GRACE_PERIOD": {
		"name": "TIMEOUT_SIGNAL_GRACE_PERIOD",
		"description": "TIMEOUT_SIGNAL_NAME テスト プロパティが設定されている場合、このプロパティは、カスタム シグナルの送信後にテスト プロセスが終了するまで待機する秒数を指定します。それ以外の場合、このプロパティには意味がありません。"
	},
	"TIMEOUT_SIGNAL_NAME": {
		"name": "TIMEOUT_SIGNAL_NAME",
		"description": "テスト プロセスのタイムアウトに達したときにテスト プロセスに送信するカスタム シグナルを指定します。これは、POSIX シグナルをサポートするプラットフォームでのみ使用できます。Windows では使用できません。"
	},
	"WILL_FAIL": {
		"name": "WILL_FAIL",
		"description": "true の場合、合格/不合格テストの条件を反転します。WILL_FAILが true であるテストは、リターン コード 0 で失敗し、0 以外のリターン コードで合格します。TIMEOUT で指定されたタイムアウトを超えるテストは、WILL_FAIL に関係なく失敗します。セグメント化エラー、シグナル中止、ヒープ エラーを含むシステム レベルのテスト エラーは、WILL_FAILが true の場合でもテストに失敗する可能性があります。"
	},
	"WORKING_DIRECTORY": {
		"name": "WORKING_DIRECTORY",
		"description": "テストの実行可能ファイルの呼び出し元ディレクトリ。"
	},
	"AIX_EXPORT_ALL_SYMBOLS": {
		"name": "AIX_EXPORT_ALL_SYMBOLS",
		"description": "AIX では、CMake によってすべてのシンボルが、共有ライブラリから、また ENABLE_EXPORTS ターゲット プロパティが設定された実行可能ファイルから自動的にエクスポートされます。動作を抑制し、既定でシンボルがエクスポートされないようにするには、このブール型プロパティを明示的に無効にします。この場合、プロジェクトでは他の方法を使用していくつかのシンボルをエクスポートする必要があります。"
	},
	"ALIASED_TARGET": {
		"name": "ALIASED_TARGET",
		"description": "このターゲットのエイリアスとなっているターゲットの名前。"
	},
	"ALIAS_GLOBAL": {
		"name": "ALIAS_GLOBAL",
		"description": "ALIAS ターゲットターゲットをグローバルに表示するかどうかを示す読み取り専用プロパティ。"
	},
	"ANDROID_ANT_ADDITIONAL_OPTIONS": {
		"name": "ANDROID_ANT_ADDITIONAL_OPTIONS",
		"description": "Android Ant ビルド システムの追加のオプションを設定します。これは、Ant ビルドのすべてのコマンド ライン オプションを含む文字列値です。ターゲットの作成時に CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_API": {
		"name": "ANDROID_API",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android のクロス コンパイルを実行する場合、このプロパティに Android ターゲット API のバージョン (例: 15) を設定します。バージョン番号は正の 10 進数である必要があります。ターゲットの作成時に CMAKE_ANDROID_API 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_API_MIN": {
		"name": "ANDROID_API_MIN",
		"description": "Android の最小 API バージョン (例: 9) を設定します。バージョン番号は正の 10 進数である必要があります。ターゲットの作成時に CMAKE_ANDROID_API_MIN 変数が設定された場合、このプロパティはその変数の値で初期化されます。ネイティブ コードは、この API バージョンを使用してビルドされます。"
	},
	"ANDROID_ARCH": {
		"name": "ANDROID_ARCH",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android のクロス コンパイルを実行する場合、このプロパティに Android ターゲット アーキテクチャを設定します。"
	},
	"ANDROID_ASSETS_DIRECTORIES": {
		"name": "ANDROID_ASSETS_DIRECTORIES",
		"description": "ビルドする前にメイン アセット フォルダーにコピーする Android アセット ディレクトリを設定します。これは、ディレクトリのパスをセミコロンで区切って並べた文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_ASSETS_DIRECTORIES 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_GUI": {
		"name": "ANDROID_GUI",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android のクロス コンパイルを実行する場合、このプロパティは、実行可能ファイルを Android 上のアプリケーション パッケージとしてビルドするかどうかを指定します。"
	},
	"ANDROID_JAR_DEPENDENCIES": {
		"name": "ANDROID_JAR_DEPENDENCIES",
		"description": "JAR の依存関係を指定する Android プロパティを設定します。これは文字列値のプロパティです。ターゲットの作成時に CMAKE_ANDROID_JAR_DEPENDENCIES 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_JAR_DIRECTORIES": {
		"name": "ANDROID_JAR_DIRECTORIES",
		"description": "JAR ライブラリの検索先ディレクトリを指定する Android プロパティを設定します。"
	},
	"ANDROID_JAVA_SOURCE_DIR": {
		"name": "ANDROID_JAVA_SOURCE_DIR",
		"description": "Java ソース コードのルート ディレクトリを定義する Android プロパティを設定します。これは、ディレクトリのパスをセミコロンで区切って並べた文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_JAVA_SOURCE_DIR 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_NATIVE_LIB_DEPENDENCIES": {
		"name": "ANDROID_NATIVE_LIB_DEPENDENCIES",
		"description": ".so の依存関係を指定する Android プロパティを設定します。これは文字列のプロパティです。"
	},
	"ANDROID_NATIVE_LIB_DIRECTORIES": {
		"name": "ANDROID_NATIVE_LIB_DIRECTORIES",
		"description": ".so ライブラリの検索先ディレクトリを指定する Android プロパティを設定します。"
	},
	"ANDROID_PROCESS_MAX": {
		"name": "ANDROID_PROCESS_MAX",
		"description": "並列実行する Android NDK コンパイラ プロセスの最大数 (例: 4) を定義する Android プロパティを設定します。ターゲットの作成時に CMAKE_ANDROID_PROCESS_MAX 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_PROGUARD": {
		"name": "ANDROID_PROGUARD",
		"description": "このプロパティを ture に設定すると、ProGuard ツールが有効になり、コードを圧縮、最適化、難読化するために未使用コードが削除され、クラス、フィールド、メソッドの名前が意味のわかりにくいものに変更されます。ターゲットの作成時に CMAKE_ANDROID_PROGUARD 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_PROGUARD_CONFIG_PATH": {
		"name": "ANDROID_PROGUARD_CONFIG_PATH",
		"description": "ProGuard 構成ファイルの場所を指定する Android プロパティを設定します。既定のものを使用するには、空のままにします。これは、ProGuard 構成ファイルへのパスを含む文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_PROGUARD_CONFIG_PATH 変数が設定された場合、このプロパティはその値で初期化されます。"
	},
	"ANDROID_SECURE_PROPS_PATH": {
		"name": "ANDROID_SECURE_PROPS_PATH",
		"description": "セキュリティで保護されたプロパティ ファイルの場所を示す Android プロパティを設定します。これは、ファイル パスを含む文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_SECURE_PROPS_PATH 変数が設定された場合、このプロパティはその変数の値で初期化されます。"
	},
	"ANDROID_SKIP_ANT_STEP": {
		"name": "ANDROID_SKIP_ANT_STEP",
		"description": "Ant ビルド ステップをスキップするかどうかを定義する Android プロパティを設定します。ターゲットの作成時に CMAKE_ANDROID_SKIP_ANT_STEP 変数が設定された場合、これは、その変数の値で初期化されるブール値プロパティです。"
	},
	"ANDROID_STL_TYPE": {
		"name": "ANDROID_STL_TYPE",
		"description": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、このプロパティはプロジェクトの STL サポートの種類を指定します。これは、次の値のいずれかに設定する文字列プロパティです。"
	},
	"ARCHIVE_OUTPUT_DIRECTORY": {
		"name": "ARCHIVE_OUTPUT_DIRECTORY",
		"description": "XXX ターゲット ファイルをビルドするための出力ディレクトリです。"
	},
	"ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "ARCHIVE ターゲット ファイルの、構成ごとの出力ディレクトリ。"
	},
	"ARCHIVE_OUTPUT_NAME": {
		"name": "ARCHIVE_OUTPUT_NAME",
		"description": "XXX ターゲット ファイルの出力名です。"
	},
	"ARCHIVE_OUTPUT_NAME_<CONFIG>": {
		"name": "ARCHIVE_OUTPUT_NAME_<CONFIG>",
		"description": "ARCHIVE ターゲット ファイルの、構成ごとの出力名。"
	},
	"AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": {
		"name": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG",
		"description": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG は、複数構成ジェネレーターの依存関係グラフを向上させるためにターゲットに設定できるブール型プロパティです。このプロパティを有効にすると、CMake によって構成ごとのターゲットが生成されます。したがって、複数構成ジェネレーターの依存関係グラフがより正確になり、一部の再コンパイルは回避されます。"
	},
	"AUTOGEN_BUILD_DIR": {
		"name": "AUTOGEN_BUILD_DIR",
		"description": "AUTOMOC、AUTOUIC、AUTORCC がターゲットのファイルを生成するディレクトリ。"
	},
	"AUTOGEN_COMMAND_LINE_LENGTH_MAX": {
		"name": "AUTOGEN_COMMAND_LINE_LENGTH_MAX",
		"description": "コマンド ラインにすべての引数を渡すのではなく、Windows での応答ファイルの使用をトリガーする autogen ターゲット (moc または uic など) のコマンド ラインの長さの制限。"
	},
	"AUTOGEN_ORIGIN_DEPENDS": {
		"name": "AUTOGEN_ORIGIN_DEPENDS",
		"description": "元のターゲットの依存関係を対応する <ORIGIN>_autogen ターゲットに転送するためのスイッチ。"
	},
	"AUTOGEN_PARALLEL": {
		"name": "AUTOGEN_PARALLEL",
		"description": "AUTOMOC と AUTOUIC を使用しているときに開始する並列の moc または uic プロセスの数です。"
	},
	"AUTOGEN_TARGET_DEPENDS": {
		"name": "AUTOGEN_TARGET_DEPENDS",
		"description": "対応する <ORIGIN>_autogen ターゲットの追加のターゲット依存関係。"
	},
	"AUTOGEN_USE_SYSTEM_INCLUDE": {
		"name": "AUTOGEN_USE_SYSTEM_INCLUDE",
		"description": "AUTOGEN_USE_SYSTEM_INCLUDE は、ターゲットに設定できるブール型プロパティであり、autogen ターゲットのインクルード ディレクトリをシステムのインクルード ディレクトリまたは通常のインクルード ディレクトリとしてターゲットに追加する必要があることを示します。"
	},
	"AUTOMOC": {
		"name": "AUTOMOC",
		"description": "ターゲットを auto-moc で処理する必要があります (Qt プロジェクトの場合)。"
	},
	"AUTOMOC_COMPILER_PREDEFINES": {
		"name": "AUTOMOC_COMPILER_PREDEFINES",
		"description": "コンパイラ事前定義ファイル moc_predefs.h を生成する必要があるかどうかを判断するために AUTOMOC が使用するブール値。"
	},
	"AUTOMOC_DEPEND_FILTERS": {
		"name": "AUTOMOC_DEPEND_FILTERS",
		"description": "ソース ファイルの moc ファイルに対する追加の依存関係として登録されるファイル名をソース ファイルから抽出するために AUTOMOC によって使用されるフィルター定義です。"
	},
	"AUTOMOC_EXECUTABLE": {
		"name": "AUTOMOC_EXECUTABLE",
		"description": "AUTOMOC_EXECUTABLE は、AUTOMOC が有効なファイルに使用する moc 実行可能ファイルを指すファイル パスです。このプロパティを設定すると、CMake では moc バイナリの自動検出がスキップされ、バイナリが利用可能であることと正常に動作していることを確認するためにサニティテストが通常どおり実行されます。"
	},
	"AUTOMOC_MACRO_NAMES": {
		"name": "AUTOMOC_MACRO_NAMES",
		"description": "C++ ファイルを moc によって処理する必要があるかどうかを判断するために AUTOMOC によって使用される、マクロ名をセミコロンで区切った一覧。"
	},
	"AUTOMOC_MOC_OPTIONS": {
		"name": "AUTOMOC_MOC_OPTIONS",
		"description": "AUTOMOC 使用時の moc に対する追加のオプション"
	},
	"AUTOMOC_PATH_PREFIX": {
		"name": "AUTOMOC_PATH_PREFIX",
		"description": "このプロパティがオンになっている場合、CMake により AUTOMOC が有効な Qt ターゲットで moc の -p パス プレフィックス オプションが生成されます。"
	},
	"AUTORCC": {
		"name": "AUTORCC",
		"description": "ターゲットを auto-rcc で処理する必要があります (Qt プロジェクトの場合)。"
	},
	"AUTORCC_EXECUTABLE": {
		"name": "AUTORCC_EXECUTABLE",
		"description": "AUTORCC_EXECUTABLE は、AUTORCC が有効なファイルに使用する rcc 実行可能ファイルを指すファイル パスです。このプロパティを設定すると、CMake では rcc バイナリの自動検出がスキップされ、バイナリが利用可能であることと正常に動作していることを確認するためにサニティテストが通常どおり実行されます。"
	},
	"AUTOUIC": {
		"name": "AUTOUIC",
		"description": "ターゲットを auto-uic で処理する必要があります (Qt プロジェクトの場合)。"
	},
	"AUTOUIC_EXECUTABLE": {
		"name": "AUTOUIC_EXECUTABLE",
		"description": "AUTOUIC_EXECUTABLE は、AUTOUIC が有効なファイルに使用する uic 実行可能ファイルを指すファイル パスです。このプロパティを設定すると、CMake では uic バイナリの自動検出がスキップされ、バイナリが利用可能であることと正常に動作していることを確認するためにサニティテストが通常どおり実行されます。"
	},
	"AUTOUIC_SEARCH_PATHS": {
		"name": "AUTOUIC_SEARCH_PATHS",
		"description": "含まれる .ui ファイルを検索するために AUTOUIC によって使用される検索パスの一覧。"
	},
	"BUILD_RPATH": {
		"name": "BUILD_RPATH",
		"description": "ビルド ツリーにリンクされているバイナリに追加するランタイム パス (RPATH) エントリを指定するセミコロン区切りリスト (サポートするプラットフォーム用)。既定では、CMake は、ビルド ツリー内のバイナリのランタイム パスを設定して、リンクする共有ライブラリを検索するために必要であると認識される検索パスを含みます。プロジェクトでは、追加の検索パスを指定するために BUILD_RPATH を設定できます。"
	},
	"BUILD_RPATH_USE_ORIGIN": {
		"name": "BUILD_RPATH_USE_ORIGIN",
		"description": "ビルド RPATH に相対パスを使用するかどうか。"
	},
	"BUILD_WITH_INSTALL_NAME_DIR": {
		"name": "BUILD_WITH_INSTALL_NAME_DIR",
		"description": "BUILD_WITH_INSTALL_NAME_DIR は、ビルド ツリー内のターゲットの macOS install_name で INSTALL_NAME_DIR によって指定されたディレクトリを使用するかどうかを指定するブール値です。この設定は、macOS 上のターゲットにのみ適用されます。"
	},
	"BUILD_WITH_INSTALL_RPATH": {
		"name": "BUILD_WITH_INSTALL_RPATH",
		"description": "BUILD_WITH_INSTALL_RPATH は、ビルド ツリー内のターゲットを INSTALL_RPATH とリンクするかどうかを指定するブール値です。これは SKIP_BUILD_RPATH より優先され、インストールする前に再リンクする必要がなくなります。"
	},
	"BUNDLE": {
		"name": "BUNDLE",
		"description": "このターゲットは、macOS 上の CFBundle です。"
	},
	"BUNDLE_EXTENSION": {
		"name": "BUNDLE_EXTENSION",
		"description": "macOS および iOS 上の BUNDLE、FRAMEWORK、MACOSX_BUNDLE のターゲットの名前に対して使用するファイル拡張子。"
	},
	"COMMON_LANGUAGE_RUNTIME": {
		"name": "COMMON_LANGUAGE_RUNTIME",
		"description": "このターゲット プロパティを設定することで、ターゲットは C++/CLI サポートを使用してビルドするように構成されます。"
	},
	"COMPATIBLE_INTERFACE_BOOL": {
		"name": "COMPATIBLE_INTERFACE_BOOL",
		"description": "リンク インターフェイスと互換性が必要なプロパティ"
	},
	"COMPATIBLE_INTERFACE_NUMBER_MAX": {
		"name": "COMPATIBLE_INTERFACE_NUMBER_MAX",
		"description": "リンク インターフェイスからの最大値が使用されるプロパティ。"
	},
	"COMPATIBLE_INTERFACE_NUMBER_MIN": {
		"name": "COMPATIBLE_INTERFACE_NUMBER_MIN",
		"description": "リンク インターフェイスからの最小値が使用されるプロパティ。"
	},
	"COMPATIBLE_INTERFACE_STRING": {
		"name": "COMPATIBLE_INTERFACE_STRING",
		"description": "リンク インターフェイスと文字列互換性が必要なプロパティ"
	},
	"COMPILE_FEATURES": {
		"name": "COMPILE_FEATURES",
		"description": "このターゲットに対して有効なコンパイラの機能。"
	},
	"COMPILE_PDB_NAME": {
		"name": "COMPILE_PDB_NAME",
		"description": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの出力名。"
	},
	"COMPILE_PDB_NAME_<CONFIG>": {
		"name": "COMPILE_PDB_NAME_<CONFIG>",
		"description": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの構成ごとの出力名。"
	},
	"COMPILE_PDB_OUTPUT_DIRECTORY": {
		"name": "COMPILE_PDB_OUTPUT_DIRECTORY",
		"description": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの出力ディレクトリ。"
	},
	"COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの構成ごとの出力ディレクトリ。"
	},
	"COMPILE_WARNING_AS_ERROR": {
		"name": "COMPILE_WARNING_AS_ERROR",
		"description": "コンパイル時の警告をエラーとして扱うかどうかを指定します。有効にした場合、コンパイル時の警告をエラーとして扱うフラグを追加します。cmake コマンド ラインで cmake --compile-no-warning-as-error オプションが指定されている場合、このプロパティは無視されます。"
	},
	"<CONFIG>_OUTPUT_NAME": {
		"name": "<CONFIG>_OUTPUT_NAME",
		"description": "構成ごとのターゲット ファイルの古いベース名です。代わりに OUTPUT_NAME_ を使用してください。"
	},
	"<CONFIG>_POSTFIX": {
		"name": "<CONFIG>_POSTFIX",
		"description": "構成 <CONFIG> のターゲット ファイル名に追加する後置。"
	},
	"CROSSCOMPILING_EMULATOR": {
		"name": "CROSSCOMPILING_EMULATOR",
		"description": "指定されたエミュレーターを使用して、クロスコンパイル時に作成された実行可能ファイルを実行します。このコマンドは、ビルドされたターゲット システムの実行可能ファイルに対して add_test、add_custom_command、add_custom_target コマンドにプレフィックスとして追加されます。"
	},
	"CUDA_ARCHITECTURES": {
		"name": "CUDA_ARCHITECTURES",
		"description": "デバイス コードを生成するアーキテクチャの一覧です。"
	},
	"CUDA_CUBIN_COMPILATION": {
		"name": "CUDA_CUBIN_COMPILATION",
		"description": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .cubin ファイルにコンパイルします。"
	},
	"CUDA_EXTENSIONS": {
		"name": "CUDA_EXTENSIONS",
		"description": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。"
	},
	"CUDA_FATBIN_COMPILATION": {
		"name": "CUDA_FATBIN_COMPILATION",
		"description": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .fatbin ファイルにコンパイルします。"
	},
	"CUDA_OPTIX_COMPILATION": {
		"name": "CUDA_OPTIX_COMPILATION",
		"description": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .optixir ファイルにコンパイルします。"
	},
	"CUDA_PTX_COMPILATION": {
		"name": "CUDA_PTX_COMPILATION",
		"description": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .ptx ファイルにコンパイルします。"
	},
	"CUDA_RESOLVE_DEVICE_SYMBOLS": {
		"name": "CUDA_RESOLVE_DEVICE_SYMBOLS",
		"description": "CUDA のみ: 必要に応じて、特定のライブラリ ターゲットへのデバイスのリンクを有効にします。"
	},
	"CUDA_RUNTIME_LIBRARY": {
		"name": "CUDA_RUNTIME_LIBRARY",
		"description": "CUDA 言語を対象とするコンパイラで使用するための CUDA ランタイム ライブラリを選択します。"
	},
	"CUDA_SEPARABLE_COMPILATION": {
		"name": "CUDA_SEPARABLE_COMPILATION",
		"description": "CUDA のみ: デバイス コードの個別コンパイルを有効にします"
	},
	"CUDA_STANDARD": {
		"name": "CUDA_STANDARD",
		"description": "このターゲットをビルドするように要求された機能の CUDA/C++ 標準。"
	},
	"CUDA_STANDARD_REQUIRED": {
		"name": "CUDA_STANDARD_REQUIRED",
		"description": "CUDA_STANDARD の値が必須であるかどうかを示すブール値。"
	},
	"CXX_EXTENSIONS": {
		"name": "CXX_EXTENSIONS",
		"description": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。"
	},
	"CXX_MODULE_DIRS": {
		"name": "CXX_MODULE_DIRS",
		"description": "ターゲットの既定の C++ モジュール セットの基本ディレクトリのセミコロン区切りのリスト (つまり、名前と型が CXX_MODULES のファイル セット)。このプロパティは、ジェネレーター式 <cmake-generator-expressions(7)> をサポートします。"
	},
	"CXX_MODULE_DIRS_<NAME>": {
		"name": "CXX_MODULE_DIRS_<NAME>",
		"description": "ターゲットの <NAME> C++ モジュール セットの基本ディレクトリのセミコロン区切りのリストで、セットの型は CXX_MODULES です。このプロパティは、ジェネレーター式 <cmake-generator-expressions(7)> をサポートします。"
	},
	"CXX_MODULE_SET": {
		"name": "CXX_MODULE_SET",
		"description": "ターゲットの既定の C++ モジュール セット (すなわち、名前と型が CXX_MODULES であるファイル セット) のファイルのリスト。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。"
	},
	"CXX_MODULE_SETS": {
		"name": "CXX_MODULE_SETS",
		"description": "ターゲットの PRIVATE および PUBLIC C++ モジュール セットの読み取り専用リスト (つまり、型が CXX_MODULES のすべてのファイル セット)。これらのファイル セットに記載されているファイルは、IDE 統合の目的でソース ファイルとして扱われます。"
	},
	"CXX_MODULE_SET_<NAME>": {
		"name": "CXX_MODULE_SET_<NAME>",
		"description": "ターゲットの <NAME> C++ モジュール セット内のファイルのセミコロン区切りのリストで、セットの型は CXX_MODULES です。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。"
	},
	"CXX_MODULE_STD": {
		"name": "CXX_MODULE_STD",
		"description": "CXX_MODULE_STD は、ターゲットがインポート std (つまりその C++ ソース) を使用できるかどうかを指定するブール値。"
	},
	"CXX_STANDARD": {
		"name": "CXX_STANDARD",
		"description": "このターゲットをビルドするように要求された機能の C++ 標準。"
	},
	"CXX_STANDARD_REQUIRED": {
		"name": "CXX_STANDARD_REQUIRED",
		"description": "CXX_STANDARD の値が必須であるかどうかを示すブール値。"
	},
	"C_EXTENSIONS": {
		"name": "C_EXTENSIONS",
		"description": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。"
	},
	"C_STANDARD": {
		"name": "C_STANDARD",
		"description": "このターゲットをビルドするように要求された機能の C 標準。"
	},
	"C_STANDARD_REQUIRED": {
		"name": "C_STANDARD_REQUIRED",
		"description": "C_STANDARD の値が必要であるかどうかを示すブール値。"
	},
	"DEBUG_POSTFIX": {
		"name": "DEBUG_POSTFIX",
		"description": "ターゲット プロパティ <CONFIG>_POSTFIX を参照します。"
	},
	"DEFINE_SYMBOL": {
		"name": "DEFINE_SYMBOL",
		"description": "このターゲットのソースをコンパイルするときのシンボルを定義します。"
	},
	"DEPLOYMENT_ADDITIONAL_FILES": {
		"name": "DEPLOYMENT_ADDITIONAL_FILES",
		"description": "Visual Studio ジェネレーターにより生成された .vcproj ファイルに、DeploymentTool の WinCE プロジェクトの AdditionalFiles を設定します。これはリモートの WinCE デバイスでデバッグしたいときに便利です。デバイスにコピーされる追加ファイルを指定します。以下に例を示します。"
	},
	"DEPLOYMENT_REMOTE_DIRECTORY": {
		"name": "DEPLOYMENT_REMOTE_DIRECTORY",
		"description": "Visual Studio ジェネレーターによって生成された .vcproj ファイルに、DebuggerTool の DeploymentTool と RemoteExecutable の WinCE プロジェクトの RemoteDirectory を設定します。これはリモートの WinCE デバイスでデバッグしたいときに便利です。以下に例を示します。"
	},
	"DEPRECATION": {
		"name": "DEPRECATION",
		"description": "インポートされたターゲットの開発者からの非推奨メッセージ。"
	},
	"DISABLE_PRECOMPILE_HEADERS": {
		"name": "DISABLE_PRECOMPILE_HEADERS",
		"description": "PRECOMPILE_HEADERS プロパティによって指定されたヘッダー ファイルのプリコンパイルを無効にします。"
	},
	"DLL_NAME_WITH_SOVERSION": {
		"name": "DLL_NAME_WITH_SOVERSION",
		"description": "このプロパティは、WIN32 変数が設定されるときに選択される Windows プラットフォーム用に生成された DLL のファイル名に SOVERSION ターゲット プロパティを追加するかどうかを制御します。"
	},
	"DOTNET_SDK": {
		"name": "DOTNET_SDK",
		"description": "C# プロジェクトの .NET SDK を指定します。例: Microsoft .NET SDK。"
	},
	"DOTNET_TARGET_FRAMEWORK": {
		"name": "DOTNET_TARGET_FRAMEWORK",
		"description": ".NET ターゲット フレームワークを指定します。"
	},
	"DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": ".NET ターゲット フレームワーク バージョンを指定してください。"
	},
	"EchoString": {
		"name": "EchoString",
		"description": "ターゲットがビルドされるときに表示されるメッセージです。"
	},
	"ENABLE_EXPORTS": {
		"name": "ENABLE_EXPORTS",
		"description": "実行可能ファイルまたは共有ライブラリのどちらがシンボルをエクスポートするかを指定します。"
	},
	"EXCLUDE_FROM_DEFAULT_BUILD": {
		"name": "EXCLUDE_FROM_DEFAULT_BUILD",
		"description": "ターゲットを [ソリューションのビルド] から除外します。"
	},
	"EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>": {
		"name": "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>",
		"description": "[ソリューションのビルド] から除外するターゲットの構成ごとのバージョンです。"
	},
	"EXPORT_COMPILE_COMMANDS": {
		"name": "EXPORT_COMPILE_COMMANDS",
		"description": "ターゲットについて生成中にコンパイル コマンドの出力を有効または無効にします。"
	},
	"EXPORT_FIND_PACKAGE_NAME": {
		"name": "EXPORT_FIND_PACKAGE_NAME",
		"description": "インストールまたはエクスポートで find_dependency 呼び出しをエクスポートするときに、依存関係ターゲットに関連付けられているパッケージ名を制御します。これを使用して、CMake によってビルドされエクスポートされたパッケージにパッケージ名を割り当てたり、ターゲットを作成した find_package 呼び出しでパッケージをオーバーライドしたりできます。"
	},
	"EXPORT_NAME": {
		"name": "EXPORT_NAME",
		"description": "ターゲット ファイルのエクスポートされた名前です。"
	},
	"EXPORT_NO_SYSTEM": {
		"name": "EXPORT_NO_SYSTEM",
		"description": "このプロパティは、インストール コマンドとエクスポート コマンドがそれぞれターゲットをインストールまたはエクスポートする際の動作に影響します。EXPORT_NO_SYSTEMが true に設定されている場合、これらのコマンドは SYSTEM プロパティが false に設定されたインポートされたターゲットを生成します。"
	},
	"EXPORT_PROPERTIES": {
		"name": "EXPORT_PROPERTIES",
		"description": "ターゲットのためにエクスポートする追加のプロパティを一覧表示します。"
	},
	"FOLDER": {
		"name": "FOLDER",
		"description": "フォルダー階層を使用してターゲットを表示する IDE の場合、このプロパティはターゲットを配置するフォルダーの名前を指定します。フォルダーを入れ子にするには、フォルダー レベルを区切る / 文字を含む GUI/ダイアログなどの FOLDER 値を使用します。FOLDER プロパティのないターゲットは、最上位レベルのエンティティとして表示されます。同じ FOLDER プロパティ値を持つターゲットがきょうだいと同じフォルダーに表示されます。"
	},
	"Fortran_BUILDING_INSTRINSIC_MODULES": {
		"name": "Fortran_BUILDING_INSTRINSIC_MODULES",
		"description": "ターゲットが Fortran コンパイラをビルドするために Fortran 組み込みをビルドしていることを CMake Fortran プリプロセッサに指示します。"
	},
	"Fortran_MODULE_DIRECTORY": {
		"name": "Fortran_MODULE_DIRECTORY",
		"description": "ターゲットによって提供される Fortran モジュールの出力ディレクトリを指定します。"
	},
	"FRAMEWORK": {
		"name": "FRAMEWORK",
		"description": "macOS および iOS 上でフレームワーク バンドルとして共有ライブラリまたはスタティック ライブラリをビルドします。"
	},
	"FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>": {
		"name": "FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
		"description": "マルチ構成ジェネレーター (Xcode および Ninja マルチ構成など) を使用しているときに、構成 <CONFIG> のフレームワーク ファイル名に追加する接尾辞です。"
	},
	"FRAMEWORK_VERSION": {
		"name": "FRAMEWORK_VERSION",
		"description": "FRAMEWORK ターゲット プロパティ (例: A) を使用して作成されたフレームワークのバージョンです。"
	},
	"GENERATOR_FILE_NAME": {
		"name": "GENERATOR_FILE_NAME",
		"description": "このターゲットのジェネレーターのファイルです。"
	},
	"GHS_INTEGRITY_APP": {
		"name": "GHS_INTEGRITY_APP",
		"description": "実行可能ファイルのターゲットを整合性アプリケーションとして扱うかどうかを決定する ON/OFF ブール値です。"
	},
	"GHS_NO_SOURCE_GROUP_FILE": {
		"name": "GHS_NO_SOURCE_GROUP_FILE",
		"description": "ターゲットのプロジェクト ファイルが 1 つのファイルまたは複数のファイルであるべきかどうかを制御する ON/OFF ブール値です。"
	},
	"GNUtoMS": {
		"name": "GNUtoMS",
		"description": "GNU インポート ライブラリ (.dll.a) を MS 形式 (.lib) に変換します。"
	},
	"HAS_CXX": {
		"name": "HAS_CXX",
		"description": "C++ リンカー ツール (現在不使用) を使用してターゲットをリンクします。"
	},
	"HEADER_DIRS": {
		"name": "HEADER_DIRS",
		"description": "ターゲットの既定のヘッダー セット (すなわち、HEADERS 型を持つファイル セット) のベース ディレクトリのセミコロン区切りの一覧。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。"
	},
	"HEADER_DIRS_<NAME>": {
		"name": "HEADER_DIRS_<NAME>",
		"description": "ターゲットの <NAME> ヘッダー セットのベース ディレクトリのセミコロン区切りの一覧で、設定の種類は HEADERS です。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。"
	},
	"HEADER_SET": {
		"name": "HEADER_SET",
		"description": "ターゲットの既定のヘッダー セット (すなわち、名前と種類が HEADERS であるファイル セット) のファイルの一覧。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。"
	},
	"HEADER_SETS": {
		"name": "HEADER_SETS",
		"description": "ターゲットの PRIVATE および PUBLIC ヘッダー セット (すなわち、HEADERS 型を持つすべてのファイル セット) の読み取り専用の一覧。これらのファイル セットに一覧表示されているファイルは、IDE 統合の目的でソース ファイルとして扱われます。また、ファイルは、HEADER_FILE_ONLY プロパティも TRUE に設定されています。"
	},
	"HEADER_SET_<NAME>": {
		"name": "HEADER_SET_<NAME>",
		"description": "ターゲットの <NAME> ヘッダー セット内のファイルのセミコロン区切りの一覧で、種類は HEADERS に設定されます。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。"
	},
	"HIP_ARCHITECTURES": {
		"name": "HIP_ARCHITECTURES",
		"description": "デバイス コードを生成する GPU アーキテクチャの一覧。アーキテクチャ名は、CMAKE_HIP_PLATFORM に基づいて解釈されます。"
	},
	"HIP_EXTENSIONS": {
		"name": "HIP_EXTENSIONS",
		"description": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。"
	},
	"HIP_STANDARD": {
		"name": "HIP_STANDARD",
		"description": "HIP/C++ 標準でこのターゲットのビルドが要求されました。"
	},
	"HIP_STANDARD_REQUIRED": {
		"name": "HIP_STANDARD_REQUIRED",
		"description": "HIP_STANDARD の値が必須であるかどうかを示すブール値。"
	},
	"IMPORTED": {
		"name": "IMPORTED",
		"description": "ターゲットが IMPORTED であるかどうかを示す読み取り専用の表示です。"
	},
	"IMPORTED_COMMON_LANGUAGE_RUNTIME": {
		"name": "IMPORTED_COMMON_LANGUAGE_RUNTIME",
		"description": "ターゲットが C++/CLI を使用するかどうかを定義するプロパティです。"
	},
	"IMPORTED_CONFIGURATIONS": {
		"name": "IMPORTED_CONFIGURATIONS",
		"description": "インポート済みターゲットに指定された構成です。"
	},
	"IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS",
		"description": "IMPORTED ターゲットの C++ モジュール ソースをコンパイルするためのプリプロセッサ定義。"
	},
	"IMPORTED_CXX_MODULES_COMPILE_FEATURES": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_FEATURES",
		"description": "この IMPORTED ターゲットの C++ モジュールに対してコンパイラ機能が有効になっています。"
	},
	"IMPORTED_CXX_MODULES_COMPILE_OPTIONS": {
		"name": "IMPORTED_CXX_MODULES_COMPILE_OPTIONS",
		"description": "この IMPORTED ターゲットの C++ モジュールのコンパイラに渡すオプションの一覧。"
	},
	"IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES": {
		"name": "IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES",
		"description": "IMPORTED ターゲットの C++ モジュールをコンパイルするときのプリプロセッサ インクルード ファイル検索ディレクトリの一覧。"
	},
	"IMPORTED_CXX_MODULES_LINK_LIBRARIES": {
		"name": "IMPORTED_CXX_MODULES_LINK_LIBRARIES",
		"description": "ターゲットの C++ モジュール内の C++ モジュールの使用要件に使用する直接依存関係の一覧。"
	},
	"IMPORTED_GLOBAL": {
		"name": "IMPORTED_GLOBAL",
		"description": "IMPORTED ターゲットをグローバルに表示するかどうかを示します。"
	},
	"IMPORTED_IMPLIB": {
		"name": "IMPORTED_IMPLIB",
		"description": "IMPORTED ターゲットのインポート ライブラリへの完全なパスです。"
	},
	"IMPORTED_IMPLIB_<CONFIG>": {
		"name": "IMPORTED_IMPLIB_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_IMPLIB プロパティの特定バージョン。"
	},
	"IMPORTED_LIBNAME": {
		"name": "IMPORTED_LIBNAME",
		"description": "インポートされたインターフェイス ライブラリのリンク ライブラリ名を指定します。"
	},
	"IMPORTED_LIBNAME_<CONFIG>": {
		"name": "IMPORTED_LIBNAME_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LIBNAME プロパティの特定バージョン。"
	},
	"IMPORTED_LINK_DEPENDENT_LIBRARIES": {
		"name": "IMPORTED_LINK_DEPENDENT_LIBRARIES",
		"description": "インポートされた共有ライブラリの依存共有ライブラリです。"
	},
	"IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>": {
		"name": "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_DEPENDENT_LIBRARIES の特定バージョン。"
	},
	"IMPORTED_LINK_INTERFACE_LANGUAGES": {
		"name": "IMPORTED_LINK_INTERFACE_LANGUAGES",
		"description": "IMPORTED スタティック ライブラリにコンパイルされる言語です。"
	},
	"IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_INTERFACE_LANGUAGES の特定バージョン。"
	},
	"IMPORTED_LINK_INTERFACE_LIBRARIES": {
		"name": "IMPORTED_LINK_INTERFACE_LIBRARIES",
		"description": "IMPORTED ターゲットの推移的なリンク インターフェイスです。"
	},
	"IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_INTERFACE_LIBRARIES の特定バージョン。"
	},
	"IMPORTED_LINK_INTERFACE_MULTIPLICITY": {
		"name": "IMPORTED_LINK_INTERFACE_MULTIPLICITY",
		"description": "IMPORTED スタティック ライブラリのサイクルの繰り返し回数です。"
	},
	"IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>": {
		"name": "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LINK_INTERFACE_MULTIPLICITY の特定バージョン。"
	},
	"IMPORTED_LOCATION": {
		"name": "IMPORTED_LOCATION",
		"description": "IMPORTED ターゲット用のディスク上のメイン ファイルへの完全なパスです。"
	},
	"IMPORTED_LOCATION_<CONFIG>": {
		"name": "IMPORTED_LOCATION_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_LOCATION プロパティの特定バージョン。"
	},
	"IMPORTED_NO_SONAME": {
		"name": "IMPORTED_NO_SONAME",
		"description": "IMPORTED 共有ライブラリ ターゲットが soname を持たないように指定します。"
	},
	"IMPORTED_NO_SONAME_<CONFIG>": {
		"name": "IMPORTED_NO_SONAME_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_NO_SONAME プロパティの特定バージョン。"
	},
	"IMPORTED_NO_SYSTEM": {
		"name": "IMPORTED_NO_SYSTEM",
		"description": "インポートされたターゲットで IMPORTED_NO_SYSTEM を true に設定すると、システム ターゲットではないことを指定することになります。これには、次の効果があります:"
	},
	"IMPORTED_OBJECTS": {
		"name": "IMPORTED_OBJECTS",
		"description": "インポートされたオブジェクト ライブラリのディスク上のオブジェクト ファイルへの絶対パスのセミコロンで区切った一覧です。"
	},
	"IMPORTED_OBJECTS_<CONFIG>": {
		"name": "IMPORTED_OBJECTS_<CONFIG>",
		"description": "<CONFIG> に特化したバージョンの IMPORTED_OBJECTS プロパティ。"
	},
	"IMPORTED_SONAME": {
		"name": "IMPORTED_SONAME",
		"description": "共有ライブラリの種類の IMPORTED ターゲットの soname です。"
	},
	"IMPORTED_SONAME_<CONFIG>": {
		"name": "IMPORTED_SONAME_<CONFIG>",
		"description": "<CONFIG>-IMPORTED_SONAME プロパティの特定バージョン。"
	},
	"IMPORT_PREFIX": {
		"name": "IMPORT_PREFIX",
		"description": "インポート ライブラリ名の前に付くものです。"
	},
	"IMPORT_SUFFIX": {
		"name": "IMPORT_SUFFIX",
		"description": "インポート ライブラリ名の後に付くものです。"
	},
	"INSTALL_NAME_DIR": {
		"name": "INSTALL_NAME_DIR",
		"description": "Apple プラットフォーム上にインストールされているターゲットのディレクトリ名。"
	},
	"INSTALL_REMOVE_ENVIRONMENT_RPATH": {
		"name": "INSTALL_REMOVE_ENVIRONMENT_RPATH",
		"description": "インストール中に、ツールチェーン定義の rpath を削除する必要があるかどうかを制御します。"
	},
	"INSTALL_RPATH": {
		"name": "INSTALL_RPATH",
		"description": "インストール済みターゲットに使用する rpath。"
	},
	"INSTALL_RPATH_USE_LINK_PATH": {
		"name": "INSTALL_RPATH_USE_LINK_PATH",
		"description": "リンカー検索のパスとインストール済みの rpath を追加します。"
	},
	"INTERFACE_AUTOMOC_MACRO_NAMES": {
		"name": "INTERFACE_AUTOMOC_MACRO_NAMES",
		"description": "コンシューマーに反映される AUTOMOC のマクロ名のセミコロン区切りの一覧。"
	},
	"INTERFACE_AUTOUIC_OPTIONS": {
		"name": "INTERFACE_AUTOUIC_OPTIONS",
		"description": "uic に渡すインターフェイス オプションの一覧です。"
	},
	"INTERFACE_COMPILE_DEFINITIONS": {
		"name": "INTERFACE_COMPILE_DEFINITIONS",
		"description": "ライブラリ用のパブリック property_name 要件のリストです。"
	},
	"INTERFACE_COMPILE_FEATURES": {
		"name": "INTERFACE_COMPILE_FEATURES",
		"description": "ライブラリ用のパブリック property_name 要件のリストです。"
	},
	"INTERFACE_COMPILE_OPTIONS": {
		"name": "INTERFACE_COMPILE_OPTIONS",
		"description": "ライブラリ用のパブリック property_name 要件のリストです。"
	},
	"INTERFACE_CXX_MODULE_SETS": {
		"name": "INTERFACE_CXX_MODULE_SETS",
		"description": "ターゲットの PUBLIC C++ モジュール セットの読み取り専用リスト (つまり、型が CXX_MODULES のすべてのファイル セット)。これらの C++ モジュール セットにリストされているファイルは、install でインストールし、install and export を使用してエクスポートできます。"
	},
	"INTERFACE_HEADER_SETS": {
		"name": "INTERFACE_HEADER_SETS",
		"description": "ターゲットの INTERFACE および PUBLIC ヘッダー セット (すなわち、HEADERS 型を持つすべてのファイル セット) の読み取り専用の一覧。これらのヘッダー セットに一覧表示されているファイルは、インストールを使用してインストールし、インストールとエクスポートを使用してエクスポートできます。"
	},
	"INTERFACE_HEADER_SETS_TO_VERIFY": {
		"name": "INTERFACE_HEADER_SETS_TO_VERIFY",
		"description": "検証する必要があるターゲットの PUBLIC ヘッダー セットと INTERFACE ヘッダー セットを指定するために使用されます。"
	},
	"INTERFACE_INCLUDE_DIRECTORIES": {
		"name": "INTERFACE_INCLUDE_DIRECTORIES",
		"description": "ライブラリ用のパブリック property_name 要件のリストです。"
	},
	"INTERFACE_LINK_DEPENDS": {
		"name": "INTERFACE_LINK_DEPENDS",
		"description": "ターゲット バイナリがリンクのために依存する追加のパブリック インターフェイス ファイルです。"
	},
	"INTERFACE_LINK_DIRECTORIES": {
		"name": "INTERFACE_LINK_DIRECTORIES",
		"description": "ライブラリ用のパブリック property_name 要件のリストです。"
	},
	"INTERFACE_LINK_LIBRARIES": {
		"name": "INTERFACE_LINK_LIBRARIES",
		"description": "ライブラリ用のパブリック インターフェイス ライブラリを一覧表示します。"
	},
	"INTERFACE_LINK_LIBRARIES_DIRECT": {
		"name": "INTERFACE_LINK_LIBRARIES_DIRECT",
		"description": "このライブラリのコンシューマーが直接リンクの依存関係として扱うライブラリの一覧。"
	},
	"INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE": {
		"name": "INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE",
		"description": "このライブラリのコンシューマーが直接リンクの依存関係として扱うべきでないライブラリの一覧。"
	},
	"INTERFACE_LINK_OPTIONS": {
		"name": "INTERFACE_LINK_OPTIONS",
		"description": "ライブラリ用のパブリック property_name 要件のリストです。"
	},
	"INTERFACE_POSITION_INDEPENDENT_CODE": {
		"name": "INTERFACE_POSITION_INDEPENDENT_CODE",
		"description": "コンシューマーが位置に依存しないターゲットを作成する必要があるかどうか"
	},
	"INTERFACE_PRECOMPILE_HEADERS": {
		"name": "INTERFACE_PRECOMPILE_HEADERS",
		"description": "使用するターゲットにプリコンパイルするインターフェイスのヘッダー ファイルの一覧です。"
	},
	"INTERFACE_SOURCES": {
		"name": "INTERFACE_SOURCES",
		"description": "使用するターゲットにコンパイルするインターフェイスのソースの一覧です。"
	},
	"INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": {
		"name": "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES",
		"description": "ライブラリ用のパブリック システムのインクルード ディレクトリの一覧です。"
	},
	"IOS_INSTALL_COMBINED": {
		"name": "IOS_INSTALL_COMBINED",
		"description": "インストール時に複合 (デバイスとシミュレーター) のターゲットをビルドします。"
	},
	"ISPC_HEADER_DIRECTORY": {
		"name": "ISPC_HEADER_DIRECTORY",
		"description": "ターゲットによって提供される ISPC ヘッダーの相対出力ディレクトリを指定します。"
	},
	"ISPC_HEADER_SUFFIX": {
		"name": "ISPC_HEADER_SUFFIX",
		"description": "ターゲットによって提供される、ISPC で生成されたヘッダーに使用する出力サフィックスを指定します。"
	},
	"ISPC_INSTRUCTION_SETS": {
		"name": "ISPC_INSTRUCTION_SETS",
		"description": "コードを生成する命令セット アーキテクチャの一覧です。"
	},
	"JOB_POOL_COMPILE": {
		"name": "JOB_POOL_COMPILE",
		"description": "Ninja のみ: コンパイルに使用されるプールです。"
	},
	"JOB_POOL_LINK": {
		"name": "JOB_POOL_LINK",
		"description": "Ninja のみ: リンク設定に使用されるプールです。"
	},
	"JOB_POOL_PRECOMPILE_HEADER": {
		"name": "JOB_POOL_PRECOMPILE_HEADER",
		"description": "Ninja のみ: プリコンパイル済みヘッダーを生成するために使用されるプールです。"
	},
	"<LANG>_CLANG_TIDY": {
		"name": "<LANG>_CLANG_TIDY",
		"description": "このプロパティは、<LANG> が C、CXX、OBJC、または OBJCXX の場合にのみ実装されます。"
	},
	"<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR": {
		"name": "<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR",
		"description": "このプロパティは、<LANG> が C、CXX、OBJC、または OBJCXX の場合にのみ実装され、<LANG>_CLANG_TIDY が設定されている場合にのみ効果があります。"
	},
	"<LANG>_COMPILER_LAUNCHER": {
		"name": "<LANG>_COMPILER_LAUNCHER",
		"description": "このプロパティは、<LANG> が C、CXX、Fortran、HIP、ISPC、OBJC、OBJCXX、または CUDA の場合にのみ実装されます。"
	},
	"<LANG>_CPPCHECK": {
		"name": "<LANG>_CPPCHECK",
		"description": "このプロパティは、<LANG> が C または CXX の場合にのみサポートされています。"
	},
	"<LANG>_CPPLINT": {
		"name": "<LANG>_CPPLINT",
		"description": "このプロパティは、<LANG> が C または CXX の場合にのみサポートされています。"
	},
	"<LANG>_EXTENSIONS": {
		"name": "<LANG>_EXTENSIONS",
		"description": "このバリエーションは次のとおりです。"
	},
	"<LANG>_INCLUDE_WHAT_YOU_USE": {
		"name": "<LANG>_INCLUDE_WHAT_YOU_USE",
		"description": "このプロパティは、<LANG> が C または CXX の場合にのみ実装されています。"
	},
	"<LANG>_LINKER_LAUNCHER": {
		"name": "<LANG>_LINKER_LAUNCHER",
		"description": "このプロパティは、<LANG> が C、CXX、OBJC、OBJCXX の場合のみ実装されます。"
	},
	"<LANG>_STANDARD": {
		"name": "<LANG>_STANDARD",
		"description": "このバリエーションは次のとおりです。"
	},
	"<LANG>_STANDARD_REQUIRED": {
		"name": "<LANG>_STANDARD_REQUIRED",
		"description": "このバリエーションは次のとおりです。"
	},
	"<LANG>_VISIBILITY_PRESET": {
		"name": "<LANG>_VISIBILITY_PRESET",
		"description": "シンボル表示コンパイル フラグの値"
	},
	"LIBRARY_OUTPUT_DIRECTORY": {
		"name": "LIBRARY_OUTPUT_DIRECTORY",
		"description": "XXX ターゲット ファイルをビルドするための出力ディレクトリです。"
	},
	"LIBRARY_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "ライブラリ ターゲット ファイルの構成ごとの出力ディレクトリ。"
	},
	"LIBRARY_OUTPUT_NAME": {
		"name": "LIBRARY_OUTPUT_NAME",
		"description": "XXX ターゲット ファイルの出力名です。"
	},
	"LIBRARY_OUTPUT_NAME_<CONFIG>": {
		"name": "LIBRARY_OUTPUT_NAME_<CONFIG>",
		"description": "ライブラリ ターゲット ファイルの構成ごとの出力名。"
	},
	"LINKER_LANGUAGE": {
		"name": "LINKER_LANGUAGE",
		"description": "コンパイラがリンカーを呼び出す言語を指定します。"
	},
	"LINKER_TYPE": {
		"name": "LINKER_TYPE",
		"description": "リンク ステップに使用するリンカーを指定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。"
	},
	"LINK_DEPENDS": {
		"name": "LINK_DEPENDS",
		"description": "ターゲット バイナリがリンクのために依存する追加のファイル。"
	},
	"LINK_DEPENDS_NO_SHARED": {
		"name": "LINK_DEPENDS_NO_SHARED",
		"description": "リンクされた共有ライブラリ ファイルに依存しません。"
	},
	"LINK_FLAGS": {
		"name": "LINK_FLAGS",
		"description": "このターゲットが共有ライブラリ、モジュール ライブラリ、または実行可能ファイルの場合に、そのリンク時に使用する追加のフラグです。スタティック ライブラリでは、STATIC_LIBRARY_OPTIONS または STATIC_LIBRARY_FLAGS プロパティを使用する必要があります。"
	},
	"LINK_FLAGS_<CONFIG>": {
		"name": "LINK_FLAGS_<CONFIG>",
		"description": "SHARED ライブラリ、MODULE、EXECUTABLE ターゲットの構成ごとのリンカー フラグ。"
	},
	"LINK_INTERFACE_LIBRARIES": {
		"name": "LINK_INTERFACE_LIBRARIES",
		"description": "共有ライブラリまたは実行可能ファイルのパブリック インターフェイス ライブラリを一覧表示します。"
	},
	"LINK_INTERFACE_LIBRARIES_<CONFIG>": {
		"name": "LINK_INTERFACE_LIBRARIES_<CONFIG>",
		"description": "ターゲットの構成ごとのパブリック インターフェイス ライブラリの一覧です。"
	},
	"LINK_INTERFACE_MULTIPLICITY": {
		"name": "LINK_INTERFACE_MULTIPLICITY",
		"description": "循環依存関係を持つスタティック ライブラリの繰り返し回数です。"
	},
	"LINK_INTERFACE_MULTIPLICITY_<CONFIG>": {
		"name": "LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
		"description": "スタティック ライブラリのサイクルの構成ごとの繰り返し回数です。"
	},
	"LINK_LIBRARIES": {
		"name": "LINK_LIBRARIES",
		"description": "直接リンクの依存関係の一覧です。"
	},
	"LINK_LIBRARIES_ONLY_TARGETS": {
		"name": "LINK_LIBRARIES_ONLY_TARGETS",
		"description": "ターゲット名にすることができるリンク項目が、実際には既存のターゲットであることを適用します。"
	},
	"LINK_LIBRARY_OVERRIDE": {
		"name": "LINK_LIBRARY_OVERRIDE",
		"description": "LINK_LIBRARY ジェネレーター式からライブラリに関連付けられたライブラリ機能をオーバーライドします。これは、異なる LINK_LIBRARY ジェネレーター式で同じライブラリに異なる機能を指定した結果、互換性のないライブラリ機能を解決するために使用できます。"
	},
	"LINK_LIBRARY_OVERRIDE_<LIBRARY>": {
		"name": "LINK_LIBRARY_OVERRIDE_<LIBRARY>",
		"description": "LINK_LIBRARY ジェネレーター式から <LIBRARY> に関連付けられたライブラリ機能をオーバーライドします。これは、異なる LINK_LIBRARY ジェネレーター式で <LIBRARY> に異なる機能を指定した結果、互換性のないライブラリ機能を解決するために使用できます。"
	},
	"LINK_SEARCH_END_STATIC": {
		"name": "LINK_SEARCH_END_STATIC",
		"description": "スタティック システム ライブラリが使用されるように、リンク行を終了します。"
	},
	"LINK_SEARCH_START_STATIC": {
		"name": "LINK_SEARCH_START_STATIC",
		"description": "既定で、リンカーはスタティック ライブラリを探すと仮定します。"
	},
	"LINK_WHAT_YOU_USE": {
		"name": "LINK_WHAT_YOU_USE",
		"description": "これはブール値のオプションであり、TRUE に設定すると、リンク後にターゲット上で自動的に変数 CMAKE_LINK_WHAT_YOU_USE_CHECK のコンテンツが実行されます。また、コマンド ラインで指定されたすべてのライブラリがターゲットにリンクされるように、変数 CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG で指定されたリンカー フラグがリンク コマンドによってターゲットに渡されます。これにより、リンクは、このターゲットによって使用されリンクされているシンボルが指定されていないライブラリの一覧を生成します。"
	},
	"LOCATION_<CONFIG>": {
		"name": "LOCATION_<CONFIG>",
		"description": "ディスク上のターゲットの場所を示す読み取り専用プロパティです。"
	},
	"MACHO_COMPATIBILITY_VERSION": {
		"name": "MACHO_COMPATIBILITY_VERSION",
		"description": "Mach-O バイナリのこのターゲットの互換性バージョン番号です。"
	},
	"MACHO_CURRENT_VERSION": {
		"name": "MACHO_CURRENT_VERSION",
		"description": "Mach-O バイナリのこのターゲットの現在のバージョン番号です。"
	},
	"MACOSX_BUNDLE": {
		"name": "MACOSX_BUNDLE",
		"description": "macOS または iOS 上でアプリケーション バンドルとして実行可能ファイルをビルドします。"
	},
	"MACOSX_BUNDLE_INFO_PLIST": {
		"name": "MACOSX_BUNDLE_INFO_PLIST",
		"description": "macOS と iOS アプリケーション バンドルのカスタムの Info.plist テンプレートを指定します。"
	},
	"MACOSX_FRAMEWORK_INFO_PLIST": {
		"name": "MACOSX_FRAMEWORK_INFO_PLIST",
		"description": "macOS と iOS フレームワークのカスタムの Info.plist テンプレートを指定してください。"
	},
	"MACOSX_RPATH": {
		"name": "MACOSX_RPATH",
		"description": "macOS または iOS 上のこのターゲットが、実行時に rpath を使用して検索されるかどうか。"
	},
	"MANUALLY_ADDED_DEPENDENCIES": {
		"name": "MANUALLY_ADDED_DEPENDENCIES",
		"description": "他のトップレベルのターゲットに手動で追加された依存関係を取得します。"
	},
	"MAP_IMPORTED_CONFIG_<CONFIG>": {
		"name": "MAP_IMPORTED_CONFIG_<CONFIG>",
		"description": "プロジェクト構成からインポート済みターゲットの構成にマップします。"
	},
	"MSVC_DEBUG_INFORMATION_FORMAT": {
		"name": "MSVC_DEBUG_INFORMATION_FORMAT",
		"description": "MSVC ABI を対象とする場合は、デバッグ情報の形式を選択します。"
	},
	"MSVC_RUNTIME_LIBRARY": {
		"name": "MSVC_RUNTIME_LIBRARY",
		"description": "MSVC ABI を対象とするコンパイラで使用するための MSVC ランタイム ライブラリを選択します。"
	},
	"NAME": {
		"name": "NAME",
		"description": "ターゲットの論理名です。"
	},
	"NO_SONAME": {
		"name": "NO_SONAME",
		"description": "共有ライブラリをリンクするときに soname を設定するかどうか。"
	},
	"NO_SYSTEM_FROM_IMPORTED": {
		"name": "NO_SYSTEM_FROM_IMPORTED",
		"description": "使用済みのインポートされたターゲットのインターフェイスからのインクルード ディレクトリをシステム ディレクトリとして扱わないでください。"
	},
	"OBJCXX_EXTENSIONS": {
		"name": "OBJCXX_EXTENSIONS",
		"description": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。"
	},
	"OBJCXX_STANDARD": {
		"name": "OBJCXX_STANDARD",
		"description": "このターゲットをビルドするように要求された機能の ObjC++ 標準。"
	},
	"OBJCXX_STANDARD_REQUIRED": {
		"name": "OBJCXX_STANDARD_REQUIRED",
		"description": "OBJCXX_STANDARD の値が必要であるかどうかを示すブール値。"
	},
	"OBJC_EXTENSIONS": {
		"name": "OBJC_EXTENSIONS",
		"description": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。"
	},
	"OBJC_STANDARD": {
		"name": "OBJC_STANDARD",
		"description": "このターゲットをビルドするように要求された機能の OBJC 標準。"
	},
	"OBJC_STANDARD_REQUIRED": {
		"name": "OBJC_STANDARD_REQUIRED",
		"description": "OBJC_STANDARD の値が必要であるかどうかを示すブール値。"
	},
	"OPTIMIZE_DEPENDENCIES": {
		"name": "OPTIMIZE_DEPENDENCIES",
		"description": "静的およびオブジェクト ライブラリの依存関係の最適化をアクティブにします。"
	},
	"OSX_ARCHITECTURES": {
		"name": "OSX_ARCHITECTURES",
		"description": "macOS の特定のアーキテクチャをターゲットとします。"
	},
	"OSX_ARCHITECTURES_<CONFIG>": {
		"name": "OSX_ARCHITECTURES_<CONFIG>",
		"description": "ターゲットの構成ごとの macOS と iOS のバイナリ アーキテクチャです。"
	},
	"OUTPUT_NAME": {
		"name": "OUTPUT_NAME",
		"description": "ターゲット ファイルの出力名です。"
	},
	"OUTPUT_NAME_<CONFIG>": {
		"name": "OUTPUT_NAME_<CONFIG>",
		"description": "構成ごとのターゲット ファイルのベース名です。"
	},
	"PCH_INSTANTIATE_TEMPLATES": {
		"name": "PCH_INSTANTIATE_TEMPLATES",
		"description": "このプロパティが true に設定されている場合、プリコンパイル済みヘッダーのコンパイラ オプションには、PCH の生成中にテンプレートをインスタンス化するためのフラグが含まれます (サポートされている場合)。これにより、コンパイル時間が大幅に短縮されます。バージョン 11 以降の Clang でサポートされています。"
	},
	"PCH_WARN_INVALID": {
		"name": "PCH_WARN_INVALID",
		"description": "このプロパティが true に設定されている場合、プリコンパイル ヘッダー コンパイラのオプションには、無効なプリコンパイル済みヘッダー (GNU コンパイラの場合は -Winvalid-pch など) の警告を表示するコンパイラ フラグが含まれます。"
	},
	"PDB_NAME": {
		"name": "PDB_NAME",
		"description": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの出力名です。"
	},
	"PDB_NAME_<CONFIG>": {
		"name": "PDB_NAME_<CONFIG>",
		"description": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの構成ごとの出力名です。"
	},
	"PDB_OUTPUT_DIRECTORY": {
		"name": "PDB_OUTPUT_DIRECTORY",
		"description": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの出力ディレクトリです。"
	},
	"PDB_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "PDB_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの構成ごとの出力ディレクトリです。"
	},
	"POSITION_INDEPENDENT_CODE": {
		"name": "POSITION_INDEPENDENT_CODE",
		"description": "位置に依存しないターゲットを作成するかどうか"
	},
	"POST_INSTALL_SCRIPT": {
		"name": "POST_INSTALL_SCRIPT",
		"description": "非推奨のインストール サポート。"
	},
	"PRECOMPILE_HEADERS": {
		"name": "PRECOMPILE_HEADERS",
		"description": "プリコンパイルするヘッダー ファイルの一覧です。"
	},
	"PRECOMPILE_HEADERS_REUSE_FROM": {
		"name": "PRECOMPILE_HEADERS_REUSE_FROM",
		"description": "プリコンパイル済みヘッダー ビルド成果物を再利用元のターゲット。"
	},
	"PREFIX": {
		"name": "PREFIX",
		"description": "ライブラリ名の前に付くものです。"
	},
	"PRE_INSTALL_SCRIPT": {
		"name": "PRE_INSTALL_SCRIPT",
		"description": "非推奨のインストール サポート。"
	},
	"PRIVATE_HEADER": {
		"name": "PRIVATE_HEADER",
		"description": "FRAMEWORK 共有ライブラリ ターゲットのプライベート ヘッダー ファイルを指定します。"
	},
	"PROJECT_LABEL": {
		"name": "PROJECT_LABEL",
		"description": "IDE 内のターゲットの名前を変更します。"
	},
	"PUBLIC_HEADER": {
		"name": "PUBLIC_HEADER",
		"description": "FRAMEWORK 共有ライブラリ ターゲットのパブリック ヘッダー ファイルを指定します。"
	},
	"RESOURCE": {
		"name": "RESOURCE",
		"description": "FRAMEWORK または BUNDLE 内のリソース ファイルを指定します。"
	},
	"RUNTIME_OUTPUT_DIRECTORY": {
		"name": "RUNTIME_OUTPUT_DIRECTORY",
		"description": "XXX ターゲット ファイルをビルドするための出力ディレクトリです。"
	},
	"RUNTIME_OUTPUT_DIRECTORY_<CONFIG>": {
		"name": "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
		"description": "ランタイム ターゲット ファイルの構成ごとの出力ディレクトリです。"
	},
	"RUNTIME_OUTPUT_NAME": {
		"name": "RUNTIME_OUTPUT_NAME",
		"description": "XXX ターゲット ファイルの出力名です。"
	},
	"RUNTIME_OUTPUT_NAME_<CONFIG>": {
		"name": "RUNTIME_OUTPUT_NAME_<CONFIG>",
		"description": "ランタイム ターゲット ファイルの構成ごとの出力名です。"
	},
	"SKIP_BUILD_RPATH": {
		"name": "SKIP_BUILD_RPATH",
		"description": "ビルド ツリーに rpaths を使用する必要があります。"
	},
	"SOURCES": {
		"name": "SOURCES",
		"description": "これは、ターゲットのソース ファイルへのパスの一覧を指定します。以下のコマンドはすべて SOURCES ターゲット プロパティに設定または追加され、それを操作する通常の方法です。"
	},
	"SOVERSION": {
		"name": "SOVERSION",
		"description": "共有ライブラリ ターゲットの ABI バージョン番号。"
	},
	"STATIC_LIBRARY_FLAGS": {
		"name": "STATIC_LIBRARY_FLAGS",
		"description": "スタティック ライブラリ ターゲット用のアーカイバー (または MSVC ライブラリアン) フラグです。ターゲットが共有ライブラリ、モジュール、または実行可能ファイルである場合は、LINK_OPTIONS または LINK_FLAGS ターゲット プロパティを使用する必要があります。"
	},
	"STATIC_LIBRARY_FLAGS_<CONFIG>": {
		"name": "STATIC_LIBRARY_FLAGS_<CONFIG>",
		"description": "スタティック ライブラリ ターゲットの構成ごとのアーカイバー (または MSVC ライブラリアン) フラグです。"
	},
	"STATIC_LIBRARY_OPTIONS": {
		"name": "STATIC_LIBRARY_OPTIONS",
		"description": "スタティック ライブラリ ターゲットのアーカイバー (または MSVC ライブラリアン) フラグです。ターゲットが共有ライブラリ、モジュール、または実行可能ファイルである場合は、LINK_OPTIONS ターゲット プロパティを使用する必要があります。"
	},
	"SUFFIX": {
		"name": "SUFFIX",
		"description": "ターゲット名の後に付くものです。"
	},
	"Swift_COMPILATION_MODE": {
		"name": "Swift_COMPILATION_MODE",
		"description": "Swift によるターゲットのコンパイル方法を指定します。"
	},
	"Swift_LANGUAGE_VERSION": {
		"name": "Swift_LANGUAGE_VERSION",
		"description": "このプロパティは、ターゲットの Swift ソースの言語バージョンを設定します。指定しない場合、既定では CMAKE_Swift_LANGUAGE_VERSION が使用されます。指定した場合、コンパイラでサポートされている最新バージョンが使用されます。"
	},
	"Swift_MODULE_DIRECTORY": {
		"name": "Swift_MODULE_DIRECTORY",
		"description": "ターゲットによって提供される Swift モジュールの出力ディレクトリを指定します。"
	},
	"Swift_MODULE_NAME": {
		"name": "Swift_MODULE_NAME",
		"description": "このプロパティは、Swift モジュールの名前を指定します。既定ではターゲットの名前が使用されます。"
	},
	"TEST_LAUNCHER": {
		"name": "TEST_LAUNCHER",
		"description": "指定された起動ツールを使用して実行可能ファイルを実行します。このコマンドは、ビルド ターゲット システム実行可能ファイルの add_test コマンドのプレフィックスとして追加され、ホスト コンピューターで実行されることを意図しています。"
	},
	"TRANSITIVE_COMPILE_PROPERTIES": {
		"name": "TRANSITIVE_COMPILE_PROPERTIES",
		"description": "TARGET_PROPERTY ジェネレーター式が、ターゲットとその依存対象について、リンク依存関係の推移的なクロージャから収集された値の和集合として評価されるプロパティ (LINK_ONLYによって保護されたエントリを除く)。"
	},
	"TRANSITIVE_LINK_PROPERTIES": {
		"name": "TRANSITIVE_LINK_PROPERTIES",
		"description": "TARGET_PROPERTY ジェネレーター式が、ターゲットとその依存対象について、リンク依存関係の推移的なクロージャから収集された値の和集合として評価されるプロパティ (LINK_ONLYによって保護されたエントリを含む)。"
	},
	"UNITY_BUILD": {
		"name": "UNITY_BUILD",
		"description": "このプロパティが true に設定されている場合、コンパイルを高速化するために、ターゲットのソース ファイルがバッチに組み込まれます。これは、元のソースを #include する (一連の) Unity ソースを作成してから、元のものではなくそれらの Unity ソースをコンパイルすることによって行われます。これは Unity ビルドまたは Jumbo ビルドとして知られています。"
	},
	"UNITY_BUILD_BATCH_SIZE": {
		"name": "UNITY_BUILD_BATCH_SIZE",
		"description": "Unity ビルドが UNITY_BUILD ターゲット プロパティによって有効になっている場合、1 つの Unity ソース ファイルに組み込むことができるソース ファイルの最大数を指定します。元のソース ファイルは、この制限を遵守するために必要な数の Unity ソース ファイルに分散されます。"
	},
	"UNITY_BUILD_CODE_AFTER_INCLUDE": {
		"name": "UNITY_BUILD_CODE_AFTER_INCLUDE",
		"description": "生成された Unity ソース ファイルの各 #include ステートメントの直後に UNITY_BUILD 機能によって含まれる逐語的なコード スニペットです。例:"
	},
	"UNITY_BUILD_CODE_BEFORE_INCLUDE": {
		"name": "UNITY_BUILD_CODE_BEFORE_INCLUDE",
		"description": "生成された Unity ソース ファイルの各 #include ステートメントの直前に UNITY_BUILD 機能によって含まれる逐語的なコード スニペットです。例:"
	},
	"UNITY_BUILD_MODE": {
		"name": "UNITY_BUILD_MODE",
		"description": "CMake は、バケットにグループ化するソースを選択するためのさまざまなアルゴリズムを提供します。このプロパティに基づいて選択されます。使用可能な値は次のとおりです:"
	},
	"UNITY_BUILD_UNIQUE_ID": {
		"name": "UNITY_BUILD_UNIQUE_ID",
		"description": "Unity ビルド中に一意のファイルごとの値に設定される、有効な C 識別子の名前。"
	},
	"VERIFY_INTERFACE_HEADER_SETS": {
		"name": "VERIFY_INTERFACE_HEADER_SETS",
		"description": "ターゲットの PUBLIC ヘッダー セットと INTERFACE ヘッダー セット内のすべてのヘッダーを独自に含めることができることを確認するために使用されます。"
	},
	"VERSION": {
		"name": "VERSION",
		"description": "共有ライブラリ ターゲットのバージョン番号。"
	},
	"VISIBILITY_INLINES_HIDDEN": {
		"name": "VISIBILITY_INLINES_HIDDEN",
		"description": "インライン関数のシンボルを非表示にするためのコンパイル フラグを追加するかどうか"
	},
	"VS_CONFIGURATION_TYPE": {
		"name": "VS_CONFIGURATION_TYPE",
		"description": "Visual Studio プロジェクト構成の種類。"
	},
	"VS_DEBUGGER_COMMAND": {
		"name": "VS_DEBUGGER_COMMAND",
		"description": "Visual Studio C++ ターゲットのローカル デバッガー コマンドを設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerCommand> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合、変数 CMAKE_VS_DEBUGGER_COMMAND の値によって初期化されます。"
	},
	"VS_DEBUGGER_COMMAND_ARGUMENTS": {
		"name": "VS_DEBUGGER_COMMAND_ARGUMENTS",
		"description": "Visual Studio C++ ターゲットのローカル デバッガー コマンド ライン引数を設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerCommandArguments> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合、変数 CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS の値によって初期化されます。"
	},
	"VS_DEBUGGER_ENVIRONMENT": {
		"name": "VS_DEBUGGER_ENVIRONMENT",
		"description": "Visual Studio C++ ターゲットのローカル デバッガー環境を設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerEnvironment> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合は、変数 CMAKE_VS_DEBUGGER_ENVIRONMENT の値によって初期化されます。"
	},
	"VS_DEBUGGER_WORKING_DIRECTORY": {
		"name": "VS_DEBUGGER_WORKING_DIRECTORY",
		"description": "Visual Studio C++ ターゲットのローカル デバッガー作業ディレクトリを設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerWorkingDirectory> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合、変数 CMAKE_VS_DEBUGGER_WORKING_DIRECTORY の値によって初期化されます。"
	},
	"VS_DESKTOP_EXTENSIONS_VERSION": {
		"name": "VS_DESKTOP_EXTENSIONS_VERSION",
		"description": "Visual Studio の Windows 10 デスクトップ拡張機能のバージョン "
	},
	"VS_DOTNET_DOCUMENTATION_FILE": {
		"name": "VS_DOTNET_DOCUMENTATION_FILE",
		"description": "Visual Studio マネージド プロジェクトの .NET ドキュメント出力"
	},
	"VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>": {
		"name": "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>",
		"description": ".NET 参照 <refname> の XML プロパティ <tagname> を定義します。"
	},
	"VS_DOTNET_REFERENCES": {
		"name": "VS_DOTNET_REFERENCES",
		"description": "Visual Studio マネージド プロジェクトの .NET 参照"
	},
	"VS_DOTNET_REFERENCES_COPY_LOCAL": {
		"name": "VS_DOTNET_REFERENCES_COPY_LOCAL",
		"description": "ターゲット内のすべての .NET ヒント参照に Copy Local プロパティを設定する"
	},
	"VS_DOTNET_REFERENCE_<refname>": {
		"name": "VS_DOTNET_REFERENCE_<refname>",
		"description": "名前 <refname> とヒント パスを持つ Visual Studio マネージド プロジェクトの .NET 参照です。"
	},
	"VS_DOTNET_STARTUP_OBJECT": {
		"name": "VS_DOTNET_STARTUP_OBJECT",
		"description": "Visual Studio .NET ターゲットのスタートアップ オブジェクト プロパティを設定します。プロパティ値は、MyCompany.Package.MyStarterClass などの完全な修飾クラス名 (パッケージ名を含む) を定義します。"
	},
	"VS_DOTNET_TARGET_FRAMEWORK_VERSION": {
		"name": "VS_DOTNET_TARGET_FRAMEWORK_VERSION",
		"description": ".NET ターゲット フレームワーク バージョンを指定してください。"
	},
	"VS_DPI_AWARE": {
		"name": "VS_DPI_AWARE",
		"description": "Visual Studio のターゲット プロジェクトのプロパティで [マニフェスト ツール] > [入出力] > [DPI 認識] を設定します。"
	},
	"VS_FILTER_PROPS": {
		"name": "VS_FILTER_PROPS",
		"description": "Visual Studio C++ プロジェクト フィルター ファイルに含めるフィルター プロパティ ファイルを設定します。"
	},
	"VS_GLOBAL_KEYWORD": {
		"name": "VS_GLOBAL_KEYWORD",
		"description": "Visual Studio プロジェクト キーワード。"
	},
	"VS_GLOBAL_PROJECT_TYPES": {
		"name": "VS_GLOBAL_PROJECT_TYPES",
		"description": "Visual Studio プロジェクトの種類。"
	},
	"VS_GLOBAL_ROOTNAMESPACE": {
		"name": "VS_GLOBAL_ROOTNAMESPACE",
		"description": "Visual Studio プロジェクトのルート名前空間。"
	},
	"VS_GLOBAL_<variable>": {
		"name": "VS_GLOBAL_<variable>",
		"description": "Visual Studio プロジェクト固有のグローバル変数。"
	},
	"VS_IOT_EXTENSIONS_VERSION": {
		"name": "VS_IOT_EXTENSIONS_VERSION",
		"description": "Visual Studio の Windows 10 IoT 拡張機能のバージョン"
	},
	"VS_IOT_STARTUP_TASK": {
		"name": "VS_IOT_STARTUP_TASK",
		"description": "Visual Studio の Windows 10 IoT 継続的バックグラウンド タスク"
	},
	"VS_JUST_MY_CODE_DEBUGGING": {
		"name": "VS_JUST_MY_CODE_DEBUGGING",
		"description": "Visual Studio デバッガーで [マイコードのみ] を有効にします。"
	},
	"VS_KEYWORD": {
		"name": "VS_KEYWORD",
		"description": "削除されました。これにより、Visual Studio 9 2008 以前のジェネレーターの Visual Studio プロジェクト キーワードが指定されましたが、これらのジェネレーターはすべて削除されました。"
	},
	"VS_MOBILE_EXTENSIONS_VERSION": {
		"name": "VS_MOBILE_EXTENSIONS_VERSION",
		"description": "Visual Studio の Windows 10 モバイル拡張機能のバージョン"
	},
	"VS_NO_COMPILE_BATCHING": {
		"name": "VS_NO_COMPILE_BATCHING",
		"description": "ターゲットのコンパイル バッチ処理をオフにします。通常、MSBuild は複数の c/cpp ファイルを使用してコンパイラを呼び出し、コンパイラは各ファイルのサブプロセスを開始してビルドを並列処理します。一度に 1 つのファイルを使用してコンパイラを呼び出す場合は、VS_NO_COMPILE_BATCHING をオンに設定します。このフラグが設定されている場合、MSBuild は一度に 1 つの c/cpp ファイルを使用してコンパイラを呼び出します。コンパイラを置き換えるツール (一部のビルド キャッシュ ツールなど) を使用する場合に便利です。"
	},
	"VS_NO_SOLUTION_DEPLOY": {
		"name": "VS_NO_SOLUTION_DEPLOY",
		"description": "生成される Visual Studio ソリューション内で Windows CE または Windows Phone デバイスへの配置のためにターゲットをマークしないように指定します。"
	},
	"VS_PACKAGE_REFERENCES": {
		"name": "VS_PACKAGE_REFERENCES",
		"description": "NuGet 用の Visual Studio パッケージ参照。"
	},
	"VS_PLATFORM_TOOLSET": {
		"name": "VS_PLATFORM_TOOLSET",
		"description": "ターゲットをビルドするために使用するプラットフォーム ツールセットをオーバーライドします。"
	},
	"VS_PROJECT_IMPORT": {
		"name": "VS_PROJECT_IMPORT",
		"description": "Visual Studio マネージド プロジェクトのインポート"
	},
	"VS_SCC_AUXPATH": {
		"name": "VS_SCC_AUXPATH",
		"description": "Visual Studio ソース コード管理の Aux パス。"
	},
	"VS_SCC_LOCALPATH": {
		"name": "VS_SCC_LOCALPATH",
		"description": "Visual Studio ソース コード管理のローカル パス。"
	},
	"VS_SCC_PROJECTNAME": {
		"name": "VS_SCC_PROJECTNAME",
		"description": "Visual Studio ソース コード管理のプロジェクト。"
	},
	"VS_SCC_PROVIDER": {
		"name": "VS_SCC_PROVIDER",
		"description": "Visual Studio ソース コード管理のプロバイダー。"
	},
	"VS_SDK_REFERENCES": {
		"name": "VS_SDK_REFERENCES",
		"description": "Visual Studio プロジェクトの SDK 参照です。Microsoft.AdMediatorWindows81, Version=1.0 のように、生成された Visual Studio プロジェクトに追加される SDK 参照のセミコロンで区切った一覧を指定します。"
	},
	"VS_SOLUTION_DEPLOY": {
		"name": "VS_SOLUTION_DEPLOY",
		"description": "Windows CE、Windows Phone、または Windows ストア アプリケーションを対象としない場合に、ターゲットが配置用にマークされる必要があることを指定します。"
	},
	"VS_SOURCE_SETTINGS_<tool>": {
		"name": "VS_SOURCE_SETTINGS_<tool>",
		"description": "<tool> を使用する、すべてのビルドされていないファイルに対して、任意の項目メタデータを設定します。"
	},
	"VS_USER_PROPS": {
		"name": "VS_USER_PROPS",
		"description": "Visual Studio C++ プロジェクト ファイルに含まれるユーザー props ファイルを設定します。標準のパスは $(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props で、ほとんどの場合 %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.Win32.user.props または %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props と同じです。"
	},
	"VS_USE_DEBUG_LIBRARIES": {
		"name": "VS_USE_DEBUG_LIBRARIES",
		"description": "Visual Studio ジェネレーターに、どの構成がデバッグ構成と見なされるかを指示します。これにより、.vcxproj ファイルの各構成の UseDebugLibraries 設定が制御されます。"
	},
	"VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": {
		"name": "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION",
		"description": "Visual Studio の Windows ターゲット プラットフォームの最小バージョン"
	},
	"VS_WINRT_COMPONENT": {
		"name": "VS_WINRT_COMPONENT",
		"description": "ターゲットを Visual Studio ジェネレーターの Windows ランタイム コンポーネントとしてマークします。Windows ランタイム用の C++/CX 言語拡張機能を使用してターゲットをコンパイルします。共有ライブラリおよびモジュール ライブラリの場合は、_WINRT_DLL プリプロセッサ マクロも定義します。"
	},
	"VS_WINRT_EXTENSIONS": {
		"name": "VS_WINRT_EXTENSIONS",
		"description": "非推奨です。VS_WINRT_COMPONENT を使用してください。このプロパティは、そのプロパティの試験的な部分実装でした。"
	},
	"VS_WINRT_REFERENCES": {
		"name": "VS_WINRT_REFERENCES",
		"description": "Visual Studio プロジェクトの Windows ランタイム メタデータ参照"
	},
	"WATCOM_RUNTIME_LIBRARY": {
		"name": "WATCOM_RUNTIME_LIBRARY",
		"description": "Watcom ABI を対象とするコンパイラで使用するための Watcom ランタイム ライブラリを選択します。"
	},
	"WIN32_EXECUTABLE": {
		"name": "WIN32_EXECUTABLE",
		"description": "Windows 上で WinMain エントリ ポイントのある実行可能ファイルをビルドします。"
	},
	"WINDOWS_EXPORT_ALL_SYMBOLS": {
		"name": "WINDOWS_EXPORT_ALL_SYMBOLS",
		"description": "このプロパティは、Windows 上の MS と互換性のあるツールに対してのみ実装されます。"
	},
	"XCODE_ATTRIBUTE_<an-attribute>": {
		"name": "XCODE_ATTRIBUTE_<an-attribute>",
		"description": "Xcode のターゲット属性を直接設定します。"
	},
	"XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY": {
		"name": "XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY",
		"description": "Xcode ジェネレーターに対して、XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> プロパティを使用して埋め込まれたすべてのフレームワークとライブラリのコード署名を実行するように指示します。"
	},
	"XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY": {
		"name": "XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY",
		"description": "Xcode ジェネレーターに対して、XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> プロパティを使用して埋め込まれたすべてのフレームワークからヘッダーを削除するように指示します。"
	},
	"XCODE_EMBED_<type>": {
		"name": "XCODE_EMBED_<type>",
		"description": "指定された項目のリストをターゲット バンドルに埋め込むように Xcode ジェネレーターに指示します。<type> は使用する埋め込みビルド フェーズを指定します。各 <type> の基本の場所については、Xcode のドキュメントを参照してください。"
	},
	"XCODE_EMBED_<type>_CODE_SIGN_ON_COPY": {
		"name": "XCODE_EMBED_<type>_CODE_SIGN_ON_COPY",
		"description": "Xcode ジェネレーターでのみ使用されるブール型プロパティ。XCODE_EMBED_ プロパティを使用して埋め込まれたアイテムにコード署名を行うか否かを指定します。"
	},
	"XCODE_EMBED_<type>_PATH": {
		"name": "XCODE_EMBED_<type>_PATH",
		"description": "このプロパティは、Xcode ジェネレーターでのみ使用されます。定義する場合、XCODE_EMBED_ で指定された項目を埋め込むときに使用する相対パスを指定します。パスは、<type> に関連付けられている埋め込み XXX ビルド フェーズの基本の場所に対する相対パスです。各 <type> の基本の場所については、Xcode のドキュメントを参照してください。"
	},
	"XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY": {
		"name": "XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY",
		"description": "Xcode ジェネレーターでのみ使用されるブール型プロパティ。XCODE_EMBED_ プロパティを使用して埋め込まれたすべてのフレームワークからヘッダーを削除するかどうかを指定します。"
	},
	"XCODE_GENERATE_SCHEME": {
		"name": "XCODE_GENERATE_SCHEME",
		"description": "これが有効な場合、Xcode ジェネレーターによってスキーマ ファイルが生成されます。これらは、コマンド ラインからの分析の起動、アーカイブ、テスト目的のビルド、テスト アクションのために役立ちます。"
	},
	"XCODE_LINK_BUILD_PHASE_MODE": {
		"name": "XCODE_LINK_BUILD_PHASE_MODE",
		"description": "Xcode ジェネレーターを使用する場合、リンクするライブラリは、\"Link Binary With Libraries\" ビルド フェーズを使用するか、またはリンカー フラグとして直接、Xcode プロジェクト ファイルに指定します。前者では、Xcode でビルド パスを管理することができます。これは、Xcode アーカイブを作成するときに必要になることがあります。通常のビルドに対して異なるビルド パスが使用されることがあるためです。"
	},
	"XCODE_PRODUCT_TYPE": {
		"name": "XCODE_PRODUCT_TYPE",
		"description": "ターゲットへの参照に Xcode productType 属性を設定します。CMake はターゲットの種類に基づいて既定値を算出しますが、このプロパティを使用することで明示的に指示することができます。"
	},
	"XCODE_SCHEME_ADDRESS_SANITIZER": {
		"name": "XCODE_SCHEME_ADDRESS_SANITIZER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Address Sanitizer] を有効にするかどうか。"
	},
	"XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": {
		"name": "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Detect use of stack after return] を有効にするかどうか。"
	},
	"XCODE_SCHEME_ARGUMENTS": {
		"name": "XCODE_SCHEME_ARGUMENTS",
		"description": "生成された Xcode スキームの [引数] セクションに追加する必要があるコマンド ライン引数を指定します。"
	},
	"XCODE_SCHEME_DEBUG_AS_ROOT": {
		"name": "XCODE_SCHEME_DEBUG_AS_ROOT",
		"description": "ターゲットを 'root' としてデバッグするかどうか。"
	},
	"XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": {
		"name": "XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
		"description": "生成される Xcode スキームの [オプション] セクションでドキュメントのバージョン ブラウザーを使用しているときに、デバッグを許可するかどうか。"
	},
	"XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": {
		"name": "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] を無効にするかどうか。"
	},
	"XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": {
		"name": "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Library Loads] を有効にするかどうか。"
	},
	"XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": {
		"name": "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Linker API usage] を有効にするかどうか。"
	},
	"XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": {
		"name": "XCODE_SCHEME_ENABLE_GPU_API_VALIDATION",
		"description": "生成された Xcode スキームの Options セクションの Metal: API Validation のプロパティ値。"
	},
	"XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": {
		"name": "XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE",
		"description": "生成された Xcode スキームの [オプション] セクションにある GPU フレーム キャプチャのプロパティ値。値の例は Metal と Disabled です。"
	},
	"XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": {
		"name": "XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION",
		"description": "生成された Xcode スキームの Options セクションの Metal: Shader Validation のプロパティ値。"
	},
	"XCODE_SCHEME_ENVIRONMENT": {
		"name": "XCODE_SCHEME_ENVIRONMENT",
		"description": "生成された Xcode スキームの [引数] セクションに追加する必要のある環境変数を指定します。"
	},
	"XCODE_SCHEME_EXECUTABLE": {
		"name": "XCODE_SCHEME_EXECUTABLE",
		"description": "生成された Xcode スキームの [情報] セクションで、実行可能ファイルへのパスを指定します。設定しない場合、スキーマ ジェネレーターは現在のターゲットが実際に実行可能である場合に、そのターゲットを選択します。"
	},
	"XCODE_SCHEME_GUARD_MALLOC": {
		"name": "XCODE_SCHEME_GUARD_MALLOC",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Guard Malloc] を有効にするかどうか。"
	},
	"XCODE_SCHEME_LAUNCH_CONFIGURATION": {
		"name": "XCODE_SCHEME_LAUNCH_CONFIGURATION",
		"description": "ターゲットを実行するようにビルド構成を設定します。"
	},
	"XCODE_SCHEME_LAUNCH_MODE": {
		"name": "XCODE_SCHEME_LAUNCH_MODE",
		"description": "生成された Xcode スキームの Info セクションの Launch のプロパティ値。"
	},
	"XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": {
		"name": "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] オプションの [Pause on issues] を有効にするかどうか。"
	},
	"XCODE_SCHEME_MALLOC_GUARD_EDGES": {
		"name": "XCODE_SCHEME_MALLOC_GUARD_EDGES",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Guard Edges] を有効にするかどうか。"
	},
	"XCODE_SCHEME_MALLOC_SCRIBBLE": {
		"name": "XCODE_SCHEME_MALLOC_SCRIBBLE",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Scribble] を有効にするかどうか。"
	},
	"XCODE_SCHEME_MALLOC_STACK": {
		"name": "XCODE_SCHEME_MALLOC_STACK",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Stack] を有効にするかどうか。"
	},
	"XCODE_SCHEME_THREAD_SANITIZER": {
		"name": "XCODE_SCHEME_THREAD_SANITIZER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] を有効にするかどうか。"
	},
	"XCODE_SCHEME_THREAD_SANITIZER_STOP": {
		"name": "XCODE_SCHEME_THREAD_SANITIZER_STOP",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] - [Pause on issues] を有効にするかどうか。"
	},
	"XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": {
		"name": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] を有効にするかどうか。"
	},
	"XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": {
		"name": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] オプションの [Pause on issues] を有効にするかどうか。"
	},
	"XCODE_SCHEME_WORKING_DIRECTORY": {
		"name": "XCODE_SCHEME_WORKING_DIRECTORY",
		"description": "生成される Xcode スキーム内に、実行およびプロファイル操作の作業ディレクトリを指定します。値にジェネレーター式が含まれている場合、それらが評価されます。"
	},
	"XCODE_SCHEME_ZOMBIE_OBJECTS": {
		"name": "XCODE_SCHEME_ZOMBIE_OBJECTS",
		"description": "生成された Xcode スキームの [Diagnostics] セクションで [Zombie Objects] を有効にするかどうか。"
	},
	"XCODE_XCCONFIG": {
		"name": "XCODE_XCCONFIG",
		"description": "設定されている場合、Xcode ジェネレーターは指定されたファイルをターゲット レベル XCConfig ファイルとして登録します。グローバル XCConfig ファイルについては、CMAKE_XCODE_XCCONFIG 変数を参照してください。"
	},
	"XCTEST": {
		"name": "XCTEST",
		"description": "このターゲットは Mac 上の XCTest CFBundle です。"
	}
}