{
	"AddFileDependencies": {
		"name": "AddFileDependencies",
		"description": "将依赖项添加到源文件。"
	},
	"AndroidTestUtilities": {
		"name": "AndroidTestUtilities",
		"description": "创建可自动将指定数据加载到 Android 设备上的测试。"
	},
	"BundleUtilities": {
		"name": "BundleUtilities",
		"description": "用于帮助汇编独立捆绑包应用程序的函数。"
	},
	"CheckCCompilerFlag": {
		"name": "CheckCCompilerFlag",
		"description": "检查 C 编译器是否支持给定标志。"
	},
	"CheckCompilerFlag": {
		"name": "CheckCompilerFlag",
		"description": "检查编译器是否支持给定标志。"
	},
	"CheckCSourceCompiles": {
		"name": "CheckCSourceCompiles",
		"description": "检查给定的 C 源是否编译并链接到可执行文件中。"
	},
	"CheckCSourceRuns": {
		"name": "CheckCSourceRuns",
		"description": "检查给定的 C 源是否编译并链接到可执行文件中，以及随后是否可以运行。"
	},
	"CheckCXXCompilerFlag": {
		"name": "CheckCXXCompilerFlag",
		"description": "检查 CXX 编译器是否支持给定的标志。"
	},
	"CheckCXXSourceCompiles": {
		"name": "CheckCXXSourceCompiles",
		"description": "检查给定的 C++ 源是否编译并链接到可执行文件中。"
	},
	"CheckCXXSourceRuns": {
		"name": "CheckCXXSourceRuns",
		"description": "检查给定的 C++ 源是否编译并链接到可执行文件中，以及随后是否可以运行。"
	},
	"CheckCXXSymbolExists": {
		"name": "CheckCXXSymbolExists",
		"description": "检查符号是否作为 C++ 中的函数、变量或宏而存在。"
	},
	"CheckFortranCompilerFlag": {
		"name": "CheckFortranCompilerFlag",
		"description": "检查 Fortran 编译器是否支持给定标志。"
	},
	"CheckFortranFunctionExists": {
		"name": "CheckFortranFunctionExists",
		"description": "检查 Fortran 函数是否存在。"
	},
	"CheckFortranSourceCompiles": {
		"name": "CheckFortranSourceCompiles",
		"description": "检查给定的 Fortran 源是否编译并链接到可执行文件中。"
	},
	"CheckFortranSourceRuns": {
		"name": "CheckFortranSourceRuns",
		"description": "检查给定的 Fortran 源是否编译并链接到可执行文件中，以及随后是否可以运行。"
	},
	"CheckFunctionExists": {
		"name": "CheckFunctionExists",
		"description": "检查是否可以链接 C 函数"
	},
	"CheckIncludeFile": {
		"name": "CheckIncludeFile",
		"description": "提供一个宏，用于检查头文件是否可以包含在 C 中。"
	},
	"CheckIncludeFileCXX": {
		"name": "CheckIncludeFileCXX",
		"description": "提供用于检查标头文件是否可以包含在 CXX 中的宏。"
	},
	"CheckIncludeFiles": {
		"name": "CheckIncludeFiles",
		"description": "提供一个宏，用于检查是否可以将一个或多个头文件的列表包含在一起。"
	},
	"CheckIPOSupported": {
		"name": "CheckIPOSupported",
		"description": "检查编译程序是否支持过程间优化(GP/LTO)。在启用 INTERPROCEDURAL_OPTIMIZATION 目标属性之前，请使用此属性。"
	},
	"CheckLanguage": {
		"name": "CheckLanguage",
		"description": "检查是否可以通过 enable_language 或项目命令启用语言:"
	},
	"CheckLibraryExists": {
		"name": "CheckLibraryExists",
		"description": "检查函数是否存在。"
	},
	"CheckLinkerFlag": {
		"name": "CheckLinkerFlag",
		"description": "检查编译器是否支持给定的链接标志。"
	},
	"CheckOBJCCompilerFlag": {
		"name": "CheckOBJCCompilerFlag",
		"description": "检查 Objective-C 编译器是否支持给定标志。"
	},
	"CheckOBJCSourceCompiles": {
		"name": "CheckOBJCSourceCompiles",
		"description": "检查给定的 Objective-C 源是否编译并链接到可执行文件中。"
	},
	"CheckOBJCSourceRuns": {
		"name": "CheckOBJCSourceRuns",
		"description": "检查给定的 Objective-C 源是否编译并链接到可执行文件中，以及随后是否可以运行。"
	},
	"CheckOBJCXXCompilerFlag": {
		"name": "CheckOBJCXXCompilerFlag",
		"description": "检查 Objective-C++ 编译器是否支持给定标志。"
	},
	"CheckOBJCXXSourceCompiles": {
		"name": "CheckOBJCXXSourceCompiles",
		"description": "检查给定的 Objective-C++ 源是否编译并链接到可执行文件中。"
	},
	"CheckOBJCXXSourceRuns": {
		"name": "CheckOBJCXXSourceRuns",
		"description": "检查给定的 Objective-C++ 源是否编译并链接到可执行文件中，以及随后是否可以运行。"
	},
	"CheckPIESupported": {
		"name": "CheckPIESupported",
		"description": "检查链接器是否支持可执行文件的位置独立代码(PIE)或无位置独立代码(NO_PIE)。使用此项以确保在链接时遵循可执行文件的 POSITION_INDEPENDENT_CODE 目标属性。"
	},
	"CheckPrototypeDefinition": {
		"name": "CheckPrototypeDefinition",
		"description": "检查预期的原型是否正确。"
	},
	"CheckSourceCompiles": {
		"name": "CheckSourceCompiles",
		"description": "检查给定的源是否编译并链接到可执行文件中。"
	},
	"CheckSourceRuns": {
		"name": "CheckSourceRuns",
		"description": "检查给定的源是否编译并链接到可执行文件中，以及随后是否可以运行。"
	},
	"CheckStructHasMember": {
		"name": "CheckStructHasMember",
		"description": "检查给定的结构或类是否具有指定的成员变量"
	},
	"CheckSymbolExists": {
		"name": "CheckSymbolExists",
		"description": "提供一个宏，用于检查一个符号是否作为 C 中的函数、变量或宏而存在。"
	},
	"CheckTypeSize": {
		"name": "CheckTypeSize",
		"description": "检查类型的大小"
	},
	"CheckVariableExists": {
		"name": "CheckVariableExists",
		"description": "检查该变量是否存在。"
	},
	"CMakeAddFortranSubdirectory": {
		"name": "CMakeAddFortranSubdirectory",
		"description": "添加仅限 fortran 的子目录，查找 fortran 编译器并生成。"
	},
	"CMakeBackwardCompatibilityCXX": {
		"name": "CMakeBackwardCompatibilityCXX",
		"description": "定义一组向后兼容变量"
	},
	"CMakeDependentOption": {
		"name": "CMakeDependentOption",
		"description": "用于提供依赖于其他选项的选项的宏。"
	},
	"CMakeDetermineVSServicePack": {
		"name": "CMakeDetermineVSServicePack",
		"description": "此模块的功能已被包含编译器版本号的 CMAKE_<LANG>_COMPILER_VERSION 变量所取代。"
	},
	"CMakeExpandImportedTargets": {
		"name": "CMakeExpandImportedTargets",
		"description": "此模块曾经需要用于将导入的目标扩展到它们在磁盘上引用的基础库，以便与 try_compile 和 try_run 命令一起使用。现在，这些命令在其 LINK_LIBRARIES 选项中支持导入的库(自 CMake 2.8.11 起支持 try_compile，自 CMake 3.2 起支持 try_run)。"
	},
	"CMakeFindDependencyMacro": {
		"name": "CMakeFindDependencyMacro",
		"description": "``find_dependency()`` 宏可包装对包依赖项的 :command:`find_package` 调用。"
	},
	"CMakeFindFrameworks": {
		"name": "CMakeFindFrameworks",
		"description": "用于查找 OSX 框架的帮助程序模块"
	},
	"CMakeFindPackageMode": {
		"name": "CMakeFindPackageMode",
		"description": "在使用 --find-package <Find-Package Tool Mode> 调用时，cmake 将执行此文件。它要求使用 -D 设置以下变量:"
	},
	"CMakeForceCompiler": {
		"name": "CMakeForceCompiler",
		"description": "当 CMake 无法自动检测编译器标识时，此模块提供的宏曾经用于交叉编译工具链文件。自引入此模块引入，CMake 的编译器标识功能已得到改进，现在可以通过学习来识别任何编译器。此外，CMake 通过编译器检测到的信息套件现在非常广泛，已无法由使用这些宏的工具链文件提供。"
	},
	"CMakeGraphVizOptions": {
		"name": "CMakeGraphVizOptions",
		"description": "CMake 的内置 Graphviz 支持。"
	},
	"CMakePackageConfigHelpers": {
		"name": "CMakePackageConfigHelpers",
		"description": "帮助程序函数，用于创建可由其他项目包含以查找和使用包的配置文件。"
	},
	"CMakeParseArguments": {
		"name": "CMakeParseArguments",
		"description": "此模块曾经实现了现在由 CMake 本机实现的 cmake_parse_arguments 命令。它现在是一个空占位符，用于与包含它的项目兼容，以从 CMake 3.4 及更低版本获取命令。"
	},
	"CMakePrintHelpers": {
		"name": "CMakePrintHelpers",
		"description": "用于打印属性和变量的便捷功能，例如可用于调试。"
	},
	"CMakePrintSystemInformation": {
		"name": "CMakePrintSystemInformation",
		"description": "打印系统信息。"
	},
	"CMakePushCheckState": {
		"name": "CMakePushCheckState",
		"description": "此模块定义了三个宏: CMAKE_PUSH_CHECK_STATE()、CMAKE_POP_CHECK_STATE() 和 CMAKE_RESET_CHECK_STATE()。这些宏可用于保存、还原和重置(即清除内容)由 CMake 附带的各种 Check-files (如 check_function_exists() 等)所使用的变量的状态 CMAKE_REQUIRED_FLAGS、CMAKE_REQUIRED_DEFINITIONS、CMAKE_REQUIRED_LINK_OPTIONS、CMAKE_REQUIRED_LIBRARIES、CMAKE_REQUIRED_INCLUDES 和CMAKE_EXTRA_INCLUDE_FILES。变量内容会推送到堆栈上，并且支持多次推送。这在 Find-module 中执行此类测试等情况下非常有用，这时必须对它们进行设置，但在执行 Find-module 之后，它们应具有与之前相同的值。"
	},
	"CMakeVerifyManifest": {
		"name": "CMakeVerifyManifest",
		"description": "CMakeVerifyManifest.cmake"
	},
	"CPack": {
		"name": "CPack",
		"description": "为二进制安装程序和源包配置生成器。"
	},
	"CPackArchive": {
		"name": "CPackArchive",
		"description": "CPack 存档生成器的文档已移动到此处: CPack 存档生成器"
	},
	"CPackBundle": {
		"name": "CPackBundle",
		"description": "CPack 捆绑包生成器的文档已移动到此处: CPack 捆绑包生成器"
	},
	"CPackComponent": {
		"name": "CPackComponent",
		"description": "为二进制安装程序和源包配置组件。"
	},
	"CPackCygwin": {
		"name": "CPackCygwin",
		"description": "CPack Cygwin 生成器的文档已移动到此处: CPack Cygwin 生成器"
	},
	"CPackDeb": {
		"name": "CPackDeb",
		"description": "CPack DEB 生成器的文档已移动到此处: CPack DEB 生成器"
	},
	"CPackDMG": {
		"name": "CPackDMG",
		"description": "CPack DragNDrop 生成器的文档已移动到此处: CPack DragNDrop 生成器"
	},
	"CPackFreeBSD": {
		"name": "CPackFreeBSD",
		"description": "CPack FreeBSD 生成器的文档已移动到此处: CPack FreeBSD 生成器"
	},
	"CPackIFW": {
		"name": "CPackIFW",
		"description": "此模块可查找 Qt 安装程序框架(QtIFW)提供的命令行实用工具的位置。"
	},
	"CPackIFWConfigureFile": {
		"name": "CPackIFWConfigureFile",
		"description": "该模块可定义类似 configure_file 的命令，用于配置以 QtIFW/SDK/Creator 样式制作的文件模板。"
	},
	"CPackNSIS": {
		"name": "CPackNSIS",
		"description": "CPack NSIS 生成器的文档已移动到此处: CPack NSIS 生成器"
	},
	"CPackNuGet": {
		"name": "CPackNuGet",
		"description": "CPack NuGet 生成器的文档已移动到此处: CPack NuGet 生成器"
	},
	"CPackProductBuild": {
		"name": "CPackProductBuild",
		"description": "CPack productbuild 生成器的文档已移动到此处: CPack productbuild 生成器"
	},
	"CPackRPM": {
		"name": "CPackRPM",
		"description": "CPack RPM 生成器的文档已移动到此处: CPack RPM 生成器"
	},
	"CPackWIX": {
		"name": "CPackWIX",
		"description": "CPack WIX 生成器的文档已移动到此处: CPack WIX 生成器"
	},
	"CSharpUtilities": {
		"name": "CSharpUtilities",
		"description": "用于简化 CSharp/.NET 目标配置的函数。"
	},
	"CTest": {
		"name": "CTest",
		"description": "配置项目以使用 CTest/CDash 进行测试"
	},
	"CTestCoverageCollectGCOV": {
		"name": "CTestCoverageCollectGCOV",
		"description": "此模块提供了 ctest_coverage_collect_gcov 函数。"
	},
	"CTestScriptMode": {
		"name": "CTestScriptMode",
		"description": "此文件在脚本模式(-S)中由 ctest 读取"
	},
	"CTestUseLaunchers": {
		"name": "CTestUseLaunchers",
		"description": "在 CTEST_USE_LAUNCHERS 处于打开状态时设置 RULE_LAUNCH_* 全局属性。"
	},
	"Dart": {
		"name": "Dart",
		"description": "配置项目以使用 CTest 或旧的 Dart Tcl 客户端进行测试"
	},
	"DeployQt4": {
		"name": "DeployQt4",
		"description": "用于帮助汇编独立 Qt4 可执行文件的函数。"
	},
	"Documentation": {
		"name": "Documentation",
		"description": "此模块提供了对 VTK 文档框架的支持。它依赖于多个工具(Doxygen、Perl 等)。"
	},
	"ExternalData": {
		"name": "ExternalData",
		"description": "管理存储在源树外部的数据文件"
	},
	"ExternalProject": {
		"name": "ExternalProject",
		"description": "ExternalProject_Add() 函数可创建自定义目标，用于驱动外部项目的下载、更新/修补、配置、生成、安装和测试步骤"
	},
	"FeatureSummary": {
		"name": "FeatureSummary",
		"description": "用于生成已启用/已禁用功能摘要的函数。"
	},
	"FetchContent": {
		"name": "FetchContent",
		"description": "使用此模块，可以通过 ExternalProject 模块支持的任何方法在配置时填充内容。与 ExternalProject_Add() 在生成时下载不同，FetchContent 模块会立即提供内容，从而允许配置步骤使用 add_subdirectory()、include() 或 file() 操作等命令中的内容。"
	},
	"FindALSA": {
		"name": "FindALSA",
		"description": "查找高级 Linux 声音体系结构(ALSA)"
	},
	"FindArmadillo": {
		"name": "FindArmadillo",
		"description": "查找 Armad C++ 库。Armad 是用于线性代数和科学计算的库。"
	},
	"FindASPELL": {
		"name": "FindASPELL",
		"description": "尝试查找 ASPELL"
	},
	"FindAVIFile": {
		"name": "FindAVIFile",
		"description": "定位 AVIFILE 库并包含路径"
	},
	"FindBacktrace": {
		"name": "FindBacktrace",
		"description": "查找 backtrace(3)的提供程序。"
	},
	"FindBISON": {
		"name": "FindBISON",
		"description": "查找 bison 可执行文件并提供宏以生成自定义生成规则。"
	},
	"FindBLAS": {
		"name": "FindBLAS",
		"description": "查找基本线性代数子程序(BLAS)库"
	},
	"FindBoost": {
		"name": "FindBoost",
		"description": "查找 Boost 包括目录和库"
	},
	"FindBullet": {
		"name": "FindBullet",
		"description": "尝试查找 Bullet 物理引擎"
	},
	"FindBZip2": {
		"name": "FindBZip2",
		"description": "尝试查找 BZip2"
	},
	"FindCABLE": {
		"name": "FindCABLE",
		"description": "查找 CABLE"
	},
	"FindCoin3D": {
		"name": "FindCoin3D",
		"description": "查找 Coin3D (Open Inventor)"
	},
	"FindCUDA": {
		"name": "FindCUDA",
		"description": "编译 CUDA 代码已不再必须使用此模块或调用 find_package(CUDA)。而是在对项目命令的顶级调用中命名的语言中列出 CUDA，或使用 CUDA 调用 enable_language 命令。然后，可以直接将 CUDA (.cu)源添加到类似于其他语言的目标。"
	},
	"FindCUDAToolkit": {
		"name": "FindCUDAToolkit",
		"description": "此脚本可定位 NVIDIA CUDA 工具包和关联的库，但无需为给定项目启用 CUDA 语言。此模块不会搜索 NVIDIA CUDA 示例。"
	},
	"FindCups": {
		"name": "FindCups",
		"description": "查找通用 UNIX 打印系统(CUPS)。"
	},
	"FindCURL": {
		"name": "FindCURL",
		"description": "查找本机 CURL 标头和库。"
	},
	"FindCurses": {
		"name": "FindCurses",
		"description": "查找游标或 ncurses 包含文件和库。"
	},
	"FindCVS": {
		"name": "FindCVS",
		"description": "查找并发版本系统(CVS)。"
	},
	"FindCxxTest": {
		"name": "FindCxxTest",
		"description": "查找 CxxTest 单元测试框架。"
	},
	"FindCygwin": {
		"name": "FindCygwin",
		"description": "查找 Cygwin (一个与 POSIX 兼容且在 Microsoft Windows 上本机运行的环境)"
	},
	"FindDart": {
		"name": "FindDart",
		"description": "查找 DART"
	},
	"FindDCMTK": {
		"name": "FindDCMTK",
		"description": "查找 DICOM 工具包(DCMTK)库和应用程序"
	},
	"FindDevIL": {
		"name": "FindDevIL",
		"description": "此模块可定位开发人员的映像库。https://openil.sourceforge.net/"
	},
	"FindDoxygen": {
		"name": "FindDoxygen",
		"description": "Doxygen 是一个文档生成工具(请参阅 https://www.doxygen.nl)。此模块可查找 Doxygen 及其支持的一些可选工具:"
	},
	"FindEnvModules": {
		"name": "FindEnvModules",
		"description": "定位环境模块实现，并提供命令以便 CMake 脚本使用它们。这与基于 Lua 的 Lmod 和基于 TCL 的 EnvironmentModules 兼容。"
	},
	"FindEXPAT": {
		"name": "FindEXPAT",
		"description": "查找本机 Expat 标头和库。Expat 是一个使用 C 编写的面向流的 XML 分析程序库。"
	},
	"FindFLEX": {
		"name": "FindFLEX",
		"description": "查找快速词法分析器(Flex)可执行文件，并提供宏以生成自定义生成规则"
	},
	"FindFLTK": {
		"name": "FindFLTK",
		"description": "查找快速轻量工具包(FLTK)库"
	},
	"FindFLTK2": {
		"name": "FindFLTK2",
		"description": "查找本机 FLTK 2.0 包含项和库"
	},
	"FindFontconfig": {
		"name": "FindFontconfig",
		"description": "查找 Fontconfig 标头和库。"
	},
	"FindFreetype": {
		"name": "FindFreetype",
		"description": "查找 FreeType 字体呈现器包含项和库。"
	},
	"FindGCCXML": {
		"name": "FindGCCXML",
		"description": "查找 GCC-XML 前端可执行文件。"
	},
	"FindGDAL": {
		"name": "FindGDAL",
		"description": "查找地理空间数据抽象库(GDAL)。"
	},
	"FindGettext": {
		"name": "FindGettext",
		"description": "查找 GNU gettext 工具"
	},
	"FindGIF": {
		"name": "FindGIF",
		"description": "此操作将查找图形交换格式(GIF)库(giflib)"
	},
	"FindGit": {
		"name": "FindGit",
		"description": "该模块定义了以下变量:"
	},
	"FindGLEW": {
		"name": "FindGLEW",
		"description": "查找 OpenGL 扩展管理库(GLEW)"
	},
	"FindGLUT": {
		"name": "FindGLUT",
		"description": "查找 OpenGL 实用工具包(GLUT)库和包含文件。"
	},
	"FindGnuplot": {
		"name": "FindGnuplot",
		"description": "此模块可查找 gnuplot"
	},
	"FindGnuTLS": {
		"name": "FindGnuTLS",
		"description": "查找 GNU 传输层安全库(gnutls)"
	},
	"FindGSL": {
		"name": "FindGSL",
		"description": "查找本机 GNU 科学库(GSL)包含项和库。"
	},
	"FindGTest": {
		"name": "FindGTest",
		"description": "定位 Google C++ 测试框架。"
	},
	"FindGTK": {
		"name": "FindGTK",
		"description": "查找 GTK、glib 和 GTKGLArea"
	},
	"FindGTK2": {
		"name": "FindGTK2",
		"description": "查找 GTK2 小组件库以及它的其他几个可选组件，如 gtkmm、glade 和 glademm。"
	},
	"FindHDF5": {
		"name": "FindHDF5",
		"description": "查找分层数据格式(HDF5)，它是用于读取和写入自描述数组数据的库。"
	},
	"FindHg": {
		"name": "FindHg",
		"description": "从 mercurial 工作副本中提取信息。"
	},
	"FindHSPELL": {
		"name": "FindHSPELL",
		"description": "尝试查找希伯来语拼写检查器(Hspell)和形态学引擎。"
	},
	"FindHTMLHelp": {
		"name": "FindHTMLHelp",
		"description": "此模块查找 Microsoft HTML 帮助编译器"
	},
	"FindIce": {
		"name": "FindIce",
		"description": "查找 ZeroC Internet 通信引擎(ICE)程序、库和数据文件。"
	},
	"FindIconv": {
		"name": "FindIconv",
		"description": "此模块可查找系统上的 iconv() POSIX.1 函数。这些函数可能会在常规 C 库中提供，也可能以其他库的形式在外部提供。"
	},
	"FindIcotool": {
		"name": "FindIcotool",
		"description": "查找 icotool"
	},
	"FindICU": {
		"name": "FindICU",
		"description": "查找国际 Unicode 组件(ICU)库和程序。"
	},
	"FindImageMagick": {
		"name": "FindImageMagick",
		"description": "查找 ImageMagick，它是用于显示、转换和操作光栅图像的软件套件。"
	},
	"FindIntl": {
		"name": "FindIntl",
		"description": "查找 Gettext libintl 标头和库。"
	},
	"FindITK": {
		"name": "FindITK",
		"description": "此模块已不再存在。"
	},
	"FindJasper": {
		"name": "FindJasper",
		"description": "查找 Jasper JPEG2000 库。"
	},
	"FindJava": {
		"name": "FindJava",
		"description": "查找 Java"
	},
	"FindJNI": {
		"name": "FindJNI",
		"description": "查找 Java 本机接口(JNI)标头和库。"
	},
	"FindJPEG": {
		"name": "FindJPEG",
		"description": "查找联合照片专家小组(JPEG)库(libjpeg)"
	},
	"FindKDE3": {
		"name": "FindKDE3",
		"description": "查找 KDE3 包含项和库目录、KDE 预处理器并定义一些宏"
	},
	"FindKDE4": {
		"name": "FindKDE4",
		"description": "查找 KDE4 并提供为其编译软件所需的所有变量和宏。它按给定的顺序在以下目录中查找 KDE 4:"
	},
	"FindLAPACK": {
		"name": "FindLAPACK",
		"description": "查找线性代数 PACKage (LAPACK)库"
	},
	"FindLATEX": {
		"name": "FindLATEX",
		"description": "查找 LaTeX"
	},
	"FindLibArchive": {
		"name": "FindLibArchive",
		"description": "查找 libarchive 库和标头。Libarchive 是多格式存档和压缩库。"
	},
	"FindLibinput": {
		"name": "FindLibinput",
		"description": "查找 libinput 标头和库。"
	},
	"FindLibLZMA": {
		"name": "FindLibLZMA",
		"description": "查找 LZMA 压缩算法标头和库。"
	},
	"FindLibXml2": {
		"name": "FindLibXml2",
		"description": "查找 XML 处理库(libxml2)。"
	},
	"FindLibXslt": {
		"name": "FindLibXslt",
		"description": "查找 XSL 转换、可扩展样式表语言转换(XSLT)库(LibXslt)"
	},
	"FindLTTngUST": {
		"name": "FindLTTngUST",
		"description": "查找下一代 Linux 跟踪工具包(LTTng-UST)库。"
	},
	"FindLua": {
		"name": "FindLua",
		"description": "定位 Lua 库。"
	},
	"FindLua50": {
		"name": "FindLua50",
		"description": "定位 Lua 库。"
	},
	"FindLua51": {
		"name": "FindLua51",
		"description": "定位 Lua 库。此模块定义:"
	},
	"FindMatlab": {
		"name": "FindMatlab",
		"description": "查找 Matlab 或 Matlab 编译器运行时(MCR)，并向 CMake 提供 Matlab 工具、库和编译器。"
	},
	"FindMFC": {
		"name": "FindMFC",
		"description": "在 Windows 上查找 Microsoft 基础类库(MFC)"
	},
	"FindMotif": {
		"name": "FindMotif",
		"description": "尝试查找 Motif (或 lesstif)"
	},
	"FindMPEG": {
		"name": "FindMPEG",
		"description": "查找本机 MPEG 包含项和库"
	},
	"FindMPEG2": {
		"name": "FindMPEG2",
		"description": "查找本机 MPEG2 包含项和库"
	},
	"FindMPI": {
		"name": "FindMPI",
		"description": "查找消息传递接口(MPI)实现。"
	},
	"FindMsys": {
		"name": "FindMsys",
		"description": "查找 MSYS，它是与 POSIX 兼容且在 Microsoft Windows 上本机运行的环境"
	},
	"FindODBC": {
		"name": "FindODBC",
		"description": "查找开放式数据库连接(ODBC)包含目录和库。"
	},
	"FindOpenACC": {
		"name": "FindOpenACC",
		"description": "检测编译器提供的 OpenACC 支持。"
	},
	"FindOpenAL": {
		"name": "FindOpenAL",
		"description": "查找开放音频库(OpenAL)。"
	},
	"FindOpenCL": {
		"name": "FindOpenCL",
		"description": "查找开放计算语言(OpenCL)"
	},
	"FindOpenGL": {
		"name": "FindOpenGL",
		"description": "适用于 OpenGL 和 OpenGL 实用工具库(GLU)的 FindModule。"
	},
	"FindOpenMP": {
		"name": "FindOpenMP",
		"description": "查找开放多处理(OpenMP)支持。"
	},
	"FindOpenSceneGraph": {
		"name": "FindOpenSceneGraph",
		"description": "查找 OpenSceneGraph (3D 图形应用程序编程接口)"
	},
	"FindOpenSP": {
		"name": "FindOpenSP",
		"description": "尝试查找 OpenSP 库。"
	},
	"FindOpenSSL": {
		"name": "FindOpenSSL",
		"description": "查找 OpenSSL 加密库。"
	},
	"FindOpenThreads": {
		"name": "FindOpenThreads",
		"description": "OpenThreads 是基于 C++ 的线程库。其最大的用户群似乎为 OpenSceneGraph，因此你可能会注意到我接受 OSGDIR 作为环境路径。我认为这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。"
	},
	"Findosg": {
		"name": "Findosg",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgAnimation": {
		"name": "FindosgAnimation",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgDB": {
		"name": "FindosgDB",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgFX": {
		"name": "FindosgFX",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgGA": {
		"name": "FindosgGA",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgIntrospection": {
		"name": "FindosgIntrospection",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgManipulator": {
		"name": "FindosgManipulator",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgParticle": {
		"name": "FindosgParticle",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgPresentation": {
		"name": "FindosgPresentation",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgProducer": {
		"name": "FindosgProducer",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgQt": {
		"name": "FindosgQt",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgShadow": {
		"name": "FindosgShadow",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgSim": {
		"name": "FindosgSim",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgTerrain": {
		"name": "FindosgTerrain",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgText": {
		"name": "FindosgText",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgUtil": {
		"name": "FindosgUtil",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgViewer": {
		"name": "FindosgViewer",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgVolume": {
		"name": "FindosgVolume",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"FindosgWidget": {
		"name": "FindosgWidget",
		"description": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。"
	},
	"Findosg_functions": {
		"name": "Findosg_functions",
		"description": "此 CMake 文件包含两个宏，可帮助搜索 OSG 库和节点包。有关完整文档，请参阅 FindOpenSceneGraph。"
	},
	"FindPackageHandleStandardArgs": {
		"name": "FindPackageHandleStandardArgs",
		"description": "此模块提供的函数旨在用于实现 find_package(<PackageName>) 调用的 Find 模块。"
	},
	"FindPackageMessage": {
		"name": "FindPackageMessage",
		"description": "此函数旨在用于 FindXXX.cmake 模块文件。它将为每个唯一查找结果打印一次消息。这对于告知用户找到包的位置非常有用。第一个参数了指定包的名称(XXX)。第二个参数指定要显示的消息。第三个参数列出了有关查找结果的详细信息，以便如果更改结果，将会再次显示该消息。该宏还遵循 find_package 命令的 QUIET 参数。"
	},
	"FindPatch": {
		"name": "FindPatch",
		"description": "该模块定义了以下变量:"
	},
	"FindPerl": {
		"name": "FindPerl",
		"description": "查找 Perl 解释器。"
	},
	"FindPerlLibs": {
		"name": "FindPerlLibs",
		"description": "查找 Perl 库"
	},
	"FindPHP4": {
		"name": "FindPHP4",
		"description": "查找 PHP4"
	},
	"FindPhysFS": {
		"name": "FindPhysFS",
		"description": "定位 PhysFS 库，此模块定义:"
	},
	"FindPike": {
		"name": "FindPike",
		"description": "查找 Pike"
	},
	"FindPkgConfig": {
		"name": "FindPkgConfig",
		"description": "CMake 的 pkg-config 模块。"
	},
	"FindPNG": {
		"name": "FindPNG",
		"description": "查找 PNG 图像格式的官方参考库 libpng。"
	},
	"FindPostgreSQL": {
		"name": "FindPostgreSQL",
		"description": "查找 PostgreSQL 安装。"
	},
	"FindProducer": {
		"name": "FindProducer",
		"description": "虽然 Producer 不是 OpenSceneGraph 的直接组成部分，但其主要使用者是 OSG，因此我认为此部分 Findosg* 套件可用于查找 OpenSceneGraph 组件。你会注意到我接受 OSGDIR 作为环境路径。"
	},
	"FindProtobuf": {
		"name": "FindProtobuf",
		"description": "定位并配置 Google 协议缓冲区库。"
	},
	"FindPython": {
		"name": "FindPython",
		"description": "查找 Python 解释器、编译器和开发环境(包括目录和库)。"
	},
	"FindPython2": {
		"name": "FindPython2",
		"description": "查找 Python 2 解释器、编译器和开发环境(包括目录和库)。"
	},
	"FindPython3": {
		"name": "FindPython3",
		"description": "查找 Python 3 解释器、编译器和开发环境(包括目录和库)。"
	},
	"FindPythonInterp": {
		"name": "FindPythonInterp",
		"description": "查找 Python 解释器"
	},
	"FindPythonLibs": {
		"name": "FindPythonLibs",
		"description": "查找 python 库"
	},
	"FindQt": {
		"name": "FindQt",
		"description": "搜索所有已安装的 Qt3 或 Qt4 版本。"
	},
	"FindQt3": {
		"name": "FindQt3",
		"description": "定位 Qt 包含路径和库"
	},
	"FindQt4": {
		"name": "FindQt4",
		"description": "此模块可用于查找 Qt4。最重要的问题是 Qt4 qmake 是通过系统路径提供的。然后，此 qmake 用于检测几乎其他所有内容。此模块定义了许多导入的目标、宏和变量。"
	},
	"FindQuickTime": {
		"name": "FindQuickTime",
		"description": "定位 QuickTime，此模块定义了:"
	},
	"FindRTI": {
		"name": "FindRTI",
		"description": "尝试查找 M&S HLA RTI 库"
	},
	"FindRuby": {
		"name": "FindRuby",
		"description": "查找 Ruby"
	},
	"FindSDL": {
		"name": "FindSDL",
		"description": "定位 SDL 库"
	},
	"FindSDL_gfx": {
		"name": "FindSDL_gfx",
		"description": "定位 SDL_gfx 库"
	},
	"FindSDL_image": {
		"name": "FindSDL_image",
		"description": "定位 SDL_image 库"
	},
	"FindSDL_mixer": {
		"name": "FindSDL_mixer",
		"description": "定位 SDL_mixer 库"
	},
	"FindSDL_net": {
		"name": "FindSDL_net",
		"description": "定位 SDL_net 库"
	},
	"FindSDL_sound": {
		"name": "FindSDL_sound",
		"description": "定位 SDL_sound 库"
	},
	"FindSDL_ttf": {
		"name": "FindSDL_ttf",
		"description": "定位 SDL_ttf 库"
	},
	"FindSelfPackers": {
		"name": "FindSelfPackers",
		"description": "查找 upx"
	},
	"FindSQLite3": {
		"name": "FindSQLite3",
		"description": "查找 SQLite 库 v3"
	},
	"FindSquish": {
		"name": "FindSquish",
		"description": "-- 典型用法"
	},
	"FindSubversion": {
		"name": "FindSubversion",
		"description": "从子版本工作副本中提取信息"
	},
	"FindSWIG": {
		"name": "FindSWIG",
		"description": "查找简化包装器和接口生成器(SNO)可执行文件。"
	},
	"FindTCL": {
		"name": "FindTCL",
		"description": "已移除 TK_INTERNAL_PATH。"
	},
	"FindTclsh": {
		"name": "FindTclsh",
		"description": "查找 tclsh"
	},
	"FindTclStub": {
		"name": "FindTclStub",
		"description": "已移除 TCL_STUB_LIBRARY_DEBUG 和 TK_STUB_LIBRARY_DEBUG。"
	},
	"FindThreads": {
		"name": "FindThreads",
		"description": "此模块确定系统的线程库。"
	},
	"FindTIFF": {
		"name": "FindTIFF",
		"description": "查找 TIFF 库(libtiff、https://libtiff.gitlab.io/libtiff/)。"
	},
	"FindUnixCommands": {
		"name": "FindUnixCommands",
		"description": "查找 Unix 命令，包括 Cygwin 中的命令"
	},
	"FindVTK": {
		"name": "FindVTK",
		"description": "此模块已不再存在。"
	},
	"FindVulkan": {
		"name": "FindVulkan",
		"description": "查找 Vulkan，它是一种低开销的跨平台 3D 图形和计算 API。"
	},
	"FindWget": {
		"name": "FindWget",
		"description": "查找 wget"
	},
	"FindWish": {
		"name": "FindWish",
		"description": "查找 wish 安装"
	},
	"FindwxWidgets": {
		"name": "FindwxWidgets",
		"description": "查找 wxWidgets (也称为 wxWindows)安装。"
	},
	"FindwxWindows": {
		"name": "FindwxWindows",
		"description": "查找 wxWindows (wxWidgets)安装"
	},
	"FindX11": {
		"name": "FindX11",
		"description": "查找 X11 安装"
	},
	"FindXalanC": {
		"name": "FindXalanC",
		"description": "查找 Apache Xalan-C++ XSL 转换处理器标头和库。"
	},
	"FindXCTest": {
		"name": "FindXCTest",
		"description": "帮助创建和执行 XCTest 捆绑包的函数。"
	},
	"FindXercesC": {
		"name": "FindXercesC",
		"description": "查找验证 XML 分析程序标头和库的 Apache Xcerces-C++。"
	},
	"FindXMLRPC": {
		"name": "FindXMLRPC",
		"description": "查找 xmlrpc"
	},
	"FindZLIB": {
		"name": "FindZLIB",
		"description": "查找本机 ZLIB 包含项和库。"
	},
	"FortranCInterface": {
		"name": "FortranCInterface",
		"description": "Fortran/C 接口检测"
	},
	"GenerateExportHeader": {
		"name": "GenerateExportHeader",
		"description": "用于生成库的导出宏的函数"
	},
	"GetPrerequisites": {
		"name": "GetPrerequisites",
		"description": "用于分析和列出可执行文件先决条件的函数。"
	},
	"GNUInstallDirs": {
		"name": "GNUInstallDirs",
		"description": "定义 GNU 标准安装目录"
	},
	"GoogleTest": {
		"name": "GoogleTest",
		"description": "此模块定义了用于帮助使用 Google Test 基础结构的函数。提供了两种用于添加测试的机制。gtest_add_tests 最初通过 find_package(GTest)已存在一段时间。gtest_discover_tests 则是在 CMake 3.10 中引入的。"
	},
	"InstallRequiredSystemLibraries": {
		"name": "InstallRequiredSystemLibraries",
		"description": "包括此模块以搜索编译器提供的系统运行时库并为其添加安装规则。在包括模块以调整行为之前，可以设置一些可选变量:"
	},
	"MacroAddFileDependencies": {
		"name": "MacroAddFileDependencies",
		"description": "不要在新代码中使用此命令。它只是以下内容的包装器:"
	},
	"ProcessorCount": {
		"name": "ProcessorCount",
		"description": "ProcessorCount(var)"
	},
	"SelectLibraryConfigurations": {
		"name": "SelectLibraryConfigurations",
		"description": "此宏采用库基名称作为参数，并将为变量选择合适的值"
	},
	"SquishTestScript": {
		"name": "SquishTestScript",
		"description": "此脚本使用 Squish 启动 GUI 测试。不应直接调用脚本；而应通过在 FindSquish.cmake 中定义的 SQUISH_ADD_TEST 宏来访问它。"
	},
	"TestBigEndian": {
		"name": "TestBigEndian",
		"description": "检查目标体系结构是 big endian 还是little endian。"
	},
	"TestCXXAcceptsFlag": {
		"name": "TestCXXAcceptsFlag",
		"description": "检查 CXX 编译器是否接受标志。"
	},
	"TestForANSIForScope": {
		"name": "TestForANSIForScope",
		"description": "检查 ANSI 以了解支持范围"
	},
	"TestForANSIStreamHeaders": {
		"name": "TestForANSIStreamHeaders",
		"description": "测试 ANSI 流标头 iostream 等的编译器支持。"
	},
	"TestForSSTREAM": {
		"name": "TestForSSTREAM",
		"description": "测试 ANSI sstream 标头的编译器支持"
	},
	"TestForSTDNamespace": {
		"name": "TestForSTDNamespace",
		"description": "测试 std:: 命名空间支持"
	},
	"UseEcos": {
		"name": "UseEcos",
		"description": "此模块定义了生成 eCos 应用程序所需的变量和宏。"
	},
	"UseJava": {
		"name": "UseJava",
		"description": "此文件提供对 Java 的支持。它假定已加载 FindJava。有关如何将 Java 加载到 CMake 项目中的信息，请参阅 FindJava。"
	},
	"UseJavaClassFilelist": {
		"name": "UseJavaClassFilelist",
		"description": "此模块以前是错误记录的，并且本意从来不是由项目代码直接包含。请参阅 :module:`UseJava` 模块。"
	},
	"UseJavaSymlinks": {
		"name": "UseJavaSymlinks",
		"description": "此模块以前是错误记录的，并且本意从来不是由项目代码直接包含。请参阅 :module:`UseJava` 模块。"
	},
	"UsePkgConfig": {
		"name": "UsePkgConfig",
		"description": "CMake 的 pkg-config 模块已过时，请改用 FindPkgConfig。"
	},
	"UseSWIG": {
		"name": "UseSWIG",
		"description": "此文件提供对 SWIG 的支持。假定已加载 FindSWIG 模块。"
	},
	"UsewxWidgets": {
		"name": "UsewxWidgets",
		"description": "便利性包含，用于使用 wxWidgets 库。"
	},
	"Use_wxWindows": {
		"name": "Use_wxWindows",
		"description": "此便利性包含可查找是否安装了 wxWindows 并设置适当的库、incdir、标志等。作者 Jan Woetzel <jw -at- mip.informatik.uni-kiel.de> (07/2003)"
	},
	"WriteBasicConfigVersionFile": {
		"name": "WriteBasicConfigVersionFile",
		"description": "自版本 3.0 起弃用:使用模块 CMakePackageConfigHelpers 中的相同命令 write_basic_package_version_file()。"
	},
	"WriteCompilerDetectionHeader": {
		"name": "WriteCompilerDetectionHeader",
		"description": "此模块提供函数 write_compiler_detection_header()。"
	}
}